name: Continuous Integration

on:
  pull_request:
  push:

jobs:
  test:
    name: sbt test on ubuntu
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        scala: [2.12.15, 2.13.6]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install Verilator
        run: |
          sudo apt-get install -y verilator
          verilator --version
      - name: Test Coverage
        run: |
          cd coverage
          sbt ++${{ matrix.scala }} test
      - name: Test FireSim Coverage
        run: |
          cd firesim-coverage
          sbt ++${{ matrix.scala }} test


  benchmarks:
    name: benchmarks
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        # 4.028: Ubuntu 20.04, Fedora 32
        # 4.032: Fedora 33
        # 4.034: Chipyard
        # 4.038: Ubuntu 20.10
        # 4.106: Verilator version that we used in the original benchmarking
        # 4.108: Fedora 34
        # 4.200: currently the latest version on brew (MacOS)
        # 4.202: added "forcePerInstance" to support our coverage flow
        version: ["4.034"] #, "4.202"]

    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install Verilator Build Dependencies
        run: sudo apt-get install -y git make autoconf g++ flex bison libfl2 libfl-dev
      - name: Cache Verilator ${{ matrix.version }}
        uses: actions/cache@v3
        id: cache-verilator
        with:
          path: verilator-${{ matrix.version }}
          key: ${{ runner.os }}-verilator-${{ matrix.version }}
      - name: Compile Verilator ${{ matrix.version }}
        if: steps.cache-verilator.outputs.cache-hit != 'true'
        run: |
          wget https://github.com/verilator/verilator/archive/refs/tags/v${{ matrix.version }}.zip
          unzip v${{ matrix.version }}.zip
          cd verilator-${{ matrix.version }}
          autoconf
          ./configure
          make
      - name: Install Verilator ${{ matrix.version }}
        run: |
          cd verilator-${{ matrix.version }}
          sudo make install
          verilator --version
      - name: Compile Scala
        run: cd coverage && sbt assembly
      - name: Neuromorphic Processor - Compile All
        run: cd benchmarks && make NeuromorphicProcessor_all_bin


      # - name: Compile Firrtl Line Coverage
      #   run: cd benchmarks && make LL=info riscv-mini/TileTester_BmarkTestsmedian.riscv/TileTester_line_firrtl
      # - name: Compile Verilator Line Coverage
      #   run: cd benchmarks && make riscv-mini/TileTester_BmarkTestsmedian.riscv/TileTester_line_native
      # - name: Compile Firrtl Toggle Coverage
      #   run: cd benchmarks && make LL=info riscv-mini/TileTester_BmarkTestsmedian.riscv/TileTester_toggle_firrtl
      # - name: Compile Verilator Toggle Coverage
      #   run: cd benchmarks && make riscv-mini/TileTester_BmarkTestsmedian.riscv/TileTester_toggle_native
      # - name: Run Firrtl Line Coverage
      #   run: time ./benchmarks/riscv-mini/TileTester_BmarkTestsmedian.riscv/TileTester_line_firrtl
      # - name: Run Verilator Line Coverage
      #   run: time ./benchmarks/riscv-mini/TileTester_BmarkTestsmedian.riscv/TileTester_line_native
      # - name: Run Firrtl Toggle Coverage
      #   run: time ./benchmarks/riscv-mini/TileTester_BmarkTestsmedian.riscv/TileTester_toggle_firrtl
      # - name: Run Verilator Toggle Coverage
      #   run: time ./benchmarks/riscv-mini/TileTester_BmarkTestsmedian.riscv/TileTester_toggle_native
      # - name: Compile Firrtl Line Coverage (Neuromorphic Processor)
      #   timeout-minutes: 3
      #   run: cd benchmarks && make LL=info NeuromorphicProcessor/NeuromorphicProcessor_line_firrtl
      # - name: Run Firrtl Line Coverage (Neuromorphic Processor)
      #   timeout-minutes: 3
      #   run: time ./benchmarks/NeuromorphicProcessor/NeuromorphicProcessor_line_firrtl

  # Sentinel job to simplify how we specify which checks need to pass in branch
  # protection and in Mergify
  #
  # When adding new jobs, please add them to `needs` below
  all_tests_passed:
    name: "all tests passed"
    needs: [test, benchmarks]
    runs-on: ubuntu-latest
    steps:
      - run: echo Success!
