#!/usr/bin/env python3

import csv
from pathlib import Path

_script_dir = Path(__file__).parent.resolve()
_build_dir = _script_dir / "build"

# mapping from Makefile name to name in paper figure
benchmark_names = {"riscv_mini": "rv-mini", "serv": "serv", "TLRAM": "TLRAM", "NeuromorphicProcessor": "Neuro"}
# configurations with small overhead, this is the left side of the figure
small_configs = {"native_line": "Line Native", "firrtl_line": "Line FIRRTL", "firrtl_fsm": "FSM", "firrtl_ready_valid": "Ready/Valid"}
# configurations with large overhead, this is the right side of the figure
large_configs = {"native_toggle": "Toggle Native", "firrtl_toggle": "Toggle FIRRTL", "firrtl_all": "All FIRRTL"}

all_configs = ["baseline"] + list(small_configs.keys()) + list(large_configs.keys())

# loads csv generated by hyperfine and extracts the mean for each configuration
def load_csv(filename: Path):
    assert filename.exists()
    means = {}
    with open(filename, newline='') as csvfile:
        read = list(csv.reader(csvfile))[1:] # skip first line
        for row in read:
            cmd, mean = row[0], row[1]
            for conf in all_configs:
                if cmd.endswith(f"{conf}.bin"):
                    means[conf] = mean
                    break
    return means

def to_relative_overhead(means: dict):
    baseline = float(means["baseline"])
    return {k: (float(v) * 100.0 /  baseline) - 100.0 for k,v in means.items() if k != "baseline"}


def make_table(results: dict, configs: dict):
    header = ["Benchmark"] + list(configs.values())
    rows = [header]
    for name, label in benchmark_names.items():
        row = [label]
        for conf in configs.keys():
            row += [f"{results[name][conf]:.2f}"]
        rows += [row]
    return rows

def table_to_string(rows):
    return "\n".join(", ".join(r) for r in rows)

def main():
    results = {}
    # load data from hyperfine
    for name, label in benchmark_names.items():
        filename = _build_dir / f"{name}_results.csv"
        assert filename.exists()
        means = load_csv(filename)
        results[name] = to_relative_overhead(means)


    # translate to table
    small_table = make_table(results, small_configs)
    large_table = make_table(results, large_configs)

    # save
    with open(_build_dir / "figure8_verilator_overhead_small.csv", "w") as f:
        f.write(table_to_string(small_table) + "\n")
    with open(_build_dir / "figure8_verilator_overhead_large.csv", "w") as f:
        f.write(table_to_string(large_table) + "\n")


if __name__ == '__main__':
    main()