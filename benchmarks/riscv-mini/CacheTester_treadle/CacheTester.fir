;buildInfoPackage: chisel3, version: 3.3.3, scalaVersion: 2.12.11, sbtVersion: 1.3.10
circuit CacheTester : 
  module Cache : 
    input clock : Clock
    input reset : Reset
    output io : {cpu : {flip abort : UInt<1>, flip req : {valid : UInt<1>, bits : {addr : UInt<32>, data : UInt<32>, mask : UInt<4>}}, resp : {valid : UInt<1>, bits : {data : UInt<32>}}}, nasti : {aw : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, region : UInt<4>, id : UInt<5>, user : UInt<1>}}, w : {flip ready : UInt<1>, valid : UInt<1>, bits : {data : UInt<64>, last : UInt<1>, id : UInt<5>, strb : UInt<8>, user : UInt<1>}}, flip b : {flip ready : UInt<1>, valid : UInt<1>, bits : {resp : UInt<2>, id : UInt<5>, user : UInt<1>}}, ar : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, region : UInt<4>, id : UInt<5>, user : UInt<1>}}, flip r : {flip ready : UInt<1>, valid : UInt<1>, bits : {resp : UInt<2>, data : UInt<64>, last : UInt<1>, id : UInt<5>, user : UInt<1>}}}}
    
    reg state : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[Cache.scala 58:22]
    reg v : UInt<256>, clock with : (reset => (reset, UInt<256>("h00"))) @[Cache.scala 60:25]
    reg d : UInt<256>, clock with : (reset => (reset, UInt<256>("h00"))) @[Cache.scala 61:25]
    smem metaMem : {tag : UInt<20>}[256], undefined @[Cache.scala 62:29]
    smem dataMem_0 : UInt<8>[4][256], undefined @[Cache.scala 63:46]
    smem dataMem_1 : UInt<8>[4][256], undefined @[Cache.scala 63:46]
    smem dataMem_2 : UInt<8>[4][256], undefined @[Cache.scala 63:46]
    smem dataMem_3 : UInt<8>[4][256], undefined @[Cache.scala 63:46]
    reg addr_reg : UInt<32>, clock @[Cache.scala 65:21]
    reg cpu_data : UInt<32>, clock @[Cache.scala 66:21]
    reg cpu_mask : UInt<4>, clock @[Cache.scala 67:21]
    node _T = and(io.nasti.r.ready, io.nasti.r.valid) @[Decoupled.scala 40:37]
    reg read_count : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Counter.scala 29:33]
    wire read_wrap_out : UInt<1>
    read_wrap_out <= UInt<1>("h00")
    when _T : @[Counter.scala 67:17]
      node _T_1 = eq(read_count, UInt<1>("h01")) @[Counter.scala 38:24]
      node _T_2 = add(read_count, UInt<1>("h01")) @[Counter.scala 39:22]
      node _T_3 = tail(_T_2, 1) @[Counter.scala 39:22]
      read_count <= _T_3 @[Counter.scala 39:13]
      read_wrap_out <= _T_1 @[Counter.scala 67:24]
      skip @[Counter.scala 67:17]
    node _T_4 = and(io.nasti.w.ready, io.nasti.w.valid) @[Decoupled.scala 40:37]
    reg write_count : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Counter.scala 29:33]
    wire write_wrap_out : UInt<1>
    write_wrap_out <= UInt<1>("h00")
    when _T_4 : @[Counter.scala 67:17]
      node _T_5 = eq(write_count, UInt<1>("h01")) @[Counter.scala 38:24]
      node _T_6 = add(write_count, UInt<1>("h01")) @[Counter.scala 39:22]
      node _T_7 = tail(_T_6, 1) @[Counter.scala 39:22]
      write_count <= _T_7 @[Counter.scala 39:13]
      write_wrap_out <= _T_5 @[Counter.scala 67:24]
      skip @[Counter.scala 67:17]
    node is_idle = eq(state, UInt<3>("h00")) @[Cache.scala 74:25]
    node is_read = eq(state, UInt<3>("h01")) @[Cache.scala 75:25]
    node is_write = eq(state, UInt<3>("h02")) @[Cache.scala 76:25]
    node _T_8 = eq(state, UInt<3>("h06")) @[Cache.scala 77:25]
    node is_alloc = and(_T_8, read_wrap_out) @[Cache.scala 77:38]
    reg is_alloc_reg : UInt<1>, clock @[Cache.scala 78:29]
    is_alloc_reg <= is_alloc @[Cache.scala 78:29]
    wire hit : UInt<1> @[Cache.scala 80:17]
    node _T_9 = or(hit, is_alloc_reg) @[Cache.scala 81:30]
    node _T_10 = and(is_write, _T_9) @[Cache.scala 81:22]
    node _T_11 = eq(io.cpu.abort, UInt<1>("h00")) @[Cache.scala 81:50]
    node _T_12 = and(_T_10, _T_11) @[Cache.scala 81:47]
    node wen = or(_T_12, is_alloc) @[Cache.scala 81:64]
    node _T_13 = eq(wen, UInt<1>("h00")) @[Cache.scala 82:13]
    node _T_14 = or(is_idle, is_read) @[Cache.scala 82:30]
    node _T_15 = and(_T_13, _T_14) @[Cache.scala 82:18]
    node ren = and(_T_15, io.cpu.req.valid) @[Cache.scala 82:42]
    reg ren_reg : UInt<1>, clock @[Cache.scala 83:24]
    ren_reg <= ren @[Cache.scala 83:24]
    node idx = bits(io.cpu.req.bits.addr, 11, 4) @[Cache.scala 86:22]
    node tag_reg = bits(addr_reg, 31, 12) @[Cache.scala 87:26]
    node idx_reg = bits(addr_reg, 11, 4) @[Cache.scala 88:26]
    node off_reg = bits(addr_reg, 3, 2) @[Cache.scala 89:26]
    wire _T_16 : UInt @[Cache.scala 91:27]
    _T_16 is invalid @[Cache.scala 91:27]
    when ren : @[Cache.scala 91:27]
      _T_16 <= idx @[Cache.scala 91:27]
      node _T_17 = or(_T_16, UInt<8>("h00")) @[Cache.scala 91:27]
      node _T_18 = bits(_T_17, 7, 0) @[Cache.scala 91:27]
      read mport rmeta = metaMem[_T_18], clock @[Cache.scala 91:27]
      skip @[Cache.scala 91:27]
    wire _T_19 : UInt @[Cache.scala 92:39]
    _T_19 is invalid @[Cache.scala 92:39]
    when ren : @[Cache.scala 92:39]
      _T_19 <= idx @[Cache.scala 92:39]
      node _T_20 = or(_T_19, UInt<8>("h00")) @[Cache.scala 92:39]
      node _T_21 = bits(_T_20, 7, 0) @[Cache.scala 92:39]
      read mport _T_22 = dataMem_0[_T_21], clock @[Cache.scala 92:39]
      skip @[Cache.scala 92:39]
    node _T_23 = cat(_T_22[1], _T_22[0]) @[Cache.scala 92:50]
    node _T_24 = cat(_T_22[3], _T_22[2]) @[Cache.scala 92:50]
    node _T_25 = cat(_T_24, _T_23) @[Cache.scala 92:50]
    wire _T_26 : UInt @[Cache.scala 92:39]
    _T_26 is invalid @[Cache.scala 92:39]
    when ren : @[Cache.scala 92:39]
      _T_26 <= idx @[Cache.scala 92:39]
      node _T_27 = or(_T_26, UInt<8>("h00")) @[Cache.scala 92:39]
      node _T_28 = bits(_T_27, 7, 0) @[Cache.scala 92:39]
      read mport _T_29 = dataMem_1[_T_28], clock @[Cache.scala 92:39]
      skip @[Cache.scala 92:39]
    node _T_30 = cat(_T_29[1], _T_29[0]) @[Cache.scala 92:50]
    node _T_31 = cat(_T_29[3], _T_29[2]) @[Cache.scala 92:50]
    node _T_32 = cat(_T_31, _T_30) @[Cache.scala 92:50]
    wire _T_33 : UInt @[Cache.scala 92:39]
    _T_33 is invalid @[Cache.scala 92:39]
    when ren : @[Cache.scala 92:39]
      _T_33 <= idx @[Cache.scala 92:39]
      node _T_34 = or(_T_33, UInt<8>("h00")) @[Cache.scala 92:39]
      node _T_35 = bits(_T_34, 7, 0) @[Cache.scala 92:39]
      read mport _T_36 = dataMem_2[_T_35], clock @[Cache.scala 92:39]
      skip @[Cache.scala 92:39]
    node _T_37 = cat(_T_36[1], _T_36[0]) @[Cache.scala 92:50]
    node _T_38 = cat(_T_36[3], _T_36[2]) @[Cache.scala 92:50]
    node _T_39 = cat(_T_38, _T_37) @[Cache.scala 92:50]
    wire _T_40 : UInt @[Cache.scala 92:39]
    _T_40 is invalid @[Cache.scala 92:39]
    when ren : @[Cache.scala 92:39]
      _T_40 <= idx @[Cache.scala 92:39]
      node _T_41 = or(_T_40, UInt<8>("h00")) @[Cache.scala 92:39]
      node _T_42 = bits(_T_41, 7, 0) @[Cache.scala 92:39]
      read mport _T_43 = dataMem_3[_T_42], clock @[Cache.scala 92:39]
      skip @[Cache.scala 92:39]
    node _T_44 = cat(_T_43[1], _T_43[0]) @[Cache.scala 92:50]
    node _T_45 = cat(_T_43[3], _T_43[2]) @[Cache.scala 92:50]
    node _T_46 = cat(_T_45, _T_44) @[Cache.scala 92:50]
    node _T_47 = cat(_T_32, _T_25) @[Cat.scala 30:58]
    node _T_48 = cat(_T_46, _T_39) @[Cat.scala 30:58]
    node rdata = cat(_T_48, _T_47) @[Cat.scala 30:58]
    reg rdata_buf : UInt<128>, clock @[Reg.scala 15:16]
    when ren_reg : @[Reg.scala 16:19]
      rdata_buf <= rdata @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    reg refill_buf : UInt<64>[2], clock @[Cache.scala 94:23]
    node _T_49 = cat(refill_buf[1], refill_buf[0]) @[Cache.scala 95:43]
    node _T_50 = mux(ren_reg, rdata, rdata_buf) @[Cache.scala 95:54]
    node read = mux(is_alloc_reg, _T_49, _T_50) @[Cache.scala 95:17]
    node _T_51 = dshr(v, idx_reg) @[Cache.scala 97:11]
    node _T_52 = bits(_T_51, 0, 0) @[Cache.scala 97:11]
    node _T_53 = eq(rmeta.tag, tag_reg) @[Cache.scala 97:34]
    node _T_54 = and(_T_52, _T_53) @[Cache.scala 97:21]
    hit <= _T_54 @[Cache.scala 97:7]
    node _T_55 = bits(read, 31, 0) @[Cache.scala 100:62]
    node _T_56 = bits(read, 63, 32) @[Cache.scala 100:62]
    node _T_57 = bits(read, 95, 64) @[Cache.scala 100:62]
    node _T_58 = bits(read, 127, 96) @[Cache.scala 100:62]
    wire _T_59 : UInt<32>[4] @[Cache.scala 100:52]
    _T_59[0] <= _T_55 @[Cache.scala 100:52]
    _T_59[1] <= _T_56 @[Cache.scala 100:52]
    _T_59[2] <= _T_57 @[Cache.scala 100:52]
    _T_59[3] <= _T_58 @[Cache.scala 100:52]
    io.cpu.resp.bits.data <= _T_59[off_reg] @[Cache.scala 100:25]
    node _T_60 = and(is_read, hit) @[Cache.scala 101:47]
    node _T_61 = or(is_idle, _T_60) @[Cache.scala 101:36]
    node _T_62 = orr(cpu_mask) @[Cache.scala 101:83]
    node _T_63 = eq(_T_62, UInt<1>("h00")) @[Cache.scala 101:73]
    node _T_64 = and(is_alloc_reg, _T_63) @[Cache.scala 101:70]
    node _T_65 = or(_T_61, _T_64) @[Cache.scala 101:54]
    io.cpu.resp.valid <= _T_65 @[Cache.scala 101:25]
    when io.cpu.resp.valid : @[Cache.scala 103:27]
      addr_reg <= io.cpu.req.bits.addr @[Cache.scala 104:15]
      cpu_data <= io.cpu.req.bits.data @[Cache.scala 105:15]
      cpu_mask <= io.cpu.req.bits.mask @[Cache.scala 106:15]
      skip @[Cache.scala 103:27]
    wire wmeta : {tag : UInt<20>} @[Cache.scala 109:19]
    wmeta.tag <= tag_reg @[Cache.scala 110:13]
    node _T_66 = eq(is_alloc, UInt<1>("h00")) @[Cache.scala 112:19]
    node _T_67 = cat(off_reg, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_68 = dshl(cpu_mask, _T_67) @[Cache.scala 112:40]
    node _T_69 = cvt(_T_68) @[Cache.scala 112:80]
    node wmask = mux(_T_66, _T_69, asSInt(UInt<1>("h01"))) @[Cache.scala 112:18]
    node _T_70 = eq(is_alloc, UInt<1>("h00")) @[Cache.scala 113:19]
    node _T_71 = cat(cpu_data, cpu_data) @[Cat.scala 30:58]
    node _T_72 = cat(_T_71, _T_71) @[Cat.scala 30:58]
    node _T_73 = cat(io.nasti.r.bits.data, refill_buf[0]) @[Cat.scala 30:58]
    node wdata = mux(_T_70, _T_72, _T_73) @[Cache.scala 113:18]
    when wen : @[Cache.scala 116:13]
      node _T_74 = dshl(UInt<1>("h01"), idx_reg) @[Cache.scala 117:18]
      node _T_75 = or(v, _T_74) @[Cache.scala 117:18]
      node _T_76 = not(v) @[Cache.scala 117:18]
      node _T_77 = or(_T_76, _T_74) @[Cache.scala 117:18]
      node _T_78 = not(_T_77) @[Cache.scala 117:18]
      node _T_79 = mux(UInt<1>("h01"), _T_75, _T_78) @[Cache.scala 117:18]
      v <= _T_79 @[Cache.scala 117:7]
      node _T_80 = eq(is_alloc, UInt<1>("h00")) @[Cache.scala 118:28]
      node _T_81 = dshl(UInt<1>("h01"), idx_reg) @[Cache.scala 118:18]
      node _T_82 = or(d, _T_81) @[Cache.scala 118:18]
      node _T_83 = not(d) @[Cache.scala 118:18]
      node _T_84 = or(_T_83, _T_81) @[Cache.scala 118:18]
      node _T_85 = not(_T_84) @[Cache.scala 118:18]
      node _T_86 = mux(_T_80, _T_82, _T_85) @[Cache.scala 118:18]
      d <= _T_86 @[Cache.scala 118:7]
      when is_alloc : @[Cache.scala 119:20]
        write mport _T_87 = metaMem[idx_reg], clock
        _T_87.tag <= wmeta.tag
        skip @[Cache.scala 119:20]
      node _T_88 = bits(wdata, 7, 0) @[Cache.scala 123:53]
      node _T_89 = bits(wdata, 15, 8) @[Cache.scala 123:53]
      node _T_90 = bits(wdata, 23, 16) @[Cache.scala 123:53]
      node _T_91 = bits(wdata, 31, 24) @[Cache.scala 123:53]
      wire _T_92 : UInt<8>[4] @[Cache.scala 123:42]
      _T_92[0] <= _T_88 @[Cache.scala 123:42]
      _T_92[1] <= _T_89 @[Cache.scala 123:42]
      _T_92[2] <= _T_90 @[Cache.scala 123:42]
      _T_92[3] <= _T_91 @[Cache.scala 123:42]
      node _T_93 = bits(wmask, 3, 0) @[Cache.scala 124:37]
      node _T_94 = bits(_T_93, 0, 0) @[Cache.scala 124:71]
      node _T_95 = bits(_T_93, 1, 1) @[Cache.scala 124:71]
      node _T_96 = bits(_T_93, 2, 2) @[Cache.scala 124:71]
      node _T_97 = bits(_T_93, 3, 3) @[Cache.scala 124:71]
      write mport _T_98 = dataMem_0[idx_reg], clock
      when _T_94 :
        _T_98[0] <= _T_92[0]
        skip
      when _T_95 :
        _T_98[1] <= _T_92[1]
        skip
      when _T_96 :
        _T_98[2] <= _T_92[2]
        skip
      when _T_97 :
        _T_98[3] <= _T_92[3]
        skip
      node _T_99 = bits(wdata, 39, 32) @[Cache.scala 123:53]
      node _T_100 = bits(wdata, 47, 40) @[Cache.scala 123:53]
      node _T_101 = bits(wdata, 55, 48) @[Cache.scala 123:53]
      node _T_102 = bits(wdata, 63, 56) @[Cache.scala 123:53]
      wire _T_103 : UInt<8>[4] @[Cache.scala 123:42]
      _T_103[0] <= _T_99 @[Cache.scala 123:42]
      _T_103[1] <= _T_100 @[Cache.scala 123:42]
      _T_103[2] <= _T_101 @[Cache.scala 123:42]
      _T_103[3] <= _T_102 @[Cache.scala 123:42]
      node _T_104 = bits(wmask, 7, 4) @[Cache.scala 124:37]
      node _T_105 = bits(_T_104, 0, 0) @[Cache.scala 124:71]
      node _T_106 = bits(_T_104, 1, 1) @[Cache.scala 124:71]
      node _T_107 = bits(_T_104, 2, 2) @[Cache.scala 124:71]
      node _T_108 = bits(_T_104, 3, 3) @[Cache.scala 124:71]
      write mport _T_109 = dataMem_1[idx_reg], clock
      when _T_105 :
        _T_109[0] <= _T_103[0]
        skip
      when _T_106 :
        _T_109[1] <= _T_103[1]
        skip
      when _T_107 :
        _T_109[2] <= _T_103[2]
        skip
      when _T_108 :
        _T_109[3] <= _T_103[3]
        skip
      node _T_110 = bits(wdata, 71, 64) @[Cache.scala 123:53]
      node _T_111 = bits(wdata, 79, 72) @[Cache.scala 123:53]
      node _T_112 = bits(wdata, 87, 80) @[Cache.scala 123:53]
      node _T_113 = bits(wdata, 95, 88) @[Cache.scala 123:53]
      wire _T_114 : UInt<8>[4] @[Cache.scala 123:42]
      _T_114[0] <= _T_110 @[Cache.scala 123:42]
      _T_114[1] <= _T_111 @[Cache.scala 123:42]
      _T_114[2] <= _T_112 @[Cache.scala 123:42]
      _T_114[3] <= _T_113 @[Cache.scala 123:42]
      node _T_115 = bits(wmask, 11, 8) @[Cache.scala 124:37]
      node _T_116 = bits(_T_115, 0, 0) @[Cache.scala 124:71]
      node _T_117 = bits(_T_115, 1, 1) @[Cache.scala 124:71]
      node _T_118 = bits(_T_115, 2, 2) @[Cache.scala 124:71]
      node _T_119 = bits(_T_115, 3, 3) @[Cache.scala 124:71]
      write mport _T_120 = dataMem_2[idx_reg], clock
      when _T_116 :
        _T_120[0] <= _T_114[0]
        skip
      when _T_117 :
        _T_120[1] <= _T_114[1]
        skip
      when _T_118 :
        _T_120[2] <= _T_114[2]
        skip
      when _T_119 :
        _T_120[3] <= _T_114[3]
        skip
      node _T_121 = bits(wdata, 103, 96) @[Cache.scala 123:53]
      node _T_122 = bits(wdata, 111, 104) @[Cache.scala 123:53]
      node _T_123 = bits(wdata, 119, 112) @[Cache.scala 123:53]
      node _T_124 = bits(wdata, 127, 120) @[Cache.scala 123:53]
      wire _T_125 : UInt<8>[4] @[Cache.scala 123:42]
      _T_125[0] <= _T_121 @[Cache.scala 123:42]
      _T_125[1] <= _T_122 @[Cache.scala 123:42]
      _T_125[2] <= _T_123 @[Cache.scala 123:42]
      _T_125[3] <= _T_124 @[Cache.scala 123:42]
      node _T_126 = bits(wmask, 15, 12) @[Cache.scala 124:37]
      node _T_127 = bits(_T_126, 0, 0) @[Cache.scala 124:71]
      node _T_128 = bits(_T_126, 1, 1) @[Cache.scala 124:71]
      node _T_129 = bits(_T_126, 2, 2) @[Cache.scala 124:71]
      node _T_130 = bits(_T_126, 3, 3) @[Cache.scala 124:71]
      write mport _T_131 = dataMem_3[idx_reg], clock
      when _T_127 :
        _T_131[0] <= _T_125[0]
        skip
      when _T_128 :
        _T_131[1] <= _T_125[1]
        skip
      when _T_129 :
        _T_131[2] <= _T_125[2]
        skip
      when _T_130 :
        _T_131[3] <= _T_125[3]
        skip
      skip @[Cache.scala 116:13]
    node _T_132 = cat(tag_reg, idx_reg) @[Cat.scala 30:58]
    node _T_133 = dshl(_T_132, UInt<3>("h04")) @[Cache.scala 130:33]
    wire _T_134 : {addr : UInt<32>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, region : UInt<4>, id : UInt<5>, user : UInt<1>} @[nasti.scala 178:18]
    _T_134 is invalid @[nasti.scala 178:18]
    _T_134.id <= UInt<1>("h00") @[nasti.scala 179:11]
    _T_134.addr <= _T_133 @[nasti.scala 180:13]
    _T_134.len <= UInt<1>("h01") @[nasti.scala 181:12]
    _T_134.size <= UInt<2>("h03") @[nasti.scala 182:13]
    _T_134.burst <= UInt<1>("h01") @[nasti.scala 183:14]
    _T_134.lock <= UInt<1>("h00") @[nasti.scala 184:13]
    _T_134.cache <= UInt<1>("h00") @[nasti.scala 185:14]
    node _T_135 = cat(UInt<1>("h00"), UInt<1>("h00")) @[Cat.scala 30:58]
    node _T_136 = cat(_T_135, UInt<1>("h00")) @[Cat.scala 30:58]
    _T_134.prot <= _T_136 @[nasti.scala 186:13]
    _T_134.qos <= UInt<1>("h00") @[nasti.scala 187:12]
    _T_134.region <= UInt<1>("h00") @[nasti.scala 188:15]
    _T_134.user <= UInt<1>("h00") @[nasti.scala 189:13]
    io.nasti.ar.bits.user <= _T_134.user @[Cache.scala 129:20]
    io.nasti.ar.bits.id <= _T_134.id @[Cache.scala 129:20]
    io.nasti.ar.bits.region <= _T_134.region @[Cache.scala 129:20]
    io.nasti.ar.bits.qos <= _T_134.qos @[Cache.scala 129:20]
    io.nasti.ar.bits.prot <= _T_134.prot @[Cache.scala 129:20]
    io.nasti.ar.bits.cache <= _T_134.cache @[Cache.scala 129:20]
    io.nasti.ar.bits.lock <= _T_134.lock @[Cache.scala 129:20]
    io.nasti.ar.bits.burst <= _T_134.burst @[Cache.scala 129:20]
    io.nasti.ar.bits.size <= _T_134.size @[Cache.scala 129:20]
    io.nasti.ar.bits.len <= _T_134.len @[Cache.scala 129:20]
    io.nasti.ar.bits.addr <= _T_134.addr @[Cache.scala 129:20]
    io.nasti.ar.valid <= UInt<1>("h00") @[Cache.scala 131:21]
    node _T_137 = eq(state, UInt<3>("h06")) @[Cache.scala 133:29]
    io.nasti.r.ready <= _T_137 @[Cache.scala 133:20]
    node _T_138 = and(io.nasti.r.ready, io.nasti.r.valid) @[Decoupled.scala 40:37]
    when _T_138 : @[Cache.scala 134:27]
      refill_buf[read_count] <= io.nasti.r.bits.data @[Cache.scala 134:52]
      skip @[Cache.scala 134:27]
    node _T_139 = cat(rmeta.tag, idx_reg) @[Cat.scala 30:58]
    node _T_140 = dshl(_T_139, UInt<3>("h04")) @[Cache.scala 138:35]
    wire _T_141 : {addr : UInt<32>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, region : UInt<4>, id : UInt<5>, user : UInt<1>} @[nasti.scala 158:18]
    _T_141 is invalid @[nasti.scala 158:18]
    _T_141.id <= UInt<1>("h00") @[nasti.scala 159:11]
    _T_141.addr <= _T_140 @[nasti.scala 160:13]
    _T_141.len <= UInt<1>("h01") @[nasti.scala 161:12]
    _T_141.size <= UInt<2>("h03") @[nasti.scala 162:13]
    _T_141.burst <= UInt<1>("h01") @[nasti.scala 163:14]
    _T_141.lock <= UInt<1>("h00") @[nasti.scala 164:13]
    _T_141.cache <= UInt<1>("h00") @[nasti.scala 165:14]
    node _T_142 = cat(UInt<1>("h00"), UInt<1>("h00")) @[Cat.scala 30:58]
    node _T_143 = cat(_T_142, UInt<1>("h00")) @[Cat.scala 30:58]
    _T_141.prot <= _T_143 @[nasti.scala 166:13]
    _T_141.qos <= UInt<1>("h00") @[nasti.scala 167:12]
    _T_141.region <= UInt<1>("h00") @[nasti.scala 168:15]
    _T_141.user <= UInt<1>("h00") @[nasti.scala 169:13]
    io.nasti.aw.bits.user <= _T_141.user @[Cache.scala 137:20]
    io.nasti.aw.bits.id <= _T_141.id @[Cache.scala 137:20]
    io.nasti.aw.bits.region <= _T_141.region @[Cache.scala 137:20]
    io.nasti.aw.bits.qos <= _T_141.qos @[Cache.scala 137:20]
    io.nasti.aw.bits.prot <= _T_141.prot @[Cache.scala 137:20]
    io.nasti.aw.bits.cache <= _T_141.cache @[Cache.scala 137:20]
    io.nasti.aw.bits.lock <= _T_141.lock @[Cache.scala 137:20]
    io.nasti.aw.bits.burst <= _T_141.burst @[Cache.scala 137:20]
    io.nasti.aw.bits.size <= _T_141.size @[Cache.scala 137:20]
    io.nasti.aw.bits.len <= _T_141.len @[Cache.scala 137:20]
    io.nasti.aw.bits.addr <= _T_141.addr @[Cache.scala 137:20]
    io.nasti.aw.valid <= UInt<1>("h00") @[Cache.scala 139:21]
    node _T_144 = bits(read, 63, 0) @[Cache.scala 142:42]
    node _T_145 = bits(read, 127, 64) @[Cache.scala 142:42]
    wire _T_146 : UInt<64>[2] @[Cache.scala 142:32]
    _T_146[0] <= _T_144 @[Cache.scala 142:32]
    _T_146[1] <= _T_145 @[Cache.scala 142:32]
    wire _T_147 : {data : UInt<64>, last : UInt<1>, id : UInt<5>, strb : UInt<8>, user : UInt<1>} @[nasti.scala 198:17]
    _T_147 is invalid @[nasti.scala 198:17]
    node _T_148 = mux(UInt<1>("h01"), UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    _T_147.strb <= _T_148 @[nasti.scala 199:12]
    _T_147.data <= _T_146[write_count] @[nasti.scala 200:12]
    _T_147.last <= write_wrap_out @[nasti.scala 201:12]
    _T_147.id <= UInt<1>("h00") @[nasti.scala 202:12]
    _T_147.user <= UInt<1>("h00") @[nasti.scala 203:12]
    io.nasti.w.bits.user <= _T_147.user @[Cache.scala 141:19]
    io.nasti.w.bits.strb <= _T_147.strb @[Cache.scala 141:19]
    io.nasti.w.bits.id <= _T_147.id @[Cache.scala 141:19]
    io.nasti.w.bits.last <= _T_147.last @[Cache.scala 141:19]
    io.nasti.w.bits.data <= _T_147.data @[Cache.scala 141:19]
    io.nasti.w.valid <= UInt<1>("h00") @[Cache.scala 144:20]
    io.nasti.b.ready <= UInt<1>("h00") @[Cache.scala 146:20]
    node _T_149 = dshr(v, idx_reg) @[Cache.scala 149:19]
    node _T_150 = bits(_T_149, 0, 0) @[Cache.scala 149:19]
    node _T_151 = dshr(d, idx_reg) @[Cache.scala 149:33]
    node _T_152 = bits(_T_151, 0, 0) @[Cache.scala 149:33]
    node is_dirty = and(_T_150, _T_152) @[Cache.scala 149:29]
    node _T_153 = eq(UInt<3>("h00"), state) @[Conditional.scala 37:30]
    when _T_153 : @[Conditional.scala 40:58]
      when io.cpu.req.valid : @[Cache.scala 152:30]
        node _T_154 = orr(io.cpu.req.bits.mask) @[Cache.scala 153:43]
        node _T_155 = mux(_T_154, UInt<3>("h02"), UInt<3>("h01")) @[Cache.scala 153:21]
        state <= _T_155 @[Cache.scala 153:15]
        skip @[Cache.scala 152:30]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_156 = eq(UInt<3>("h01"), state) @[Conditional.scala 37:30]
      when _T_156 : @[Conditional.scala 39:67]
        when hit : @[Cache.scala 157:17]
          when io.cpu.req.valid : @[Cache.scala 158:32]
            node _T_157 = orr(io.cpu.req.bits.mask) @[Cache.scala 159:45]
            node _T_158 = mux(_T_157, UInt<3>("h02"), UInt<3>("h01")) @[Cache.scala 159:23]
            state <= _T_158 @[Cache.scala 159:17]
            skip @[Cache.scala 158:32]
          else : @[Cache.scala 160:21]
            state <= UInt<3>("h00") @[Cache.scala 161:17]
            skip @[Cache.scala 160:21]
          skip @[Cache.scala 157:17]
        else : @[Cache.scala 163:19]
          io.nasti.aw.valid <= is_dirty @[Cache.scala 164:27]
          node _T_159 = eq(is_dirty, UInt<1>("h00")) @[Cache.scala 165:30]
          io.nasti.ar.valid <= _T_159 @[Cache.scala 165:27]
          node _T_160 = and(io.nasti.aw.ready, io.nasti.aw.valid) @[Decoupled.scala 40:37]
          when _T_160 : @[Cache.scala 166:34]
            state <= UInt<3>("h03") @[Cache.scala 167:17]
            skip @[Cache.scala 166:34]
          else : @[Cache.scala 168:40]
            node _T_161 = and(io.nasti.ar.ready, io.nasti.ar.valid) @[Decoupled.scala 40:37]
            when _T_161 : @[Cache.scala 168:40]
              state <= UInt<3>("h06") @[Cache.scala 169:17]
              skip @[Cache.scala 168:40]
          skip @[Cache.scala 163:19]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_162 = eq(UInt<3>("h02"), state) @[Conditional.scala 37:30]
        when _T_162 : @[Conditional.scala 39:67]
          node _T_163 = or(hit, is_alloc_reg) @[Cache.scala 174:16]
          node _T_164 = or(_T_163, io.cpu.abort) @[Cache.scala 174:32]
          when _T_164 : @[Cache.scala 174:49]
            state <= UInt<3>("h00") @[Cache.scala 175:15]
            skip @[Cache.scala 174:49]
          else : @[Cache.scala 176:19]
            io.nasti.aw.valid <= is_dirty @[Cache.scala 177:27]
            node _T_165 = eq(is_dirty, UInt<1>("h00")) @[Cache.scala 178:30]
            io.nasti.ar.valid <= _T_165 @[Cache.scala 178:27]
            node _T_166 = and(io.nasti.aw.ready, io.nasti.aw.valid) @[Decoupled.scala 40:37]
            when _T_166 : @[Cache.scala 179:34]
              state <= UInt<3>("h03") @[Cache.scala 180:17]
              skip @[Cache.scala 179:34]
            else : @[Cache.scala 181:40]
              node _T_167 = and(io.nasti.ar.ready, io.nasti.ar.valid) @[Decoupled.scala 40:37]
              when _T_167 : @[Cache.scala 181:40]
                state <= UInt<3>("h06") @[Cache.scala 182:17]
                skip @[Cache.scala 181:40]
            skip @[Cache.scala 176:19]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_168 = eq(UInt<3>("h03"), state) @[Conditional.scala 37:30]
          when _T_168 : @[Conditional.scala 39:67]
            io.nasti.w.valid <= UInt<1>("h01") @[Cache.scala 187:24]
            when write_wrap_out : @[Cache.scala 188:28]
              state <= UInt<3>("h04") @[Cache.scala 189:15]
              skip @[Cache.scala 188:28]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_169 = eq(UInt<3>("h04"), state) @[Conditional.scala 37:30]
            when _T_169 : @[Conditional.scala 39:67]
              io.nasti.b.ready <= UInt<1>("h01") @[Cache.scala 193:24]
              node _T_170 = and(io.nasti.b.ready, io.nasti.b.valid) @[Decoupled.scala 40:37]
              when _T_170 : @[Cache.scala 194:31]
                state <= UInt<3>("h05") @[Cache.scala 195:15]
                skip @[Cache.scala 194:31]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_171 = eq(UInt<3>("h05"), state) @[Conditional.scala 37:30]
              when _T_171 : @[Conditional.scala 39:67]
                io.nasti.ar.valid <= UInt<1>("h01") @[Cache.scala 199:25]
                node _T_172 = and(io.nasti.ar.ready, io.nasti.ar.valid) @[Decoupled.scala 40:37]
                when _T_172 : @[Cache.scala 200:32]
                  state <= UInt<3>("h06") @[Cache.scala 201:15]
                  skip @[Cache.scala 200:32]
                skip @[Conditional.scala 39:67]
              else : @[Conditional.scala 39:67]
                node _T_173 = eq(UInt<3>("h06"), state) @[Conditional.scala 37:30]
                when _T_173 : @[Conditional.scala 39:67]
                  when read_wrap_out : @[Cache.scala 205:27]
                    node _T_174 = orr(cpu_mask) @[Cache.scala 206:31]
                    node _T_175 = mux(_T_174, UInt<3>("h02"), UInt<3>("h00")) @[Cache.scala 206:21]
                    state <= _T_175 @[Cache.scala 206:15]
                    skip @[Cache.scala 205:27]
                  skip @[Conditional.scala 39:67]
    
  module Queue : 
    input clock : Clock
    input reset : Reset
    output io : {flip enq : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, region : UInt<4>, id : UInt<5>, user : UInt<1>}}, deq : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, region : UInt<4>, id : UInt<5>, user : UInt<1>}}, count : UInt<6>}
    
    cmem ram : {addr : UInt<32>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, region : UInt<4>, id : UInt<5>, user : UInt<1>}[32] @[Decoupled.scala 218:16]
    reg _T : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[Counter.scala 29:33]
    reg _T_1 : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[Counter.scala 29:33]
    reg maybe_full : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Decoupled.scala 221:27]
    node ptr_match = eq(_T, _T_1) @[Decoupled.scala 223:33]
    node _T_2 = eq(maybe_full, UInt<1>("h00")) @[Decoupled.scala 224:28]
    node empty = and(ptr_match, _T_2) @[Decoupled.scala 224:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 225:24]
    node _T_3 = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 40:37]
    wire do_enq : UInt<1>
    do_enq <= _T_3
    node _T_4 = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 40:37]
    wire do_deq : UInt<1>
    do_deq <= _T_4
    when do_enq : @[Decoupled.scala 229:17]
      infer mport _T_5 = ram[_T], clock @[Decoupled.scala 230:8]
      _T_5.user <= io.enq.bits.user @[Decoupled.scala 230:24]
      _T_5.id <= io.enq.bits.id @[Decoupled.scala 230:24]
      _T_5.region <= io.enq.bits.region @[Decoupled.scala 230:24]
      _T_5.qos <= io.enq.bits.qos @[Decoupled.scala 230:24]
      _T_5.prot <= io.enq.bits.prot @[Decoupled.scala 230:24]
      _T_5.cache <= io.enq.bits.cache @[Decoupled.scala 230:24]
      _T_5.lock <= io.enq.bits.lock @[Decoupled.scala 230:24]
      _T_5.burst <= io.enq.bits.burst @[Decoupled.scala 230:24]
      _T_5.size <= io.enq.bits.size @[Decoupled.scala 230:24]
      _T_5.len <= io.enq.bits.len @[Decoupled.scala 230:24]
      _T_5.addr <= io.enq.bits.addr @[Decoupled.scala 230:24]
      node _T_6 = eq(_T, UInt<5>("h01f")) @[Counter.scala 38:24]
      node _T_7 = add(_T, UInt<1>("h01")) @[Counter.scala 39:22]
      node _T_8 = tail(_T_7, 1) @[Counter.scala 39:22]
      _T <= _T_8 @[Counter.scala 39:13]
      skip @[Decoupled.scala 229:17]
    when do_deq : @[Decoupled.scala 233:17]
      node _T_9 = eq(_T_1, UInt<5>("h01f")) @[Counter.scala 38:24]
      node _T_10 = add(_T_1, UInt<1>("h01")) @[Counter.scala 39:22]
      node _T_11 = tail(_T_10, 1) @[Counter.scala 39:22]
      _T_1 <= _T_11 @[Counter.scala 39:13]
      skip @[Decoupled.scala 233:17]
    node _T_12 = neq(do_enq, do_deq) @[Decoupled.scala 236:16]
    when _T_12 : @[Decoupled.scala 236:28]
      maybe_full <= do_enq @[Decoupled.scala 237:16]
      skip @[Decoupled.scala 236:28]
    node _T_13 = eq(empty, UInt<1>("h00")) @[Decoupled.scala 240:19]
    io.deq.valid <= _T_13 @[Decoupled.scala 240:16]
    node _T_14 = eq(full, UInt<1>("h00")) @[Decoupled.scala 241:19]
    io.enq.ready <= _T_14 @[Decoupled.scala 241:16]
    infer mport _T_15 = ram[_T_1], clock @[Decoupled.scala 242:21]
    io.deq.bits.user <= _T_15.user @[Decoupled.scala 242:15]
    io.deq.bits.id <= _T_15.id @[Decoupled.scala 242:15]
    io.deq.bits.region <= _T_15.region @[Decoupled.scala 242:15]
    io.deq.bits.qos <= _T_15.qos @[Decoupled.scala 242:15]
    io.deq.bits.prot <= _T_15.prot @[Decoupled.scala 242:15]
    io.deq.bits.cache <= _T_15.cache @[Decoupled.scala 242:15]
    io.deq.bits.lock <= _T_15.lock @[Decoupled.scala 242:15]
    io.deq.bits.burst <= _T_15.burst @[Decoupled.scala 242:15]
    io.deq.bits.size <= _T_15.size @[Decoupled.scala 242:15]
    io.deq.bits.len <= _T_15.len @[Decoupled.scala 242:15]
    io.deq.bits.addr <= _T_15.addr @[Decoupled.scala 242:15]
    node _T_16 = sub(_T, _T_1) @[Decoupled.scala 257:32]
    node ptr_diff = tail(_T_16, 1) @[Decoupled.scala 257:32]
    node _T_17 = and(maybe_full, ptr_match) @[Decoupled.scala 259:32]
    node _T_18 = mux(_T_17, UInt<6>("h020"), UInt<1>("h00")) @[Decoupled.scala 259:20]
    node _T_19 = or(_T_18, ptr_diff) @[Decoupled.scala 259:62]
    io.count <= _T_19 @[Decoupled.scala 259:14]
    
  module Queue_1 : 
    input clock : Clock
    input reset : Reset
    output io : {flip enq : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, region : UInt<4>, id : UInt<5>, user : UInt<1>}}, deq : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, region : UInt<4>, id : UInt<5>, user : UInt<1>}}, count : UInt<6>}
    
    cmem ram : {addr : UInt<32>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, region : UInt<4>, id : UInt<5>, user : UInt<1>}[32] @[Decoupled.scala 218:16]
    reg _T : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[Counter.scala 29:33]
    reg _T_1 : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[Counter.scala 29:33]
    reg maybe_full : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Decoupled.scala 221:27]
    node ptr_match = eq(_T, _T_1) @[Decoupled.scala 223:33]
    node _T_2 = eq(maybe_full, UInt<1>("h00")) @[Decoupled.scala 224:28]
    node empty = and(ptr_match, _T_2) @[Decoupled.scala 224:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 225:24]
    node _T_3 = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 40:37]
    wire do_enq : UInt<1>
    do_enq <= _T_3
    node _T_4 = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 40:37]
    wire do_deq : UInt<1>
    do_deq <= _T_4
    when do_enq : @[Decoupled.scala 229:17]
      infer mport _T_5 = ram[_T], clock @[Decoupled.scala 230:8]
      _T_5.user <= io.enq.bits.user @[Decoupled.scala 230:24]
      _T_5.id <= io.enq.bits.id @[Decoupled.scala 230:24]
      _T_5.region <= io.enq.bits.region @[Decoupled.scala 230:24]
      _T_5.qos <= io.enq.bits.qos @[Decoupled.scala 230:24]
      _T_5.prot <= io.enq.bits.prot @[Decoupled.scala 230:24]
      _T_5.cache <= io.enq.bits.cache @[Decoupled.scala 230:24]
      _T_5.lock <= io.enq.bits.lock @[Decoupled.scala 230:24]
      _T_5.burst <= io.enq.bits.burst @[Decoupled.scala 230:24]
      _T_5.size <= io.enq.bits.size @[Decoupled.scala 230:24]
      _T_5.len <= io.enq.bits.len @[Decoupled.scala 230:24]
      _T_5.addr <= io.enq.bits.addr @[Decoupled.scala 230:24]
      node _T_6 = eq(_T, UInt<5>("h01f")) @[Counter.scala 38:24]
      node _T_7 = add(_T, UInt<1>("h01")) @[Counter.scala 39:22]
      node _T_8 = tail(_T_7, 1) @[Counter.scala 39:22]
      _T <= _T_8 @[Counter.scala 39:13]
      skip @[Decoupled.scala 229:17]
    when do_deq : @[Decoupled.scala 233:17]
      node _T_9 = eq(_T_1, UInt<5>("h01f")) @[Counter.scala 38:24]
      node _T_10 = add(_T_1, UInt<1>("h01")) @[Counter.scala 39:22]
      node _T_11 = tail(_T_10, 1) @[Counter.scala 39:22]
      _T_1 <= _T_11 @[Counter.scala 39:13]
      skip @[Decoupled.scala 233:17]
    node _T_12 = neq(do_enq, do_deq) @[Decoupled.scala 236:16]
    when _T_12 : @[Decoupled.scala 236:28]
      maybe_full <= do_enq @[Decoupled.scala 237:16]
      skip @[Decoupled.scala 236:28]
    node _T_13 = eq(empty, UInt<1>("h00")) @[Decoupled.scala 240:19]
    io.deq.valid <= _T_13 @[Decoupled.scala 240:16]
    node _T_14 = eq(full, UInt<1>("h00")) @[Decoupled.scala 241:19]
    io.enq.ready <= _T_14 @[Decoupled.scala 241:16]
    infer mport _T_15 = ram[_T_1], clock @[Decoupled.scala 242:21]
    io.deq.bits.user <= _T_15.user @[Decoupled.scala 242:15]
    io.deq.bits.id <= _T_15.id @[Decoupled.scala 242:15]
    io.deq.bits.region <= _T_15.region @[Decoupled.scala 242:15]
    io.deq.bits.qos <= _T_15.qos @[Decoupled.scala 242:15]
    io.deq.bits.prot <= _T_15.prot @[Decoupled.scala 242:15]
    io.deq.bits.cache <= _T_15.cache @[Decoupled.scala 242:15]
    io.deq.bits.lock <= _T_15.lock @[Decoupled.scala 242:15]
    io.deq.bits.burst <= _T_15.burst @[Decoupled.scala 242:15]
    io.deq.bits.size <= _T_15.size @[Decoupled.scala 242:15]
    io.deq.bits.len <= _T_15.len @[Decoupled.scala 242:15]
    io.deq.bits.addr <= _T_15.addr @[Decoupled.scala 242:15]
    node _T_16 = sub(_T, _T_1) @[Decoupled.scala 257:32]
    node ptr_diff = tail(_T_16, 1) @[Decoupled.scala 257:32]
    node _T_17 = and(maybe_full, ptr_match) @[Decoupled.scala 259:32]
    node _T_18 = mux(_T_17, UInt<6>("h020"), UInt<1>("h00")) @[Decoupled.scala 259:20]
    node _T_19 = or(_T_18, ptr_diff) @[Decoupled.scala 259:62]
    io.count <= _T_19 @[Decoupled.scala 259:14]
    
  module Queue_2 : 
    input clock : Clock
    input reset : Reset
    output io : {flip enq : {flip ready : UInt<1>, valid : UInt<1>, bits : {data : UInt<64>, last : UInt<1>, id : UInt<5>, strb : UInt<8>, user : UInt<1>}}, deq : {flip ready : UInt<1>, valid : UInt<1>, bits : {data : UInt<64>, last : UInt<1>, id : UInt<5>, strb : UInt<8>, user : UInt<1>}}, count : UInt<6>}
    
    cmem ram : {data : UInt<64>, last : UInt<1>, id : UInt<5>, strb : UInt<8>, user : UInt<1>}[32] @[Decoupled.scala 218:16]
    reg _T : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[Counter.scala 29:33]
    reg _T_1 : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[Counter.scala 29:33]
    reg maybe_full : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Decoupled.scala 221:27]
    node ptr_match = eq(_T, _T_1) @[Decoupled.scala 223:33]
    node _T_2 = eq(maybe_full, UInt<1>("h00")) @[Decoupled.scala 224:28]
    node empty = and(ptr_match, _T_2) @[Decoupled.scala 224:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 225:24]
    node _T_3 = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 40:37]
    wire do_enq : UInt<1>
    do_enq <= _T_3
    node _T_4 = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 40:37]
    wire do_deq : UInt<1>
    do_deq <= _T_4
    when do_enq : @[Decoupled.scala 229:17]
      infer mport _T_5 = ram[_T], clock @[Decoupled.scala 230:8]
      _T_5.user <= io.enq.bits.user @[Decoupled.scala 230:24]
      _T_5.strb <= io.enq.bits.strb @[Decoupled.scala 230:24]
      _T_5.id <= io.enq.bits.id @[Decoupled.scala 230:24]
      _T_5.last <= io.enq.bits.last @[Decoupled.scala 230:24]
      _T_5.data <= io.enq.bits.data @[Decoupled.scala 230:24]
      node _T_6 = eq(_T, UInt<5>("h01f")) @[Counter.scala 38:24]
      node _T_7 = add(_T, UInt<1>("h01")) @[Counter.scala 39:22]
      node _T_8 = tail(_T_7, 1) @[Counter.scala 39:22]
      _T <= _T_8 @[Counter.scala 39:13]
      skip @[Decoupled.scala 229:17]
    when do_deq : @[Decoupled.scala 233:17]
      node _T_9 = eq(_T_1, UInt<5>("h01f")) @[Counter.scala 38:24]
      node _T_10 = add(_T_1, UInt<1>("h01")) @[Counter.scala 39:22]
      node _T_11 = tail(_T_10, 1) @[Counter.scala 39:22]
      _T_1 <= _T_11 @[Counter.scala 39:13]
      skip @[Decoupled.scala 233:17]
    node _T_12 = neq(do_enq, do_deq) @[Decoupled.scala 236:16]
    when _T_12 : @[Decoupled.scala 236:28]
      maybe_full <= do_enq @[Decoupled.scala 237:16]
      skip @[Decoupled.scala 236:28]
    node _T_13 = eq(empty, UInt<1>("h00")) @[Decoupled.scala 240:19]
    io.deq.valid <= _T_13 @[Decoupled.scala 240:16]
    node _T_14 = eq(full, UInt<1>("h00")) @[Decoupled.scala 241:19]
    io.enq.ready <= _T_14 @[Decoupled.scala 241:16]
    infer mport _T_15 = ram[_T_1], clock @[Decoupled.scala 242:21]
    io.deq.bits.user <= _T_15.user @[Decoupled.scala 242:15]
    io.deq.bits.strb <= _T_15.strb @[Decoupled.scala 242:15]
    io.deq.bits.id <= _T_15.id @[Decoupled.scala 242:15]
    io.deq.bits.last <= _T_15.last @[Decoupled.scala 242:15]
    io.deq.bits.data <= _T_15.data @[Decoupled.scala 242:15]
    node _T_16 = sub(_T, _T_1) @[Decoupled.scala 257:32]
    node ptr_diff = tail(_T_16, 1) @[Decoupled.scala 257:32]
    node _T_17 = and(maybe_full, ptr_match) @[Decoupled.scala 259:32]
    node _T_18 = mux(_T_17, UInt<6>("h020"), UInt<1>("h00")) @[Decoupled.scala 259:20]
    node _T_19 = or(_T_18, ptr_diff) @[Decoupled.scala 259:62]
    io.count <= _T_19 @[Decoupled.scala 259:14]
    
  module Queue_3 : 
    input clock : Clock
    input reset : Reset
    output io : {flip enq : {flip ready : UInt<1>, valid : UInt<1>, bits : {resp : UInt<2>, id : UInt<5>, user : UInt<1>}}, deq : {flip ready : UInt<1>, valid : UInt<1>, bits : {resp : UInt<2>, id : UInt<5>, user : UInt<1>}}, count : UInt<6>}
    
    cmem ram : {resp : UInt<2>, id : UInt<5>, user : UInt<1>}[32] @[Decoupled.scala 218:16]
    reg _T : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[Counter.scala 29:33]
    reg _T_1 : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[Counter.scala 29:33]
    reg maybe_full : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Decoupled.scala 221:27]
    node ptr_match = eq(_T, _T_1) @[Decoupled.scala 223:33]
    node _T_2 = eq(maybe_full, UInt<1>("h00")) @[Decoupled.scala 224:28]
    node empty = and(ptr_match, _T_2) @[Decoupled.scala 224:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 225:24]
    node _T_3 = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 40:37]
    wire do_enq : UInt<1>
    do_enq <= _T_3
    node _T_4 = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 40:37]
    wire do_deq : UInt<1>
    do_deq <= _T_4
    when do_enq : @[Decoupled.scala 229:17]
      infer mport _T_5 = ram[_T], clock @[Decoupled.scala 230:8]
      _T_5.user <= io.enq.bits.user @[Decoupled.scala 230:24]
      _T_5.id <= io.enq.bits.id @[Decoupled.scala 230:24]
      _T_5.resp <= io.enq.bits.resp @[Decoupled.scala 230:24]
      node _T_6 = eq(_T, UInt<5>("h01f")) @[Counter.scala 38:24]
      node _T_7 = add(_T, UInt<1>("h01")) @[Counter.scala 39:22]
      node _T_8 = tail(_T_7, 1) @[Counter.scala 39:22]
      _T <= _T_8 @[Counter.scala 39:13]
      skip @[Decoupled.scala 229:17]
    when do_deq : @[Decoupled.scala 233:17]
      node _T_9 = eq(_T_1, UInt<5>("h01f")) @[Counter.scala 38:24]
      node _T_10 = add(_T_1, UInt<1>("h01")) @[Counter.scala 39:22]
      node _T_11 = tail(_T_10, 1) @[Counter.scala 39:22]
      _T_1 <= _T_11 @[Counter.scala 39:13]
      skip @[Decoupled.scala 233:17]
    node _T_12 = neq(do_enq, do_deq) @[Decoupled.scala 236:16]
    when _T_12 : @[Decoupled.scala 236:28]
      maybe_full <= do_enq @[Decoupled.scala 237:16]
      skip @[Decoupled.scala 236:28]
    node _T_13 = eq(empty, UInt<1>("h00")) @[Decoupled.scala 240:19]
    io.deq.valid <= _T_13 @[Decoupled.scala 240:16]
    node _T_14 = eq(full, UInt<1>("h00")) @[Decoupled.scala 241:19]
    io.enq.ready <= _T_14 @[Decoupled.scala 241:16]
    infer mport _T_15 = ram[_T_1], clock @[Decoupled.scala 242:21]
    io.deq.bits.user <= _T_15.user @[Decoupled.scala 242:15]
    io.deq.bits.id <= _T_15.id @[Decoupled.scala 242:15]
    io.deq.bits.resp <= _T_15.resp @[Decoupled.scala 242:15]
    node _T_16 = sub(_T, _T_1) @[Decoupled.scala 257:32]
    node ptr_diff = tail(_T_16, 1) @[Decoupled.scala 257:32]
    node _T_17 = and(maybe_full, ptr_match) @[Decoupled.scala 259:32]
    node _T_18 = mux(_T_17, UInt<6>("h020"), UInt<1>("h00")) @[Decoupled.scala 259:20]
    node _T_19 = or(_T_18, ptr_diff) @[Decoupled.scala 259:62]
    io.count <= _T_19 @[Decoupled.scala 259:14]
    
  module Queue_4 : 
    input clock : Clock
    input reset : Reset
    output io : {flip enq : {flip ready : UInt<1>, valid : UInt<1>, bits : {resp : UInt<2>, data : UInt<64>, last : UInt<1>, id : UInt<5>, user : UInt<1>}}, deq : {flip ready : UInt<1>, valid : UInt<1>, bits : {resp : UInt<2>, data : UInt<64>, last : UInt<1>, id : UInt<5>, user : UInt<1>}}, count : UInt<6>}
    
    cmem ram : {resp : UInt<2>, data : UInt<64>, last : UInt<1>, id : UInt<5>, user : UInt<1>}[32] @[Decoupled.scala 218:16]
    reg _T : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[Counter.scala 29:33]
    reg _T_1 : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[Counter.scala 29:33]
    reg maybe_full : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Decoupled.scala 221:27]
    node ptr_match = eq(_T, _T_1) @[Decoupled.scala 223:33]
    node _T_2 = eq(maybe_full, UInt<1>("h00")) @[Decoupled.scala 224:28]
    node empty = and(ptr_match, _T_2) @[Decoupled.scala 224:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 225:24]
    node _T_3 = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 40:37]
    wire do_enq : UInt<1>
    do_enq <= _T_3
    node _T_4 = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 40:37]
    wire do_deq : UInt<1>
    do_deq <= _T_4
    when do_enq : @[Decoupled.scala 229:17]
      infer mport _T_5 = ram[_T], clock @[Decoupled.scala 230:8]
      _T_5.user <= io.enq.bits.user @[Decoupled.scala 230:24]
      _T_5.id <= io.enq.bits.id @[Decoupled.scala 230:24]
      _T_5.last <= io.enq.bits.last @[Decoupled.scala 230:24]
      _T_5.data <= io.enq.bits.data @[Decoupled.scala 230:24]
      _T_5.resp <= io.enq.bits.resp @[Decoupled.scala 230:24]
      node _T_6 = eq(_T, UInt<5>("h01f")) @[Counter.scala 38:24]
      node _T_7 = add(_T, UInt<1>("h01")) @[Counter.scala 39:22]
      node _T_8 = tail(_T_7, 1) @[Counter.scala 39:22]
      _T <= _T_8 @[Counter.scala 39:13]
      skip @[Decoupled.scala 229:17]
    when do_deq : @[Decoupled.scala 233:17]
      node _T_9 = eq(_T_1, UInt<5>("h01f")) @[Counter.scala 38:24]
      node _T_10 = add(_T_1, UInt<1>("h01")) @[Counter.scala 39:22]
      node _T_11 = tail(_T_10, 1) @[Counter.scala 39:22]
      _T_1 <= _T_11 @[Counter.scala 39:13]
      skip @[Decoupled.scala 233:17]
    node _T_12 = neq(do_enq, do_deq) @[Decoupled.scala 236:16]
    when _T_12 : @[Decoupled.scala 236:28]
      maybe_full <= do_enq @[Decoupled.scala 237:16]
      skip @[Decoupled.scala 236:28]
    node _T_13 = eq(empty, UInt<1>("h00")) @[Decoupled.scala 240:19]
    io.deq.valid <= _T_13 @[Decoupled.scala 240:16]
    node _T_14 = eq(full, UInt<1>("h00")) @[Decoupled.scala 241:19]
    io.enq.ready <= _T_14 @[Decoupled.scala 241:16]
    infer mport _T_15 = ram[_T_1], clock @[Decoupled.scala 242:21]
    io.deq.bits.user <= _T_15.user @[Decoupled.scala 242:15]
    io.deq.bits.id <= _T_15.id @[Decoupled.scala 242:15]
    io.deq.bits.last <= _T_15.last @[Decoupled.scala 242:15]
    io.deq.bits.data <= _T_15.data @[Decoupled.scala 242:15]
    io.deq.bits.resp <= _T_15.resp @[Decoupled.scala 242:15]
    node _T_16 = sub(_T, _T_1) @[Decoupled.scala 257:32]
    node ptr_diff = tail(_T_16, 1) @[Decoupled.scala 257:32]
    node _T_17 = and(maybe_full, ptr_match) @[Decoupled.scala 259:32]
    node _T_18 = mux(_T_17, UInt<6>("h020"), UInt<1>("h00")) @[Decoupled.scala 259:20]
    node _T_19 = or(_T_18, ptr_diff) @[Decoupled.scala 259:62]
    io.count <= _T_19 @[Decoupled.scala 259:14]
    
  module GoldCache : 
    input clock : Clock
    input reset : Reset
    output io : {flip req : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, data : UInt<32>, mask : UInt<4>}}, resp : {flip ready : UInt<1>, valid : UInt<1>, bits : {data : UInt<32>}}, nasti : {aw : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, region : UInt<4>, id : UInt<5>, user : UInt<1>}}, w : {flip ready : UInt<1>, valid : UInt<1>, bits : {data : UInt<64>, last : UInt<1>, id : UInt<5>, strb : UInt<8>, user : UInt<1>}}, flip b : {flip ready : UInt<1>, valid : UInt<1>, bits : {resp : UInt<2>, id : UInt<5>, user : UInt<1>}}, ar : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, region : UInt<4>, id : UInt<5>, user : UInt<1>}}, flip r : {flip ready : UInt<1>, valid : UInt<1>, bits : {resp : UInt<2>, data : UInt<64>, last : UInt<1>, id : UInt<5>, user : UInt<1>}}}}
    
    cmem dataMemory : UInt<128>[256] @[CacheTests.scala 23:23]
    cmem tags : UInt<20>[256] @[CacheTests.scala 24:17]
    cmem v : UInt<1>[256] @[CacheTests.scala 25:17]
    cmem d : UInt<1>[256] @[CacheTests.scala 26:17]
    node tag = dshr(io.req.bits.addr, UInt<4>("h0c")) @[CacheTests.scala 29:23]
    node idx = bits(io.req.bits.addr, 11, 4) @[CacheTests.scala 30:21]
    node off = bits(io.req.bits.addr, 3, 0) @[CacheTests.scala 31:21]
    infer mport readData = dataMemory[idx], clock @[CacheTests.scala 33:29]
    node _T = div(off, UInt<3>("h04")) @[CacheTests.scala 36:33]
    node _T_1 = eq(_T, UInt<1>("h00")) @[CacheTests.scala 36:40]
    node _T_2 = dshr(io.req.bits.mask, UInt<1>("h00")) @[CacheTests.scala 36:68]
    node _T_3 = bits(_T_2, 0, 0) @[CacheTests.scala 36:84]
    node _T_4 = and(_T_1, _T_3) @[CacheTests.scala 36:55]
    node _T_5 = dshr(io.req.bits.data, UInt<1>("h00")) @[CacheTests.scala 37:39]
    node _T_6 = and(_T_5, UInt<8>("h0ff")) @[CacheTests.scala 37:70]
    node _T_7 = dshl(_T_6, UInt<1>("h00")) @[CacheTests.scala 37:88]
    node _T_8 = and(readData, UInt<8>("h0ff")) @[CacheTests.scala 38:35]
    node _T_9 = mux(_T_4, _T_7, _T_8) @[CacheTests.scala 39:10]
    node _T_10 = or(UInt<1>("h00"), _T_9) @[CacheTests.scala 35:11]
    node _T_11 = div(off, UInt<3>("h04")) @[CacheTests.scala 36:33]
    node _T_12 = eq(_T_11, UInt<1>("h00")) @[CacheTests.scala 36:40]
    node _T_13 = dshr(io.req.bits.mask, UInt<1>("h01")) @[CacheTests.scala 36:68]
    node _T_14 = bits(_T_13, 0, 0) @[CacheTests.scala 36:84]
    node _T_15 = and(_T_12, _T_14) @[CacheTests.scala 36:55]
    node _T_16 = dshr(io.req.bits.data, UInt<4>("h08")) @[CacheTests.scala 37:39]
    node _T_17 = and(_T_16, UInt<8>("h0ff")) @[CacheTests.scala 37:70]
    node _T_18 = dshl(_T_17, UInt<4>("h08")) @[CacheTests.scala 37:88]
    node _T_19 = and(readData, UInt<16>("h0ff00")) @[CacheTests.scala 38:35]
    node _T_20 = mux(_T_15, _T_18, _T_19) @[CacheTests.scala 39:10]
    node _T_21 = or(_T_10, _T_20) @[CacheTests.scala 35:11]
    node _T_22 = div(off, UInt<3>("h04")) @[CacheTests.scala 36:33]
    node _T_23 = eq(_T_22, UInt<1>("h00")) @[CacheTests.scala 36:40]
    node _T_24 = dshr(io.req.bits.mask, UInt<2>("h02")) @[CacheTests.scala 36:68]
    node _T_25 = bits(_T_24, 0, 0) @[CacheTests.scala 36:84]
    node _T_26 = and(_T_23, _T_25) @[CacheTests.scala 36:55]
    node _T_27 = dshr(io.req.bits.data, UInt<5>("h010")) @[CacheTests.scala 37:39]
    node _T_28 = and(_T_27, UInt<8>("h0ff")) @[CacheTests.scala 37:70]
    node _T_29 = dshl(_T_28, UInt<5>("h010")) @[CacheTests.scala 37:88]
    node _T_30 = and(readData, UInt<24>("h0ff0000")) @[CacheTests.scala 38:35]
    node _T_31 = mux(_T_26, _T_29, _T_30) @[CacheTests.scala 39:10]
    node _T_32 = or(_T_21, _T_31) @[CacheTests.scala 35:11]
    node _T_33 = div(off, UInt<3>("h04")) @[CacheTests.scala 36:33]
    node _T_34 = eq(_T_33, UInt<1>("h00")) @[CacheTests.scala 36:40]
    node _T_35 = dshr(io.req.bits.mask, UInt<2>("h03")) @[CacheTests.scala 36:68]
    node _T_36 = bits(_T_35, 0, 0) @[CacheTests.scala 36:84]
    node _T_37 = and(_T_34, _T_36) @[CacheTests.scala 36:55]
    node _T_38 = dshr(io.req.bits.data, UInt<5>("h018")) @[CacheTests.scala 37:39]
    node _T_39 = and(_T_38, UInt<8>("h0ff")) @[CacheTests.scala 37:70]
    node _T_40 = dshl(_T_39, UInt<5>("h018")) @[CacheTests.scala 37:88]
    node _T_41 = and(readData, UInt<32>("h0ff000000")) @[CacheTests.scala 38:35]
    node _T_42 = mux(_T_37, _T_40, _T_41) @[CacheTests.scala 39:10]
    node _T_43 = or(_T_32, _T_42) @[CacheTests.scala 35:11]
    node _T_44 = div(off, UInt<3>("h04")) @[CacheTests.scala 36:33]
    node _T_45 = eq(_T_44, UInt<1>("h01")) @[CacheTests.scala 36:40]
    node _T_46 = dshr(io.req.bits.mask, UInt<1>("h00")) @[CacheTests.scala 36:68]
    node _T_47 = bits(_T_46, 0, 0) @[CacheTests.scala 36:84]
    node _T_48 = and(_T_45, _T_47) @[CacheTests.scala 36:55]
    node _T_49 = dshr(io.req.bits.data, UInt<1>("h00")) @[CacheTests.scala 37:39]
    node _T_50 = and(_T_49, UInt<8>("h0ff")) @[CacheTests.scala 37:70]
    node _T_51 = dshl(_T_50, UInt<6>("h020")) @[CacheTests.scala 37:88]
    node _T_52 = and(readData, UInt<40>("h0ff00000000")) @[CacheTests.scala 38:35]
    node _T_53 = mux(_T_48, _T_51, _T_52) @[CacheTests.scala 39:10]
    node _T_54 = or(_T_43, _T_53) @[CacheTests.scala 35:11]
    node _T_55 = div(off, UInt<3>("h04")) @[CacheTests.scala 36:33]
    node _T_56 = eq(_T_55, UInt<1>("h01")) @[CacheTests.scala 36:40]
    node _T_57 = dshr(io.req.bits.mask, UInt<1>("h01")) @[CacheTests.scala 36:68]
    node _T_58 = bits(_T_57, 0, 0) @[CacheTests.scala 36:84]
    node _T_59 = and(_T_56, _T_58) @[CacheTests.scala 36:55]
    node _T_60 = dshr(io.req.bits.data, UInt<4>("h08")) @[CacheTests.scala 37:39]
    node _T_61 = and(_T_60, UInt<8>("h0ff")) @[CacheTests.scala 37:70]
    node _T_62 = dshl(_T_61, UInt<6>("h028")) @[CacheTests.scala 37:88]
    node _T_63 = and(readData, UInt<48>("h0ff0000000000")) @[CacheTests.scala 38:35]
    node _T_64 = mux(_T_59, _T_62, _T_63) @[CacheTests.scala 39:10]
    node _T_65 = or(_T_54, _T_64) @[CacheTests.scala 35:11]
    node _T_66 = div(off, UInt<3>("h04")) @[CacheTests.scala 36:33]
    node _T_67 = eq(_T_66, UInt<1>("h01")) @[CacheTests.scala 36:40]
    node _T_68 = dshr(io.req.bits.mask, UInt<2>("h02")) @[CacheTests.scala 36:68]
    node _T_69 = bits(_T_68, 0, 0) @[CacheTests.scala 36:84]
    node _T_70 = and(_T_67, _T_69) @[CacheTests.scala 36:55]
    node _T_71 = dshr(io.req.bits.data, UInt<5>("h010")) @[CacheTests.scala 37:39]
    node _T_72 = and(_T_71, UInt<8>("h0ff")) @[CacheTests.scala 37:70]
    node _T_73 = dshl(_T_72, UInt<6>("h030")) @[CacheTests.scala 37:88]
    node _T_74 = and(readData, UInt<56>("h0ff000000000000")) @[CacheTests.scala 38:35]
    node _T_75 = mux(_T_70, _T_73, _T_74) @[CacheTests.scala 39:10]
    node _T_76 = or(_T_65, _T_75) @[CacheTests.scala 35:11]
    node _T_77 = div(off, UInt<3>("h04")) @[CacheTests.scala 36:33]
    node _T_78 = eq(_T_77, UInt<1>("h01")) @[CacheTests.scala 36:40]
    node _T_79 = dshr(io.req.bits.mask, UInt<2>("h03")) @[CacheTests.scala 36:68]
    node _T_80 = bits(_T_79, 0, 0) @[CacheTests.scala 36:84]
    node _T_81 = and(_T_78, _T_80) @[CacheTests.scala 36:55]
    node _T_82 = dshr(io.req.bits.data, UInt<5>("h018")) @[CacheTests.scala 37:39]
    node _T_83 = and(_T_82, UInt<8>("h0ff")) @[CacheTests.scala 37:70]
    node _T_84 = dshl(_T_83, UInt<6>("h038")) @[CacheTests.scala 37:88]
    node _T_85 = and(readData, UInt<64>("h0ff00000000000000")) @[CacheTests.scala 38:35]
    node _T_86 = mux(_T_81, _T_84, _T_85) @[CacheTests.scala 39:10]
    node _T_87 = or(_T_76, _T_86) @[CacheTests.scala 35:11]
    node _T_88 = div(off, UInt<3>("h04")) @[CacheTests.scala 36:33]
    node _T_89 = eq(_T_88, UInt<2>("h02")) @[CacheTests.scala 36:40]
    node _T_90 = dshr(io.req.bits.mask, UInt<1>("h00")) @[CacheTests.scala 36:68]
    node _T_91 = bits(_T_90, 0, 0) @[CacheTests.scala 36:84]
    node _T_92 = and(_T_89, _T_91) @[CacheTests.scala 36:55]
    node _T_93 = dshr(io.req.bits.data, UInt<1>("h00")) @[CacheTests.scala 37:39]
    node _T_94 = and(_T_93, UInt<8>("h0ff")) @[CacheTests.scala 37:70]
    node _T_95 = dshl(_T_94, UInt<7>("h040")) @[CacheTests.scala 37:88]
    node _T_96 = and(readData, UInt<72>("h0ff0000000000000000")) @[CacheTests.scala 38:35]
    node _T_97 = mux(_T_92, _T_95, _T_96) @[CacheTests.scala 39:10]
    node _T_98 = or(_T_87, _T_97) @[CacheTests.scala 35:11]
    node _T_99 = div(off, UInt<3>("h04")) @[CacheTests.scala 36:33]
    node _T_100 = eq(_T_99, UInt<2>("h02")) @[CacheTests.scala 36:40]
    node _T_101 = dshr(io.req.bits.mask, UInt<1>("h01")) @[CacheTests.scala 36:68]
    node _T_102 = bits(_T_101, 0, 0) @[CacheTests.scala 36:84]
    node _T_103 = and(_T_100, _T_102) @[CacheTests.scala 36:55]
    node _T_104 = dshr(io.req.bits.data, UInt<4>("h08")) @[CacheTests.scala 37:39]
    node _T_105 = and(_T_104, UInt<8>("h0ff")) @[CacheTests.scala 37:70]
    node _T_106 = dshl(_T_105, UInt<7>("h048")) @[CacheTests.scala 37:88]
    node _T_107 = and(readData, UInt<80>("h0ff000000000000000000")) @[CacheTests.scala 38:35]
    node _T_108 = mux(_T_103, _T_106, _T_107) @[CacheTests.scala 39:10]
    node _T_109 = or(_T_98, _T_108) @[CacheTests.scala 35:11]
    node _T_110 = div(off, UInt<3>("h04")) @[CacheTests.scala 36:33]
    node _T_111 = eq(_T_110, UInt<2>("h02")) @[CacheTests.scala 36:40]
    node _T_112 = dshr(io.req.bits.mask, UInt<2>("h02")) @[CacheTests.scala 36:68]
    node _T_113 = bits(_T_112, 0, 0) @[CacheTests.scala 36:84]
    node _T_114 = and(_T_111, _T_113) @[CacheTests.scala 36:55]
    node _T_115 = dshr(io.req.bits.data, UInt<5>("h010")) @[CacheTests.scala 37:39]
    node _T_116 = and(_T_115, UInt<8>("h0ff")) @[CacheTests.scala 37:70]
    node _T_117 = dshl(_T_116, UInt<7>("h050")) @[CacheTests.scala 37:88]
    node _T_118 = and(readData, UInt<88>("h0ff00000000000000000000")) @[CacheTests.scala 38:35]
    node _T_119 = mux(_T_114, _T_117, _T_118) @[CacheTests.scala 39:10]
    node _T_120 = or(_T_109, _T_119) @[CacheTests.scala 35:11]
    node _T_121 = div(off, UInt<3>("h04")) @[CacheTests.scala 36:33]
    node _T_122 = eq(_T_121, UInt<2>("h02")) @[CacheTests.scala 36:40]
    node _T_123 = dshr(io.req.bits.mask, UInt<2>("h03")) @[CacheTests.scala 36:68]
    node _T_124 = bits(_T_123, 0, 0) @[CacheTests.scala 36:84]
    node _T_125 = and(_T_122, _T_124) @[CacheTests.scala 36:55]
    node _T_126 = dshr(io.req.bits.data, UInt<5>("h018")) @[CacheTests.scala 37:39]
    node _T_127 = and(_T_126, UInt<8>("h0ff")) @[CacheTests.scala 37:70]
    node _T_128 = dshl(_T_127, UInt<7>("h058")) @[CacheTests.scala 37:88]
    node _T_129 = and(readData, UInt<96>("h0ff0000000000000000000000")) @[CacheTests.scala 38:35]
    node _T_130 = mux(_T_125, _T_128, _T_129) @[CacheTests.scala 39:10]
    node _T_131 = or(_T_120, _T_130) @[CacheTests.scala 35:11]
    node _T_132 = div(off, UInt<3>("h04")) @[CacheTests.scala 36:33]
    node _T_133 = eq(_T_132, UInt<2>("h03")) @[CacheTests.scala 36:40]
    node _T_134 = dshr(io.req.bits.mask, UInt<1>("h00")) @[CacheTests.scala 36:68]
    node _T_135 = bits(_T_134, 0, 0) @[CacheTests.scala 36:84]
    node _T_136 = and(_T_133, _T_135) @[CacheTests.scala 36:55]
    node _T_137 = dshr(io.req.bits.data, UInt<1>("h00")) @[CacheTests.scala 37:39]
    node _T_138 = and(_T_137, UInt<8>("h0ff")) @[CacheTests.scala 37:70]
    node _T_139 = dshl(_T_138, UInt<7>("h060")) @[CacheTests.scala 37:88]
    node _T_140 = and(readData, UInt<104>("h0ff000000000000000000000000")) @[CacheTests.scala 38:35]
    node _T_141 = mux(_T_136, _T_139, _T_140) @[CacheTests.scala 39:10]
    node _T_142 = or(_T_131, _T_141) @[CacheTests.scala 35:11]
    node _T_143 = div(off, UInt<3>("h04")) @[CacheTests.scala 36:33]
    node _T_144 = eq(_T_143, UInt<2>("h03")) @[CacheTests.scala 36:40]
    node _T_145 = dshr(io.req.bits.mask, UInt<1>("h01")) @[CacheTests.scala 36:68]
    node _T_146 = bits(_T_145, 0, 0) @[CacheTests.scala 36:84]
    node _T_147 = and(_T_144, _T_146) @[CacheTests.scala 36:55]
    node _T_148 = dshr(io.req.bits.data, UInt<4>("h08")) @[CacheTests.scala 37:39]
    node _T_149 = and(_T_148, UInt<8>("h0ff")) @[CacheTests.scala 37:70]
    node _T_150 = dshl(_T_149, UInt<7>("h068")) @[CacheTests.scala 37:88]
    node _T_151 = and(readData, UInt<112>("h0ff00000000000000000000000000")) @[CacheTests.scala 38:35]
    node _T_152 = mux(_T_147, _T_150, _T_151) @[CacheTests.scala 39:10]
    node _T_153 = or(_T_142, _T_152) @[CacheTests.scala 35:11]
    node _T_154 = div(off, UInt<3>("h04")) @[CacheTests.scala 36:33]
    node _T_155 = eq(_T_154, UInt<2>("h03")) @[CacheTests.scala 36:40]
    node _T_156 = dshr(io.req.bits.mask, UInt<2>("h02")) @[CacheTests.scala 36:68]
    node _T_157 = bits(_T_156, 0, 0) @[CacheTests.scala 36:84]
    node _T_158 = and(_T_155, _T_157) @[CacheTests.scala 36:55]
    node _T_159 = dshr(io.req.bits.data, UInt<5>("h010")) @[CacheTests.scala 37:39]
    node _T_160 = and(_T_159, UInt<8>("h0ff")) @[CacheTests.scala 37:70]
    node _T_161 = dshl(_T_160, UInt<7>("h070")) @[CacheTests.scala 37:88]
    node _T_162 = and(readData, UInt<120>("h0ff0000000000000000000000000000")) @[CacheTests.scala 38:35]
    node _T_163 = mux(_T_158, _T_161, _T_162) @[CacheTests.scala 39:10]
    node _T_164 = or(_T_153, _T_163) @[CacheTests.scala 35:11]
    node _T_165 = div(off, UInt<3>("h04")) @[CacheTests.scala 36:33]
    node _T_166 = eq(_T_165, UInt<2>("h03")) @[CacheTests.scala 36:40]
    node _T_167 = dshr(io.req.bits.mask, UInt<2>("h03")) @[CacheTests.scala 36:68]
    node _T_168 = bits(_T_167, 0, 0) @[CacheTests.scala 36:84]
    node _T_169 = and(_T_166, _T_168) @[CacheTests.scala 36:55]
    node _T_170 = dshr(io.req.bits.data, UInt<5>("h018")) @[CacheTests.scala 37:39]
    node _T_171 = and(_T_170, UInt<8>("h0ff")) @[CacheTests.scala 37:70]
    node _T_172 = dshl(_T_171, UInt<7>("h078")) @[CacheTests.scala 37:88]
    node _T_173 = and(readData, UInt<128>("h0ff000000000000000000000000000000")) @[CacheTests.scala 38:35]
    node _T_174 = mux(_T_169, _T_172, _T_173) @[CacheTests.scala 39:10]
    node _T_175 = or(_T_164, _T_174) @[CacheTests.scala 35:11]
    node writeData = bits(_T_175, 127, 0) @[CacheTests.scala 41:6]
    reg state : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[CacheTests.scala 44:22]
    node _T_176 = eq(state, UInt<2>("h01")) @[CacheTests.scala 45:37]
    reg wCnt : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Counter.scala 29:33]
    wire wDone : UInt<1>
    wDone <= UInt<1>("h00")
    when _T_176 : @[Counter.scala 67:17]
      node _T_177 = eq(wCnt, UInt<1>("h01")) @[Counter.scala 38:24]
      node _T_178 = add(wCnt, UInt<1>("h01")) @[Counter.scala 39:22]
      node _T_179 = tail(_T_178, 1) @[Counter.scala 39:22]
      wCnt <= _T_179 @[Counter.scala 39:13]
      wDone <= _T_177 @[Counter.scala 67:24]
      skip @[Counter.scala 67:17]
    node _T_180 = eq(state, UInt<2>("h03")) @[CacheTests.scala 46:37]
    node _T_181 = and(_T_180, io.nasti.r.valid) @[CacheTests.scala 46:47]
    reg rCnt : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Counter.scala 29:33]
    wire rDone : UInt<1>
    rDone <= UInt<1>("h00")
    when _T_181 : @[Counter.scala 67:17]
      node _T_182 = eq(rCnt, UInt<1>("h01")) @[Counter.scala 38:24]
      node _T_183 = add(rCnt, UInt<1>("h01")) @[Counter.scala 39:22]
      node _T_184 = tail(_T_183, 1) @[Counter.scala 39:22]
      rCnt <= _T_184 @[Counter.scala 39:13]
      rDone <= _T_182 @[Counter.scala 67:24]
      skip @[Counter.scala 67:17]
    node _T_185 = div(off, UInt<3>("h04")) @[CacheTests.scala 48:42]
    node _T_186 = mul(_T_185, UInt<6>("h020")) @[CacheTests.scala 48:49]
    node _T_187 = dshr(readData, _T_186) @[CacheTests.scala 48:33]
    io.resp.bits.data <= _T_187 @[CacheTests.scala 48:21]
    io.resp.valid <= UInt<1>("h00") @[CacheTests.scala 49:17]
    io.req.ready <= UInt<1>("h00") @[CacheTests.scala 50:16]
    node _T_188 = dshr(io.req.bits.addr, UInt<3>("h04")) @[CacheTests.scala 51:63]
    node _T_189 = dshl(_T_188, UInt<3>("h04")) @[CacheTests.scala 51:81]
    wire _T_190 : {addr : UInt<32>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, region : UInt<4>, id : UInt<5>, user : UInt<1>} @[nasti.scala 178:18]
    _T_190 is invalid @[nasti.scala 178:18]
    _T_190.id <= UInt<1>("h00") @[nasti.scala 179:11]
    _T_190.addr <= _T_189 @[nasti.scala 180:13]
    _T_190.len <= UInt<1>("h01") @[nasti.scala 181:12]
    _T_190.size <= UInt<2>("h03") @[nasti.scala 182:13]
    _T_190.burst <= UInt<1>("h01") @[nasti.scala 183:14]
    _T_190.lock <= UInt<1>("h00") @[nasti.scala 184:13]
    _T_190.cache <= UInt<1>("h00") @[nasti.scala 185:14]
    node _T_191 = cat(UInt<1>("h00"), UInt<1>("h00")) @[Cat.scala 30:58]
    node _T_192 = cat(_T_191, UInt<1>("h00")) @[Cat.scala 30:58]
    _T_190.prot <= _T_192 @[nasti.scala 186:13]
    _T_190.qos <= UInt<1>("h00") @[nasti.scala 187:12]
    _T_190.region <= UInt<1>("h00") @[nasti.scala 188:15]
    _T_190.user <= UInt<1>("h00") @[nasti.scala 189:13]
    io.nasti.ar.bits.user <= _T_190.user @[CacheTests.scala 51:20]
    io.nasti.ar.bits.id <= _T_190.id @[CacheTests.scala 51:20]
    io.nasti.ar.bits.region <= _T_190.region @[CacheTests.scala 51:20]
    io.nasti.ar.bits.qos <= _T_190.qos @[CacheTests.scala 51:20]
    io.nasti.ar.bits.prot <= _T_190.prot @[CacheTests.scala 51:20]
    io.nasti.ar.bits.cache <= _T_190.cache @[CacheTests.scala 51:20]
    io.nasti.ar.bits.lock <= _T_190.lock @[CacheTests.scala 51:20]
    io.nasti.ar.bits.burst <= _T_190.burst @[CacheTests.scala 51:20]
    io.nasti.ar.bits.size <= _T_190.size @[CacheTests.scala 51:20]
    io.nasti.ar.bits.len <= _T_190.len @[CacheTests.scala 51:20]
    io.nasti.ar.bits.addr <= _T_190.addr @[CacheTests.scala 51:20]
    io.nasti.ar.valid <= UInt<1>("h00") @[CacheTests.scala 52:21]
    infer mport _T_193 = tags[idx], clock @[CacheTests.scala 53:62]
    node _T_194 = cat(_T_193, idx) @[Cat.scala 30:58]
    node _T_195 = dshl(_T_194, UInt<3>("h04")) @[CacheTests.scala 53:74]
    wire _T_196 : {addr : UInt<32>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, region : UInt<4>, id : UInt<5>, user : UInt<1>} @[nasti.scala 158:18]
    _T_196 is invalid @[nasti.scala 158:18]
    _T_196.id <= UInt<1>("h00") @[nasti.scala 159:11]
    _T_196.addr <= _T_195 @[nasti.scala 160:13]
    _T_196.len <= UInt<1>("h01") @[nasti.scala 161:12]
    _T_196.size <= UInt<2>("h03") @[nasti.scala 162:13]
    _T_196.burst <= UInt<1>("h01") @[nasti.scala 163:14]
    _T_196.lock <= UInt<1>("h00") @[nasti.scala 164:13]
    _T_196.cache <= UInt<1>("h00") @[nasti.scala 165:14]
    node _T_197 = cat(UInt<1>("h00"), UInt<1>("h00")) @[Cat.scala 30:58]
    node _T_198 = cat(_T_197, UInt<1>("h00")) @[Cat.scala 30:58]
    _T_196.prot <= _T_198 @[nasti.scala 166:13]
    _T_196.qos <= UInt<1>("h00") @[nasti.scala 167:12]
    _T_196.region <= UInt<1>("h00") @[nasti.scala 168:15]
    _T_196.user <= UInt<1>("h00") @[nasti.scala 169:13]
    io.nasti.aw.bits.user <= _T_196.user @[CacheTests.scala 53:20]
    io.nasti.aw.bits.id <= _T_196.id @[CacheTests.scala 53:20]
    io.nasti.aw.bits.region <= _T_196.region @[CacheTests.scala 53:20]
    io.nasti.aw.bits.qos <= _T_196.qos @[CacheTests.scala 53:20]
    io.nasti.aw.bits.prot <= _T_196.prot @[CacheTests.scala 53:20]
    io.nasti.aw.bits.cache <= _T_196.cache @[CacheTests.scala 53:20]
    io.nasti.aw.bits.lock <= _T_196.lock @[CacheTests.scala 53:20]
    io.nasti.aw.bits.burst <= _T_196.burst @[CacheTests.scala 53:20]
    io.nasti.aw.bits.size <= _T_196.size @[CacheTests.scala 53:20]
    io.nasti.aw.bits.len <= _T_196.len @[CacheTests.scala 53:20]
    io.nasti.aw.bits.addr <= _T_196.addr @[CacheTests.scala 53:20]
    io.nasti.aw.valid <= UInt<1>("h00") @[CacheTests.scala 54:21]
    node _T_199 = mul(wCnt, UInt<7>("h040")) @[CacheTests.scala 55:63]
    node _T_200 = dshr(readData, _T_199) @[CacheTests.scala 55:54]
    wire _T_201 : {data : UInt<64>, last : UInt<1>, id : UInt<5>, strb : UInt<8>, user : UInt<1>} @[nasti.scala 198:17]
    _T_201 is invalid @[nasti.scala 198:17]
    node _T_202 = mux(UInt<1>("h01"), UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    _T_201.strb <= _T_202 @[nasti.scala 199:12]
    _T_201.data <= _T_200 @[nasti.scala 200:12]
    _T_201.last <= wDone @[nasti.scala 201:12]
    _T_201.id <= UInt<1>("h00") @[nasti.scala 202:12]
    _T_201.user <= UInt<1>("h00") @[nasti.scala 203:12]
    io.nasti.w.bits.user <= _T_201.user @[CacheTests.scala 55:19]
    io.nasti.w.bits.strb <= _T_201.strb @[CacheTests.scala 55:19]
    io.nasti.w.bits.id <= _T_201.id @[CacheTests.scala 55:19]
    io.nasti.w.bits.last <= _T_201.last @[CacheTests.scala 55:19]
    io.nasti.w.bits.data <= _T_201.data @[CacheTests.scala 55:19]
    node _T_203 = eq(state, UInt<2>("h01")) @[CacheTests.scala 56:29]
    io.nasti.w.valid <= _T_203 @[CacheTests.scala 56:20]
    node _T_204 = eq(state, UInt<2>("h02")) @[CacheTests.scala 57:29]
    io.nasti.b.ready <= _T_204 @[CacheTests.scala 57:20]
    node _T_205 = eq(state, UInt<2>("h03")) @[CacheTests.scala 58:29]
    io.nasti.r.ready <= _T_205 @[CacheTests.scala 58:20]
    node _T_206 = eq(UInt<2>("h00"), state) @[Conditional.scala 37:30]
    when _T_206 : @[Conditional.scala 40:58]
      node _T_207 = and(io.req.valid, io.resp.ready) @[CacheTests.scala 62:25]
      when _T_207 : @[CacheTests.scala 62:43]
        infer mport _T_208 = v[idx], clock @[CacheTests.scala 63:15]
        infer mport _T_209 = tags[idx], clock @[CacheTests.scala 63:29]
        node _T_210 = eq(_T_209, tag) @[CacheTests.scala 63:35]
        node _T_211 = and(_T_208, _T_210) @[CacheTests.scala 63:21]
        when _T_211 : @[CacheTests.scala 63:45]
          node _T_212 = orr(io.req.bits.mask) @[CacheTests.scala 64:25]
          when _T_212 : @[CacheTests.scala 64:30]
            infer mport _T_213 = d[idx], clock @[CacheTests.scala 65:14]
            _T_213 <= UInt<1>("h01") @[CacheTests.scala 65:23]
            infer mport _T_214 = dataMemory[idx], clock @[CacheTests.scala 66:23]
            _T_214 <= writeData @[CacheTests.scala 66:29]
            node _T_215 = asUInt(reset) @[CacheTests.scala 67:19]
            node _T_216 = eq(_T_215, UInt<1>("h00")) @[CacheTests.scala 67:19]
            when _T_216 : @[CacheTests.scala 67:19]
              printf(clock, UInt<1>(1), "[cache] data[%x] <= writeData %x, readData %x, off: %x, req: %x, mask: %b\n", idx, writeData, readData, off, io.req.bits.data, io.req.bits.mask) @[CacheTests.scala 67:19]
              skip @[CacheTests.scala 67:19]
            skip @[CacheTests.scala 64:30]
          else : @[CacheTests.scala 69:23]
            node _T_217 = asUInt(reset) @[CacheTests.scala 70:19]
            node _T_218 = eq(_T_217, UInt<1>("h00")) @[CacheTests.scala 70:19]
            when _T_218 : @[CacheTests.scala 70:19]
              printf(clock, UInt<1>(1), "[cache] data[%x] => %x, off: %x, resp: %x\n", idx, readData, off, io.resp.bits.data) @[CacheTests.scala 70:19]
              skip @[CacheTests.scala 70:19]
            skip @[CacheTests.scala 69:23]
          io.req.ready <= UInt<1>("h01") @[CacheTests.scala 73:24]
          io.resp.valid <= UInt<1>("h01") @[CacheTests.scala 74:25]
          skip @[CacheTests.scala 63:45]
        else : @[CacheTests.scala 75:21]
          infer mport _T_219 = d[idx], clock @[CacheTests.scala 76:17]
          when _T_219 : @[CacheTests.scala 76:24]
            io.nasti.aw.valid <= UInt<1>("h01") @[CacheTests.scala 77:31]
            state <= UInt<2>("h01") @[CacheTests.scala 78:19]
            skip @[CacheTests.scala 76:24]
          else : @[CacheTests.scala 79:23]
            infer mport _T_220 = dataMemory[idx], clock @[CacheTests.scala 80:23]
            _T_220 <= UInt<1>("h00") @[CacheTests.scala 80:29]
            io.nasti.ar.valid <= UInt<1>("h01") @[CacheTests.scala 81:31]
            state <= UInt<2>("h03") @[CacheTests.scala 82:19]
            skip @[CacheTests.scala 79:23]
          skip @[CacheTests.scala 75:21]
        skip @[CacheTests.scala 62:43]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_221 = eq(UInt<2>("h01"), state) @[Conditional.scala 37:30]
      when _T_221 : @[Conditional.scala 39:67]
        when wDone : @[CacheTests.scala 88:19]
          state <= UInt<2>("h02") @[CacheTests.scala 89:15]
          skip @[CacheTests.scala 88:19]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_222 = eq(UInt<2>("h02"), state) @[Conditional.scala 37:30]
        when _T_222 : @[Conditional.scala 39:67]
          when io.nasti.b.valid : @[CacheTests.scala 93:30]
            infer mport _T_223 = dataMemory[idx], clock @[CacheTests.scala 94:19]
            _T_223 <= UInt<1>("h00") @[CacheTests.scala 94:25]
            io.nasti.ar.valid <= UInt<1>("h01") @[CacheTests.scala 95:27]
            state <= UInt<2>("h03") @[CacheTests.scala 96:15]
            skip @[CacheTests.scala 93:30]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_224 = eq(UInt<2>("h03"), state) @[Conditional.scala 37:30]
          when _T_224 : @[Conditional.scala 39:67]
            when io.nasti.r.valid : @[CacheTests.scala 100:30]
              infer mport _T_225 = dataMemory[idx], clock @[CacheTests.scala 101:19]
              node _T_226 = mul(rCnt, UInt<7>("h040")) @[CacheTests.scala 101:71]
              node _T_227 = dshl(io.nasti.r.bits.data, _T_226) @[CacheTests.scala 101:62]
              node _T_228 = or(readData, _T_227) @[CacheTests.scala 101:37]
              _T_225 <= _T_228 @[CacheTests.scala 101:25]
              skip @[CacheTests.scala 100:30]
            when rDone : @[CacheTests.scala 103:19]
              node _T_229 = asUInt(reset) @[CacheTests.scala 104:15]
              node _T_230 = or(io.nasti.r.bits.last, _T_229) @[CacheTests.scala 104:15]
              node _T_231 = eq(_T_230, UInt<1>("h00")) @[CacheTests.scala 104:15]
              when _T_231 : @[CacheTests.scala 104:15]
                printf(clock, UInt<1>(1), "Assertion failed\n    at CacheTests.scala:104 assert(io.nasti.r.bits.last)\n") @[CacheTests.scala 104:15]
                stop(clock, UInt<1>(1), 1) @[CacheTests.scala 104:15]
                skip @[CacheTests.scala 104:15]
              infer mport _T_232 = tags[idx], clock @[CacheTests.scala 105:13]
              _T_232 <= tag @[CacheTests.scala 105:19]
              infer mport _T_233 = v[idx], clock @[CacheTests.scala 106:10]
              _T_233 <= UInt<1>("h01") @[CacheTests.scala 106:16]
              state <= UInt<2>("h00") @[CacheTests.scala 107:15]
              skip @[CacheTests.scala 103:19]
            skip @[Conditional.scala 39:67]
    
  module Queue_5 : 
    input clock : Clock
    input reset : Reset
    output io : {flip enq : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, data : UInt<32>, mask : UInt<4>}}, deq : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, data : UInt<32>, mask : UInt<4>}}, count : UInt<6>}
    
    cmem ram : {addr : UInt<32>, data : UInt<32>, mask : UInt<4>}[32] @[Decoupled.scala 218:16]
    reg _T : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[Counter.scala 29:33]
    reg _T_1 : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[Counter.scala 29:33]
    reg maybe_full : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Decoupled.scala 221:27]
    node ptr_match = eq(_T, _T_1) @[Decoupled.scala 223:33]
    node _T_2 = eq(maybe_full, UInt<1>("h00")) @[Decoupled.scala 224:28]
    node empty = and(ptr_match, _T_2) @[Decoupled.scala 224:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 225:24]
    node _T_3 = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 40:37]
    wire do_enq : UInt<1>
    do_enq <= _T_3
    node _T_4 = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 40:37]
    wire do_deq : UInt<1>
    do_deq <= _T_4
    when do_enq : @[Decoupled.scala 229:17]
      infer mport _T_5 = ram[_T], clock @[Decoupled.scala 230:8]
      _T_5.mask <= io.enq.bits.mask @[Decoupled.scala 230:24]
      _T_5.data <= io.enq.bits.data @[Decoupled.scala 230:24]
      _T_5.addr <= io.enq.bits.addr @[Decoupled.scala 230:24]
      node _T_6 = eq(_T, UInt<5>("h01f")) @[Counter.scala 38:24]
      node _T_7 = add(_T, UInt<1>("h01")) @[Counter.scala 39:22]
      node _T_8 = tail(_T_7, 1) @[Counter.scala 39:22]
      _T <= _T_8 @[Counter.scala 39:13]
      skip @[Decoupled.scala 229:17]
    when do_deq : @[Decoupled.scala 233:17]
      node _T_9 = eq(_T_1, UInt<5>("h01f")) @[Counter.scala 38:24]
      node _T_10 = add(_T_1, UInt<1>("h01")) @[Counter.scala 39:22]
      node _T_11 = tail(_T_10, 1) @[Counter.scala 39:22]
      _T_1 <= _T_11 @[Counter.scala 39:13]
      skip @[Decoupled.scala 233:17]
    node _T_12 = neq(do_enq, do_deq) @[Decoupled.scala 236:16]
    when _T_12 : @[Decoupled.scala 236:28]
      maybe_full <= do_enq @[Decoupled.scala 237:16]
      skip @[Decoupled.scala 236:28]
    node _T_13 = eq(empty, UInt<1>("h00")) @[Decoupled.scala 240:19]
    io.deq.valid <= _T_13 @[Decoupled.scala 240:16]
    node _T_14 = eq(full, UInt<1>("h00")) @[Decoupled.scala 241:19]
    io.enq.ready <= _T_14 @[Decoupled.scala 241:16]
    infer mport _T_15 = ram[_T_1], clock @[Decoupled.scala 242:21]
    io.deq.bits.mask <= _T_15.mask @[Decoupled.scala 242:15]
    io.deq.bits.data <= _T_15.data @[Decoupled.scala 242:15]
    io.deq.bits.addr <= _T_15.addr @[Decoupled.scala 242:15]
    node _T_16 = sub(_T, _T_1) @[Decoupled.scala 257:32]
    node ptr_diff = tail(_T_16, 1) @[Decoupled.scala 257:32]
    node _T_17 = and(maybe_full, ptr_match) @[Decoupled.scala 259:32]
    node _T_18 = mux(_T_17, UInt<6>("h020"), UInt<1>("h00")) @[Decoupled.scala 259:20]
    node _T_19 = or(_T_18, ptr_diff) @[Decoupled.scala 259:62]
    io.count <= _T_19 @[Decoupled.scala 259:14]
    
  module Queue_6 : 
    input clock : Clock
    input reset : Reset
    output io : {flip enq : {flip ready : UInt<1>, valid : UInt<1>, bits : {data : UInt<32>}}, deq : {flip ready : UInt<1>, valid : UInt<1>, bits : {data : UInt<32>}}, count : UInt<6>}
    
    cmem ram : {data : UInt<32>}[32] @[Decoupled.scala 218:16]
    reg _T : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[Counter.scala 29:33]
    reg _T_1 : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[Counter.scala 29:33]
    reg maybe_full : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Decoupled.scala 221:27]
    node ptr_match = eq(_T, _T_1) @[Decoupled.scala 223:33]
    node _T_2 = eq(maybe_full, UInt<1>("h00")) @[Decoupled.scala 224:28]
    node empty = and(ptr_match, _T_2) @[Decoupled.scala 224:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 225:24]
    node _T_3 = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 40:37]
    wire do_enq : UInt<1>
    do_enq <= _T_3
    node _T_4 = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 40:37]
    wire do_deq : UInt<1>
    do_deq <= _T_4
    when do_enq : @[Decoupled.scala 229:17]
      infer mport _T_5 = ram[_T], clock @[Decoupled.scala 230:8]
      _T_5.data <= io.enq.bits.data @[Decoupled.scala 230:24]
      node _T_6 = eq(_T, UInt<5>("h01f")) @[Counter.scala 38:24]
      node _T_7 = add(_T, UInt<1>("h01")) @[Counter.scala 39:22]
      node _T_8 = tail(_T_7, 1) @[Counter.scala 39:22]
      _T <= _T_8 @[Counter.scala 39:13]
      skip @[Decoupled.scala 229:17]
    when do_deq : @[Decoupled.scala 233:17]
      node _T_9 = eq(_T_1, UInt<5>("h01f")) @[Counter.scala 38:24]
      node _T_10 = add(_T_1, UInt<1>("h01")) @[Counter.scala 39:22]
      node _T_11 = tail(_T_10, 1) @[Counter.scala 39:22]
      _T_1 <= _T_11 @[Counter.scala 39:13]
      skip @[Decoupled.scala 233:17]
    node _T_12 = neq(do_enq, do_deq) @[Decoupled.scala 236:16]
    when _T_12 : @[Decoupled.scala 236:28]
      maybe_full <= do_enq @[Decoupled.scala 237:16]
      skip @[Decoupled.scala 236:28]
    node _T_13 = eq(empty, UInt<1>("h00")) @[Decoupled.scala 240:19]
    io.deq.valid <= _T_13 @[Decoupled.scala 240:16]
    node _T_14 = eq(full, UInt<1>("h00")) @[Decoupled.scala 241:19]
    io.enq.ready <= _T_14 @[Decoupled.scala 241:16]
    infer mport _T_15 = ram[_T_1], clock @[Decoupled.scala 242:21]
    io.deq.bits.data <= _T_15.data @[Decoupled.scala 242:15]
    node _T_16 = sub(_T, _T_1) @[Decoupled.scala 257:32]
    node ptr_diff = tail(_T_16, 1) @[Decoupled.scala 257:32]
    node _T_17 = and(maybe_full, ptr_match) @[Decoupled.scala 259:32]
    node _T_18 = mux(_T_17, UInt<6>("h020"), UInt<1>("h00")) @[Decoupled.scala 259:20]
    node _T_19 = or(_T_18, ptr_diff) @[Decoupled.scala 259:62]
    io.count <= _T_19 @[Decoupled.scala 259:14]
    
  module Queue_7 : 
    input clock : Clock
    input reset : Reset
    output io : {flip enq : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, region : UInt<4>, id : UInt<5>, user : UInt<1>}}, deq : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, region : UInt<4>, id : UInt<5>, user : UInt<1>}}, count : UInt<6>}
    
    cmem ram : {addr : UInt<32>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, region : UInt<4>, id : UInt<5>, user : UInt<1>}[32] @[Decoupled.scala 218:16]
    reg _T : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[Counter.scala 29:33]
    reg _T_1 : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[Counter.scala 29:33]
    reg maybe_full : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Decoupled.scala 221:27]
    node ptr_match = eq(_T, _T_1) @[Decoupled.scala 223:33]
    node _T_2 = eq(maybe_full, UInt<1>("h00")) @[Decoupled.scala 224:28]
    node empty = and(ptr_match, _T_2) @[Decoupled.scala 224:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 225:24]
    node _T_3 = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 40:37]
    wire do_enq : UInt<1>
    do_enq <= _T_3
    node _T_4 = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 40:37]
    wire do_deq : UInt<1>
    do_deq <= _T_4
    when do_enq : @[Decoupled.scala 229:17]
      infer mport _T_5 = ram[_T], clock @[Decoupled.scala 230:8]
      _T_5.user <= io.enq.bits.user @[Decoupled.scala 230:24]
      _T_5.id <= io.enq.bits.id @[Decoupled.scala 230:24]
      _T_5.region <= io.enq.bits.region @[Decoupled.scala 230:24]
      _T_5.qos <= io.enq.bits.qos @[Decoupled.scala 230:24]
      _T_5.prot <= io.enq.bits.prot @[Decoupled.scala 230:24]
      _T_5.cache <= io.enq.bits.cache @[Decoupled.scala 230:24]
      _T_5.lock <= io.enq.bits.lock @[Decoupled.scala 230:24]
      _T_5.burst <= io.enq.bits.burst @[Decoupled.scala 230:24]
      _T_5.size <= io.enq.bits.size @[Decoupled.scala 230:24]
      _T_5.len <= io.enq.bits.len @[Decoupled.scala 230:24]
      _T_5.addr <= io.enq.bits.addr @[Decoupled.scala 230:24]
      node _T_6 = eq(_T, UInt<5>("h01f")) @[Counter.scala 38:24]
      node _T_7 = add(_T, UInt<1>("h01")) @[Counter.scala 39:22]
      node _T_8 = tail(_T_7, 1) @[Counter.scala 39:22]
      _T <= _T_8 @[Counter.scala 39:13]
      skip @[Decoupled.scala 229:17]
    when do_deq : @[Decoupled.scala 233:17]
      node _T_9 = eq(_T_1, UInt<5>("h01f")) @[Counter.scala 38:24]
      node _T_10 = add(_T_1, UInt<1>("h01")) @[Counter.scala 39:22]
      node _T_11 = tail(_T_10, 1) @[Counter.scala 39:22]
      _T_1 <= _T_11 @[Counter.scala 39:13]
      skip @[Decoupled.scala 233:17]
    node _T_12 = neq(do_enq, do_deq) @[Decoupled.scala 236:16]
    when _T_12 : @[Decoupled.scala 236:28]
      maybe_full <= do_enq @[Decoupled.scala 237:16]
      skip @[Decoupled.scala 236:28]
    node _T_13 = eq(empty, UInt<1>("h00")) @[Decoupled.scala 240:19]
    io.deq.valid <= _T_13 @[Decoupled.scala 240:16]
    node _T_14 = eq(full, UInt<1>("h00")) @[Decoupled.scala 241:19]
    io.enq.ready <= _T_14 @[Decoupled.scala 241:16]
    infer mport _T_15 = ram[_T_1], clock @[Decoupled.scala 242:21]
    io.deq.bits.user <= _T_15.user @[Decoupled.scala 242:15]
    io.deq.bits.id <= _T_15.id @[Decoupled.scala 242:15]
    io.deq.bits.region <= _T_15.region @[Decoupled.scala 242:15]
    io.deq.bits.qos <= _T_15.qos @[Decoupled.scala 242:15]
    io.deq.bits.prot <= _T_15.prot @[Decoupled.scala 242:15]
    io.deq.bits.cache <= _T_15.cache @[Decoupled.scala 242:15]
    io.deq.bits.lock <= _T_15.lock @[Decoupled.scala 242:15]
    io.deq.bits.burst <= _T_15.burst @[Decoupled.scala 242:15]
    io.deq.bits.size <= _T_15.size @[Decoupled.scala 242:15]
    io.deq.bits.len <= _T_15.len @[Decoupled.scala 242:15]
    io.deq.bits.addr <= _T_15.addr @[Decoupled.scala 242:15]
    node _T_16 = sub(_T, _T_1) @[Decoupled.scala 257:32]
    node ptr_diff = tail(_T_16, 1) @[Decoupled.scala 257:32]
    node _T_17 = and(maybe_full, ptr_match) @[Decoupled.scala 259:32]
    node _T_18 = mux(_T_17, UInt<6>("h020"), UInt<1>("h00")) @[Decoupled.scala 259:20]
    node _T_19 = or(_T_18, ptr_diff) @[Decoupled.scala 259:62]
    io.count <= _T_19 @[Decoupled.scala 259:14]
    
  module Queue_8 : 
    input clock : Clock
    input reset : Reset
    output io : {flip enq : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, region : UInt<4>, id : UInt<5>, user : UInt<1>}}, deq : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, region : UInt<4>, id : UInt<5>, user : UInt<1>}}, count : UInt<6>}
    
    cmem ram : {addr : UInt<32>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, region : UInt<4>, id : UInt<5>, user : UInt<1>}[32] @[Decoupled.scala 218:16]
    reg _T : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[Counter.scala 29:33]
    reg _T_1 : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[Counter.scala 29:33]
    reg maybe_full : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Decoupled.scala 221:27]
    node ptr_match = eq(_T, _T_1) @[Decoupled.scala 223:33]
    node _T_2 = eq(maybe_full, UInt<1>("h00")) @[Decoupled.scala 224:28]
    node empty = and(ptr_match, _T_2) @[Decoupled.scala 224:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 225:24]
    node _T_3 = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 40:37]
    wire do_enq : UInt<1>
    do_enq <= _T_3
    node _T_4 = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 40:37]
    wire do_deq : UInt<1>
    do_deq <= _T_4
    when do_enq : @[Decoupled.scala 229:17]
      infer mport _T_5 = ram[_T], clock @[Decoupled.scala 230:8]
      _T_5.user <= io.enq.bits.user @[Decoupled.scala 230:24]
      _T_5.id <= io.enq.bits.id @[Decoupled.scala 230:24]
      _T_5.region <= io.enq.bits.region @[Decoupled.scala 230:24]
      _T_5.qos <= io.enq.bits.qos @[Decoupled.scala 230:24]
      _T_5.prot <= io.enq.bits.prot @[Decoupled.scala 230:24]
      _T_5.cache <= io.enq.bits.cache @[Decoupled.scala 230:24]
      _T_5.lock <= io.enq.bits.lock @[Decoupled.scala 230:24]
      _T_5.burst <= io.enq.bits.burst @[Decoupled.scala 230:24]
      _T_5.size <= io.enq.bits.size @[Decoupled.scala 230:24]
      _T_5.len <= io.enq.bits.len @[Decoupled.scala 230:24]
      _T_5.addr <= io.enq.bits.addr @[Decoupled.scala 230:24]
      node _T_6 = eq(_T, UInt<5>("h01f")) @[Counter.scala 38:24]
      node _T_7 = add(_T, UInt<1>("h01")) @[Counter.scala 39:22]
      node _T_8 = tail(_T_7, 1) @[Counter.scala 39:22]
      _T <= _T_8 @[Counter.scala 39:13]
      skip @[Decoupled.scala 229:17]
    when do_deq : @[Decoupled.scala 233:17]
      node _T_9 = eq(_T_1, UInt<5>("h01f")) @[Counter.scala 38:24]
      node _T_10 = add(_T_1, UInt<1>("h01")) @[Counter.scala 39:22]
      node _T_11 = tail(_T_10, 1) @[Counter.scala 39:22]
      _T_1 <= _T_11 @[Counter.scala 39:13]
      skip @[Decoupled.scala 233:17]
    node _T_12 = neq(do_enq, do_deq) @[Decoupled.scala 236:16]
    when _T_12 : @[Decoupled.scala 236:28]
      maybe_full <= do_enq @[Decoupled.scala 237:16]
      skip @[Decoupled.scala 236:28]
    node _T_13 = eq(empty, UInt<1>("h00")) @[Decoupled.scala 240:19]
    io.deq.valid <= _T_13 @[Decoupled.scala 240:16]
    node _T_14 = eq(full, UInt<1>("h00")) @[Decoupled.scala 241:19]
    io.enq.ready <= _T_14 @[Decoupled.scala 241:16]
    infer mport _T_15 = ram[_T_1], clock @[Decoupled.scala 242:21]
    io.deq.bits.user <= _T_15.user @[Decoupled.scala 242:15]
    io.deq.bits.id <= _T_15.id @[Decoupled.scala 242:15]
    io.deq.bits.region <= _T_15.region @[Decoupled.scala 242:15]
    io.deq.bits.qos <= _T_15.qos @[Decoupled.scala 242:15]
    io.deq.bits.prot <= _T_15.prot @[Decoupled.scala 242:15]
    io.deq.bits.cache <= _T_15.cache @[Decoupled.scala 242:15]
    io.deq.bits.lock <= _T_15.lock @[Decoupled.scala 242:15]
    io.deq.bits.burst <= _T_15.burst @[Decoupled.scala 242:15]
    io.deq.bits.size <= _T_15.size @[Decoupled.scala 242:15]
    io.deq.bits.len <= _T_15.len @[Decoupled.scala 242:15]
    io.deq.bits.addr <= _T_15.addr @[Decoupled.scala 242:15]
    node _T_16 = sub(_T, _T_1) @[Decoupled.scala 257:32]
    node ptr_diff = tail(_T_16, 1) @[Decoupled.scala 257:32]
    node _T_17 = and(maybe_full, ptr_match) @[Decoupled.scala 259:32]
    node _T_18 = mux(_T_17, UInt<6>("h020"), UInt<1>("h00")) @[Decoupled.scala 259:20]
    node _T_19 = or(_T_18, ptr_diff) @[Decoupled.scala 259:62]
    io.count <= _T_19 @[Decoupled.scala 259:14]
    
  module Queue_9 : 
    input clock : Clock
    input reset : Reset
    output io : {flip enq : {flip ready : UInt<1>, valid : UInt<1>, bits : {data : UInt<64>, last : UInt<1>, id : UInt<5>, strb : UInt<8>, user : UInt<1>}}, deq : {flip ready : UInt<1>, valid : UInt<1>, bits : {data : UInt<64>, last : UInt<1>, id : UInt<5>, strb : UInt<8>, user : UInt<1>}}, count : UInt<6>}
    
    cmem ram : {data : UInt<64>, last : UInt<1>, id : UInt<5>, strb : UInt<8>, user : UInt<1>}[32] @[Decoupled.scala 218:16]
    reg _T : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[Counter.scala 29:33]
    reg _T_1 : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[Counter.scala 29:33]
    reg maybe_full : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Decoupled.scala 221:27]
    node ptr_match = eq(_T, _T_1) @[Decoupled.scala 223:33]
    node _T_2 = eq(maybe_full, UInt<1>("h00")) @[Decoupled.scala 224:28]
    node empty = and(ptr_match, _T_2) @[Decoupled.scala 224:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 225:24]
    node _T_3 = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 40:37]
    wire do_enq : UInt<1>
    do_enq <= _T_3
    node _T_4 = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 40:37]
    wire do_deq : UInt<1>
    do_deq <= _T_4
    when do_enq : @[Decoupled.scala 229:17]
      infer mport _T_5 = ram[_T], clock @[Decoupled.scala 230:8]
      _T_5.user <= io.enq.bits.user @[Decoupled.scala 230:24]
      _T_5.strb <= io.enq.bits.strb @[Decoupled.scala 230:24]
      _T_5.id <= io.enq.bits.id @[Decoupled.scala 230:24]
      _T_5.last <= io.enq.bits.last @[Decoupled.scala 230:24]
      _T_5.data <= io.enq.bits.data @[Decoupled.scala 230:24]
      node _T_6 = eq(_T, UInt<5>("h01f")) @[Counter.scala 38:24]
      node _T_7 = add(_T, UInt<1>("h01")) @[Counter.scala 39:22]
      node _T_8 = tail(_T_7, 1) @[Counter.scala 39:22]
      _T <= _T_8 @[Counter.scala 39:13]
      skip @[Decoupled.scala 229:17]
    when do_deq : @[Decoupled.scala 233:17]
      node _T_9 = eq(_T_1, UInt<5>("h01f")) @[Counter.scala 38:24]
      node _T_10 = add(_T_1, UInt<1>("h01")) @[Counter.scala 39:22]
      node _T_11 = tail(_T_10, 1) @[Counter.scala 39:22]
      _T_1 <= _T_11 @[Counter.scala 39:13]
      skip @[Decoupled.scala 233:17]
    node _T_12 = neq(do_enq, do_deq) @[Decoupled.scala 236:16]
    when _T_12 : @[Decoupled.scala 236:28]
      maybe_full <= do_enq @[Decoupled.scala 237:16]
      skip @[Decoupled.scala 236:28]
    node _T_13 = eq(empty, UInt<1>("h00")) @[Decoupled.scala 240:19]
    io.deq.valid <= _T_13 @[Decoupled.scala 240:16]
    node _T_14 = eq(full, UInt<1>("h00")) @[Decoupled.scala 241:19]
    io.enq.ready <= _T_14 @[Decoupled.scala 241:16]
    infer mport _T_15 = ram[_T_1], clock @[Decoupled.scala 242:21]
    io.deq.bits.user <= _T_15.user @[Decoupled.scala 242:15]
    io.deq.bits.strb <= _T_15.strb @[Decoupled.scala 242:15]
    io.deq.bits.id <= _T_15.id @[Decoupled.scala 242:15]
    io.deq.bits.last <= _T_15.last @[Decoupled.scala 242:15]
    io.deq.bits.data <= _T_15.data @[Decoupled.scala 242:15]
    node _T_16 = sub(_T, _T_1) @[Decoupled.scala 257:32]
    node ptr_diff = tail(_T_16, 1) @[Decoupled.scala 257:32]
    node _T_17 = and(maybe_full, ptr_match) @[Decoupled.scala 259:32]
    node _T_18 = mux(_T_17, UInt<6>("h020"), UInt<1>("h00")) @[Decoupled.scala 259:20]
    node _T_19 = or(_T_18, ptr_diff) @[Decoupled.scala 259:62]
    io.count <= _T_19 @[Decoupled.scala 259:14]
    
  module Queue_10 : 
    input clock : Clock
    input reset : Reset
    output io : {flip enq : {flip ready : UInt<1>, valid : UInt<1>, bits : {resp : UInt<2>, id : UInt<5>, user : UInt<1>}}, deq : {flip ready : UInt<1>, valid : UInt<1>, bits : {resp : UInt<2>, id : UInt<5>, user : UInt<1>}}, count : UInt<6>}
    
    cmem ram : {resp : UInt<2>, id : UInt<5>, user : UInt<1>}[32] @[Decoupled.scala 218:16]
    reg _T : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[Counter.scala 29:33]
    reg _T_1 : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[Counter.scala 29:33]
    reg maybe_full : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Decoupled.scala 221:27]
    node ptr_match = eq(_T, _T_1) @[Decoupled.scala 223:33]
    node _T_2 = eq(maybe_full, UInt<1>("h00")) @[Decoupled.scala 224:28]
    node empty = and(ptr_match, _T_2) @[Decoupled.scala 224:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 225:24]
    node _T_3 = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 40:37]
    wire do_enq : UInt<1>
    do_enq <= _T_3
    node _T_4 = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 40:37]
    wire do_deq : UInt<1>
    do_deq <= _T_4
    when do_enq : @[Decoupled.scala 229:17]
      infer mport _T_5 = ram[_T], clock @[Decoupled.scala 230:8]
      _T_5.user <= io.enq.bits.user @[Decoupled.scala 230:24]
      _T_5.id <= io.enq.bits.id @[Decoupled.scala 230:24]
      _T_5.resp <= io.enq.bits.resp @[Decoupled.scala 230:24]
      node _T_6 = eq(_T, UInt<5>("h01f")) @[Counter.scala 38:24]
      node _T_7 = add(_T, UInt<1>("h01")) @[Counter.scala 39:22]
      node _T_8 = tail(_T_7, 1) @[Counter.scala 39:22]
      _T <= _T_8 @[Counter.scala 39:13]
      skip @[Decoupled.scala 229:17]
    when do_deq : @[Decoupled.scala 233:17]
      node _T_9 = eq(_T_1, UInt<5>("h01f")) @[Counter.scala 38:24]
      node _T_10 = add(_T_1, UInt<1>("h01")) @[Counter.scala 39:22]
      node _T_11 = tail(_T_10, 1) @[Counter.scala 39:22]
      _T_1 <= _T_11 @[Counter.scala 39:13]
      skip @[Decoupled.scala 233:17]
    node _T_12 = neq(do_enq, do_deq) @[Decoupled.scala 236:16]
    when _T_12 : @[Decoupled.scala 236:28]
      maybe_full <= do_enq @[Decoupled.scala 237:16]
      skip @[Decoupled.scala 236:28]
    node _T_13 = eq(empty, UInt<1>("h00")) @[Decoupled.scala 240:19]
    io.deq.valid <= _T_13 @[Decoupled.scala 240:16]
    node _T_14 = eq(full, UInt<1>("h00")) @[Decoupled.scala 241:19]
    io.enq.ready <= _T_14 @[Decoupled.scala 241:16]
    infer mport _T_15 = ram[_T_1], clock @[Decoupled.scala 242:21]
    io.deq.bits.user <= _T_15.user @[Decoupled.scala 242:15]
    io.deq.bits.id <= _T_15.id @[Decoupled.scala 242:15]
    io.deq.bits.resp <= _T_15.resp @[Decoupled.scala 242:15]
    node _T_16 = sub(_T, _T_1) @[Decoupled.scala 257:32]
    node ptr_diff = tail(_T_16, 1) @[Decoupled.scala 257:32]
    node _T_17 = and(maybe_full, ptr_match) @[Decoupled.scala 259:32]
    node _T_18 = mux(_T_17, UInt<6>("h020"), UInt<1>("h00")) @[Decoupled.scala 259:20]
    node _T_19 = or(_T_18, ptr_diff) @[Decoupled.scala 259:62]
    io.count <= _T_19 @[Decoupled.scala 259:14]
    
  module Queue_11 : 
    input clock : Clock
    input reset : Reset
    output io : {flip enq : {flip ready : UInt<1>, valid : UInt<1>, bits : {resp : UInt<2>, data : UInt<64>, last : UInt<1>, id : UInt<5>, user : UInt<1>}}, deq : {flip ready : UInt<1>, valid : UInt<1>, bits : {resp : UInt<2>, data : UInt<64>, last : UInt<1>, id : UInt<5>, user : UInt<1>}}, count : UInt<6>}
    
    cmem ram : {resp : UInt<2>, data : UInt<64>, last : UInt<1>, id : UInt<5>, user : UInt<1>}[32] @[Decoupled.scala 218:16]
    reg _T : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[Counter.scala 29:33]
    reg _T_1 : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[Counter.scala 29:33]
    reg maybe_full : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Decoupled.scala 221:27]
    node ptr_match = eq(_T, _T_1) @[Decoupled.scala 223:33]
    node _T_2 = eq(maybe_full, UInt<1>("h00")) @[Decoupled.scala 224:28]
    node empty = and(ptr_match, _T_2) @[Decoupled.scala 224:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 225:24]
    node _T_3 = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 40:37]
    wire do_enq : UInt<1>
    do_enq <= _T_3
    node _T_4 = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 40:37]
    wire do_deq : UInt<1>
    do_deq <= _T_4
    when do_enq : @[Decoupled.scala 229:17]
      infer mport _T_5 = ram[_T], clock @[Decoupled.scala 230:8]
      _T_5.user <= io.enq.bits.user @[Decoupled.scala 230:24]
      _T_5.id <= io.enq.bits.id @[Decoupled.scala 230:24]
      _T_5.last <= io.enq.bits.last @[Decoupled.scala 230:24]
      _T_5.data <= io.enq.bits.data @[Decoupled.scala 230:24]
      _T_5.resp <= io.enq.bits.resp @[Decoupled.scala 230:24]
      node _T_6 = eq(_T, UInt<5>("h01f")) @[Counter.scala 38:24]
      node _T_7 = add(_T, UInt<1>("h01")) @[Counter.scala 39:22]
      node _T_8 = tail(_T_7, 1) @[Counter.scala 39:22]
      _T <= _T_8 @[Counter.scala 39:13]
      skip @[Decoupled.scala 229:17]
    when do_deq : @[Decoupled.scala 233:17]
      node _T_9 = eq(_T_1, UInt<5>("h01f")) @[Counter.scala 38:24]
      node _T_10 = add(_T_1, UInt<1>("h01")) @[Counter.scala 39:22]
      node _T_11 = tail(_T_10, 1) @[Counter.scala 39:22]
      _T_1 <= _T_11 @[Counter.scala 39:13]
      skip @[Decoupled.scala 233:17]
    node _T_12 = neq(do_enq, do_deq) @[Decoupled.scala 236:16]
    when _T_12 : @[Decoupled.scala 236:28]
      maybe_full <= do_enq @[Decoupled.scala 237:16]
      skip @[Decoupled.scala 236:28]
    node _T_13 = eq(empty, UInt<1>("h00")) @[Decoupled.scala 240:19]
    io.deq.valid <= _T_13 @[Decoupled.scala 240:16]
    node _T_14 = eq(full, UInt<1>("h00")) @[Decoupled.scala 241:19]
    io.enq.ready <= _T_14 @[Decoupled.scala 241:16]
    infer mport _T_15 = ram[_T_1], clock @[Decoupled.scala 242:21]
    io.deq.bits.user <= _T_15.user @[Decoupled.scala 242:15]
    io.deq.bits.id <= _T_15.id @[Decoupled.scala 242:15]
    io.deq.bits.last <= _T_15.last @[Decoupled.scala 242:15]
    io.deq.bits.data <= _T_15.data @[Decoupled.scala 242:15]
    io.deq.bits.resp <= _T_15.resp @[Decoupled.scala 242:15]
    node _T_16 = sub(_T, _T_1) @[Decoupled.scala 257:32]
    node ptr_diff = tail(_T_16, 1) @[Decoupled.scala 257:32]
    node _T_17 = and(maybe_full, ptr_match) @[Decoupled.scala 259:32]
    node _T_18 = mux(_T_17, UInt<6>("h020"), UInt<1>("h00")) @[Decoupled.scala 259:20]
    node _T_19 = or(_T_18, ptr_diff) @[Decoupled.scala 259:62]
    io.count <= _T_19 @[Decoupled.scala 259:14]
    
  module CacheTester : 
    input clock : Clock
    input reset : UInt<1>
    output io : {}
    
    inst dut of Cache @[CacheTests.scala 115:19]
    dut.clock <= clock
    dut.reset <= reset
    wire dut_mem : {aw : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, region : UInt<4>, id : UInt<5>, user : UInt<1>}}, w : {flip ready : UInt<1>, valid : UInt<1>, bits : {data : UInt<64>, last : UInt<1>, id : UInt<5>, strb : UInt<8>, user : UInt<1>}}, flip b : {flip ready : UInt<1>, valid : UInt<1>, bits : {resp : UInt<2>, id : UInt<5>, user : UInt<1>}}, ar : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, region : UInt<4>, id : UInt<5>, user : UInt<1>}}, flip r : {flip ready : UInt<1>, valid : UInt<1>, bits : {resp : UInt<2>, data : UInt<64>, last : UInt<1>, id : UInt<5>, user : UInt<1>}}} @[CacheTests.scala 116:21]
    inst Queue of Queue @[Decoupled.scala 296:21]
    Queue.clock <= clock
    Queue.reset <= reset
    Queue.io.enq.valid <= dut.io.nasti.ar.valid @[Decoupled.scala 297:22]
    Queue.io.enq.bits.user <= dut.io.nasti.ar.bits.user @[Decoupled.scala 298:21]
    Queue.io.enq.bits.id <= dut.io.nasti.ar.bits.id @[Decoupled.scala 298:21]
    Queue.io.enq.bits.region <= dut.io.nasti.ar.bits.region @[Decoupled.scala 298:21]
    Queue.io.enq.bits.qos <= dut.io.nasti.ar.bits.qos @[Decoupled.scala 298:21]
    Queue.io.enq.bits.prot <= dut.io.nasti.ar.bits.prot @[Decoupled.scala 298:21]
    Queue.io.enq.bits.cache <= dut.io.nasti.ar.bits.cache @[Decoupled.scala 298:21]
    Queue.io.enq.bits.lock <= dut.io.nasti.ar.bits.lock @[Decoupled.scala 298:21]
    Queue.io.enq.bits.burst <= dut.io.nasti.ar.bits.burst @[Decoupled.scala 298:21]
    Queue.io.enq.bits.size <= dut.io.nasti.ar.bits.size @[Decoupled.scala 298:21]
    Queue.io.enq.bits.len <= dut.io.nasti.ar.bits.len @[Decoupled.scala 298:21]
    Queue.io.enq.bits.addr <= dut.io.nasti.ar.bits.addr @[Decoupled.scala 298:21]
    dut.io.nasti.ar.ready <= Queue.io.enq.ready @[Decoupled.scala 299:17]
    dut_mem.ar.bits <- Queue.io.deq.bits @[CacheTests.scala 117:14]
    dut_mem.ar.valid <= Queue.io.deq.valid @[CacheTests.scala 117:14]
    Queue.io.deq.ready <= dut_mem.ar.ready @[CacheTests.scala 117:14]
    inst Queue_1 of Queue_1 @[Decoupled.scala 296:21]
    Queue_1.clock <= clock
    Queue_1.reset <= reset
    Queue_1.io.enq.valid <= dut.io.nasti.aw.valid @[Decoupled.scala 297:22]
    Queue_1.io.enq.bits.user <= dut.io.nasti.aw.bits.user @[Decoupled.scala 298:21]
    Queue_1.io.enq.bits.id <= dut.io.nasti.aw.bits.id @[Decoupled.scala 298:21]
    Queue_1.io.enq.bits.region <= dut.io.nasti.aw.bits.region @[Decoupled.scala 298:21]
    Queue_1.io.enq.bits.qos <= dut.io.nasti.aw.bits.qos @[Decoupled.scala 298:21]
    Queue_1.io.enq.bits.prot <= dut.io.nasti.aw.bits.prot @[Decoupled.scala 298:21]
    Queue_1.io.enq.bits.cache <= dut.io.nasti.aw.bits.cache @[Decoupled.scala 298:21]
    Queue_1.io.enq.bits.lock <= dut.io.nasti.aw.bits.lock @[Decoupled.scala 298:21]
    Queue_1.io.enq.bits.burst <= dut.io.nasti.aw.bits.burst @[Decoupled.scala 298:21]
    Queue_1.io.enq.bits.size <= dut.io.nasti.aw.bits.size @[Decoupled.scala 298:21]
    Queue_1.io.enq.bits.len <= dut.io.nasti.aw.bits.len @[Decoupled.scala 298:21]
    Queue_1.io.enq.bits.addr <= dut.io.nasti.aw.bits.addr @[Decoupled.scala 298:21]
    dut.io.nasti.aw.ready <= Queue_1.io.enq.ready @[Decoupled.scala 299:17]
    dut_mem.aw.bits <- Queue_1.io.deq.bits @[CacheTests.scala 118:14]
    dut_mem.aw.valid <= Queue_1.io.deq.valid @[CacheTests.scala 118:14]
    Queue_1.io.deq.ready <= dut_mem.aw.ready @[CacheTests.scala 118:14]
    inst Queue_2 of Queue_2 @[Decoupled.scala 296:21]
    Queue_2.clock <= clock
    Queue_2.reset <= reset
    Queue_2.io.enq.valid <= dut.io.nasti.w.valid @[Decoupled.scala 297:22]
    Queue_2.io.enq.bits.user <= dut.io.nasti.w.bits.user @[Decoupled.scala 298:21]
    Queue_2.io.enq.bits.strb <= dut.io.nasti.w.bits.strb @[Decoupled.scala 298:21]
    Queue_2.io.enq.bits.id <= dut.io.nasti.w.bits.id @[Decoupled.scala 298:21]
    Queue_2.io.enq.bits.last <= dut.io.nasti.w.bits.last @[Decoupled.scala 298:21]
    Queue_2.io.enq.bits.data <= dut.io.nasti.w.bits.data @[Decoupled.scala 298:21]
    dut.io.nasti.w.ready <= Queue_2.io.enq.ready @[Decoupled.scala 299:17]
    dut_mem.w.bits <- Queue_2.io.deq.bits @[CacheTests.scala 119:13]
    dut_mem.w.valid <= Queue_2.io.deq.valid @[CacheTests.scala 119:13]
    Queue_2.io.deq.ready <= dut_mem.w.ready @[CacheTests.scala 119:13]
    inst Queue_3 of Queue_3 @[Decoupled.scala 296:21]
    Queue_3.clock <= clock
    Queue_3.reset <= reset
    Queue_3.io.enq.valid <= dut_mem.b.valid @[Decoupled.scala 297:22]
    Queue_3.io.enq.bits.user <= dut_mem.b.bits.user @[Decoupled.scala 298:21]
    Queue_3.io.enq.bits.id <= dut_mem.b.bits.id @[Decoupled.scala 298:21]
    Queue_3.io.enq.bits.resp <= dut_mem.b.bits.resp @[Decoupled.scala 298:21]
    dut_mem.b.ready <= Queue_3.io.enq.ready @[Decoupled.scala 299:17]
    dut.io.nasti.b.bits <- Queue_3.io.deq.bits @[CacheTests.scala 120:18]
    dut.io.nasti.b.valid <= Queue_3.io.deq.valid @[CacheTests.scala 120:18]
    Queue_3.io.deq.ready <= dut.io.nasti.b.ready @[CacheTests.scala 120:18]
    inst Queue_4 of Queue_4 @[Decoupled.scala 296:21]
    Queue_4.clock <= clock
    Queue_4.reset <= reset
    Queue_4.io.enq.valid <= dut_mem.r.valid @[Decoupled.scala 297:22]
    Queue_4.io.enq.bits.user <= dut_mem.r.bits.user @[Decoupled.scala 298:21]
    Queue_4.io.enq.bits.id <= dut_mem.r.bits.id @[Decoupled.scala 298:21]
    Queue_4.io.enq.bits.last <= dut_mem.r.bits.last @[Decoupled.scala 298:21]
    Queue_4.io.enq.bits.data <= dut_mem.r.bits.data @[Decoupled.scala 298:21]
    Queue_4.io.enq.bits.resp <= dut_mem.r.bits.resp @[Decoupled.scala 298:21]
    dut_mem.r.ready <= Queue_4.io.enq.ready @[Decoupled.scala 299:17]
    dut.io.nasti.r.bits <- Queue_4.io.deq.bits @[CacheTests.scala 121:18]
    dut.io.nasti.r.valid <= Queue_4.io.deq.valid @[CacheTests.scala 121:18]
    Queue_4.io.deq.ready <= dut.io.nasti.r.ready @[CacheTests.scala 121:18]
    inst gold of GoldCache @[CacheTests.scala 124:20]
    gold.clock <= clock
    gold.reset <= reset
    wire gold_req : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, data : UInt<32>, mask : UInt<4>}}
    gold_req.bits.mask <= gold.io.req.bits.mask
    gold_req.bits.data <= gold.io.req.bits.data
    gold_req.bits.addr <= gold.io.req.bits.addr
    gold_req.valid <= gold.io.req.valid
    gold_req.ready <= gold.io.req.ready
    wire gold_resp : {flip ready : UInt<1>, valid : UInt<1>, bits : {data : UInt<32>}}
    gold_resp.bits.data <= gold.io.resp.bits.data
    gold_resp.valid <= gold.io.resp.valid
    gold_resp.ready <= gold.io.resp.ready
    wire gold_mem : {aw : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, region : UInt<4>, id : UInt<5>, user : UInt<1>}}, w : {flip ready : UInt<1>, valid : UInt<1>, bits : {data : UInt<64>, last : UInt<1>, id : UInt<5>, strb : UInt<8>, user : UInt<1>}}, flip b : {flip ready : UInt<1>, valid : UInt<1>, bits : {resp : UInt<2>, id : UInt<5>, user : UInt<1>}}, ar : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, region : UInt<4>, id : UInt<5>, user : UInt<1>}}, flip r : {flip ready : UInt<1>, valid : UInt<1>, bits : {resp : UInt<2>, data : UInt<64>, last : UInt<1>, id : UInt<5>, user : UInt<1>}}} @[CacheTests.scala 127:22]
    inst Queue_5 of Queue_5 @[Decoupled.scala 296:21]
    Queue_5.clock <= clock
    Queue_5.reset <= reset
    Queue_5.io.enq.valid <= gold_req.valid @[Decoupled.scala 297:22]
    Queue_5.io.enq.bits.mask <= gold_req.bits.mask @[Decoupled.scala 298:21]
    Queue_5.io.enq.bits.data <= gold_req.bits.data @[Decoupled.scala 298:21]
    Queue_5.io.enq.bits.addr <= gold_req.bits.addr @[Decoupled.scala 298:21]
    gold_req.ready <= Queue_5.io.enq.ready @[Decoupled.scala 299:17]
    gold.io.req.bits.mask <= Queue_5.io.deq.bits.mask @[CacheTests.scala 128:15]
    gold.io.req.bits.data <= Queue_5.io.deq.bits.data @[CacheTests.scala 128:15]
    gold.io.req.bits.addr <= Queue_5.io.deq.bits.addr @[CacheTests.scala 128:15]
    gold.io.req.valid <= Queue_5.io.deq.valid @[CacheTests.scala 128:15]
    Queue_5.io.deq.ready <= gold.io.req.ready @[CacheTests.scala 128:15]
    inst Queue_6 of Queue_6 @[Decoupled.scala 296:21]
    Queue_6.clock <= clock
    Queue_6.reset <= reset
    Queue_6.io.enq.valid <= gold.io.resp.valid @[Decoupled.scala 297:22]
    Queue_6.io.enq.bits.data <= gold.io.resp.bits.data @[Decoupled.scala 298:21]
    gold.io.resp.ready <= Queue_6.io.enq.ready @[Decoupled.scala 299:17]
    gold_resp.bits.data <= Queue_6.io.deq.bits.data @[CacheTests.scala 129:13]
    gold_resp.valid <= Queue_6.io.deq.valid @[CacheTests.scala 129:13]
    Queue_6.io.deq.ready <= gold_resp.ready @[CacheTests.scala 129:13]
    inst Queue_7 of Queue_7 @[Decoupled.scala 296:21]
    Queue_7.clock <= clock
    Queue_7.reset <= reset
    Queue_7.io.enq.valid <= gold.io.nasti.ar.valid @[Decoupled.scala 297:22]
    Queue_7.io.enq.bits.user <= gold.io.nasti.ar.bits.user @[Decoupled.scala 298:21]
    Queue_7.io.enq.bits.id <= gold.io.nasti.ar.bits.id @[Decoupled.scala 298:21]
    Queue_7.io.enq.bits.region <= gold.io.nasti.ar.bits.region @[Decoupled.scala 298:21]
    Queue_7.io.enq.bits.qos <= gold.io.nasti.ar.bits.qos @[Decoupled.scala 298:21]
    Queue_7.io.enq.bits.prot <= gold.io.nasti.ar.bits.prot @[Decoupled.scala 298:21]
    Queue_7.io.enq.bits.cache <= gold.io.nasti.ar.bits.cache @[Decoupled.scala 298:21]
    Queue_7.io.enq.bits.lock <= gold.io.nasti.ar.bits.lock @[Decoupled.scala 298:21]
    Queue_7.io.enq.bits.burst <= gold.io.nasti.ar.bits.burst @[Decoupled.scala 298:21]
    Queue_7.io.enq.bits.size <= gold.io.nasti.ar.bits.size @[Decoupled.scala 298:21]
    Queue_7.io.enq.bits.len <= gold.io.nasti.ar.bits.len @[Decoupled.scala 298:21]
    Queue_7.io.enq.bits.addr <= gold.io.nasti.ar.bits.addr @[Decoupled.scala 298:21]
    gold.io.nasti.ar.ready <= Queue_7.io.enq.ready @[Decoupled.scala 299:17]
    gold_mem.ar.bits <- Queue_7.io.deq.bits @[CacheTests.scala 130:15]
    gold_mem.ar.valid <= Queue_7.io.deq.valid @[CacheTests.scala 130:15]
    Queue_7.io.deq.ready <= gold_mem.ar.ready @[CacheTests.scala 130:15]
    inst Queue_8 of Queue_8 @[Decoupled.scala 296:21]
    Queue_8.clock <= clock
    Queue_8.reset <= reset
    Queue_8.io.enq.valid <= gold.io.nasti.aw.valid @[Decoupled.scala 297:22]
    Queue_8.io.enq.bits.user <= gold.io.nasti.aw.bits.user @[Decoupled.scala 298:21]
    Queue_8.io.enq.bits.id <= gold.io.nasti.aw.bits.id @[Decoupled.scala 298:21]
    Queue_8.io.enq.bits.region <= gold.io.nasti.aw.bits.region @[Decoupled.scala 298:21]
    Queue_8.io.enq.bits.qos <= gold.io.nasti.aw.bits.qos @[Decoupled.scala 298:21]
    Queue_8.io.enq.bits.prot <= gold.io.nasti.aw.bits.prot @[Decoupled.scala 298:21]
    Queue_8.io.enq.bits.cache <= gold.io.nasti.aw.bits.cache @[Decoupled.scala 298:21]
    Queue_8.io.enq.bits.lock <= gold.io.nasti.aw.bits.lock @[Decoupled.scala 298:21]
    Queue_8.io.enq.bits.burst <= gold.io.nasti.aw.bits.burst @[Decoupled.scala 298:21]
    Queue_8.io.enq.bits.size <= gold.io.nasti.aw.bits.size @[Decoupled.scala 298:21]
    Queue_8.io.enq.bits.len <= gold.io.nasti.aw.bits.len @[Decoupled.scala 298:21]
    Queue_8.io.enq.bits.addr <= gold.io.nasti.aw.bits.addr @[Decoupled.scala 298:21]
    gold.io.nasti.aw.ready <= Queue_8.io.enq.ready @[Decoupled.scala 299:17]
    gold_mem.aw.bits <- Queue_8.io.deq.bits @[CacheTests.scala 131:15]
    gold_mem.aw.valid <= Queue_8.io.deq.valid @[CacheTests.scala 131:15]
    Queue_8.io.deq.ready <= gold_mem.aw.ready @[CacheTests.scala 131:15]
    inst Queue_9 of Queue_9 @[Decoupled.scala 296:21]
    Queue_9.clock <= clock
    Queue_9.reset <= reset
    Queue_9.io.enq.valid <= gold.io.nasti.w.valid @[Decoupled.scala 297:22]
    Queue_9.io.enq.bits.user <= gold.io.nasti.w.bits.user @[Decoupled.scala 298:21]
    Queue_9.io.enq.bits.strb <= gold.io.nasti.w.bits.strb @[Decoupled.scala 298:21]
    Queue_9.io.enq.bits.id <= gold.io.nasti.w.bits.id @[Decoupled.scala 298:21]
    Queue_9.io.enq.bits.last <= gold.io.nasti.w.bits.last @[Decoupled.scala 298:21]
    Queue_9.io.enq.bits.data <= gold.io.nasti.w.bits.data @[Decoupled.scala 298:21]
    gold.io.nasti.w.ready <= Queue_9.io.enq.ready @[Decoupled.scala 299:17]
    gold_mem.w.bits <- Queue_9.io.deq.bits @[CacheTests.scala 132:14]
    gold_mem.w.valid <= Queue_9.io.deq.valid @[CacheTests.scala 132:14]
    Queue_9.io.deq.ready <= gold_mem.w.ready @[CacheTests.scala 132:14]
    inst Queue_10 of Queue_10 @[Decoupled.scala 296:21]
    Queue_10.clock <= clock
    Queue_10.reset <= reset
    Queue_10.io.enq.valid <= gold_mem.b.valid @[Decoupled.scala 297:22]
    Queue_10.io.enq.bits.user <= gold_mem.b.bits.user @[Decoupled.scala 298:21]
    Queue_10.io.enq.bits.id <= gold_mem.b.bits.id @[Decoupled.scala 298:21]
    Queue_10.io.enq.bits.resp <= gold_mem.b.bits.resp @[Decoupled.scala 298:21]
    gold_mem.b.ready <= Queue_10.io.enq.ready @[Decoupled.scala 299:17]
    gold.io.nasti.b.bits <- Queue_10.io.deq.bits @[CacheTests.scala 133:19]
    gold.io.nasti.b.valid <= Queue_10.io.deq.valid @[CacheTests.scala 133:19]
    Queue_10.io.deq.ready <= gold.io.nasti.b.ready @[CacheTests.scala 133:19]
    inst Queue_11 of Queue_11 @[Decoupled.scala 296:21]
    Queue_11.clock <= clock
    Queue_11.reset <= reset
    Queue_11.io.enq.valid <= gold_mem.r.valid @[Decoupled.scala 297:22]
    Queue_11.io.enq.bits.user <= gold_mem.r.bits.user @[Decoupled.scala 298:21]
    Queue_11.io.enq.bits.id <= gold_mem.r.bits.id @[Decoupled.scala 298:21]
    Queue_11.io.enq.bits.last <= gold_mem.r.bits.last @[Decoupled.scala 298:21]
    Queue_11.io.enq.bits.data <= gold_mem.r.bits.data @[Decoupled.scala 298:21]
    Queue_11.io.enq.bits.resp <= gold_mem.r.bits.resp @[Decoupled.scala 298:21]
    gold_mem.r.ready <= Queue_11.io.enq.ready @[Decoupled.scala 299:17]
    gold.io.nasti.r.bits <- Queue_11.io.deq.bits @[CacheTests.scala 134:19]
    gold.io.nasti.r.valid <= Queue_11.io.deq.valid @[CacheTests.scala 134:19]
    Queue_11.io.deq.ready <= gold.io.nasti.r.ready @[CacheTests.scala 134:19]
    cmem mem : UInt<64>[1048576] @[CacheTests.scala 140:16]
    reg memState : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[CacheTests.scala 142:25]
    node _T = eq(memState, UInt<2>("h01")) @[CacheTests.scala 143:40]
    node _T_1 = and(_T, dut_mem.w.valid) @[CacheTests.scala 143:54]
    node _T_2 = and(_T_1, gold_mem.w.valid) @[CacheTests.scala 143:73]
    reg wCnt : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Counter.scala 29:33]
    wire wDone : UInt<1>
    wDone <= UInt<1>("h00")
    when _T_2 : @[Counter.scala 67:17]
      node _T_3 = eq(wCnt, UInt<1>("h01")) @[Counter.scala 38:24]
      node _T_4 = add(wCnt, UInt<1>("h01")) @[Counter.scala 39:22]
      node _T_5 = tail(_T_4, 1) @[Counter.scala 39:22]
      wCnt <= _T_5 @[Counter.scala 39:13]
      wDone <= _T_3 @[Counter.scala 67:24]
      skip @[Counter.scala 67:17]
    node _T_6 = eq(memState, UInt<2>("h03")) @[CacheTests.scala 144:40]
    node _T_7 = and(_T_6, dut_mem.r.ready) @[CacheTests.scala 144:53]
    node _T_8 = and(_T_7, gold_mem.r.ready) @[CacheTests.scala 144:72]
    reg rCnt : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Counter.scala 29:33]
    wire rDone : UInt<1>
    rDone <= UInt<1>("h00")
    when _T_8 : @[Counter.scala 67:17]
      node _T_9 = eq(rCnt, UInt<1>("h01")) @[Counter.scala 38:24]
      node _T_10 = add(rCnt, UInt<1>("h01")) @[Counter.scala 39:22]
      node _T_11 = tail(_T_10, 1) @[Counter.scala 39:22]
      rCnt <= _T_11 @[Counter.scala 39:13]
      rDone <= _T_9 @[Counter.scala 67:24]
      skip @[Counter.scala 67:17]
    dut_mem.ar.ready <= UInt<1>("h00") @[CacheTests.scala 146:21]
    dut_mem.aw.ready <= UInt<1>("h00") @[CacheTests.scala 147:21]
    dut_mem.w.ready <= UInt<1>("h00") @[CacheTests.scala 148:21]
    node _T_12 = eq(memState, UInt<2>("h02")) @[CacheTests.scala 149:33]
    dut_mem.b.valid <= _T_12 @[CacheTests.scala 149:21]
    wire _T_13 : {resp : UInt<2>, id : UInt<5>, user : UInt<1>} @[nasti.scala 223:17]
    _T_13 is invalid @[nasti.scala 223:17]
    _T_13.id <= UInt<1>("h00") @[nasti.scala 224:10]
    _T_13.resp <= UInt<1>("h00") @[nasti.scala 225:12]
    _T_13.user <= UInt<1>("h00") @[nasti.scala 226:12]
    dut_mem.b.bits.user <= _T_13.user @[CacheTests.scala 150:21]
    dut_mem.b.bits.id <= _T_13.id @[CacheTests.scala 150:21]
    dut_mem.b.bits.resp <= _T_13.resp @[CacheTests.scala 150:21]
    node _T_14 = eq(memState, UInt<2>("h03")) @[CacheTests.scala 151:33]
    dut_mem.r.valid <= _T_14 @[CacheTests.scala 151:21]
    node _T_15 = dshr(gold_mem.ar.bits.addr, UInt<2>("h03")) @[CacheTests.scala 152:77]
    node _T_16 = add(_T_15, rCnt) @[CacheTests.scala 152:93]
    node _T_17 = tail(_T_16, 1) @[CacheTests.scala 152:93]
    node _T_18 = bits(_T_17, 19, 0) @[CacheTests.scala 152:53]
    infer mport _T_19 = mem[_T_18], clock @[CacheTests.scala 152:53]
    wire _T_20 : {resp : UInt<2>, data : UInt<64>, last : UInt<1>, id : UInt<5>, user : UInt<1>} @[nasti.scala 211:17]
    _T_20 is invalid @[nasti.scala 211:17]
    _T_20.id <= UInt<1>("h00") @[nasti.scala 212:10]
    _T_20.data <= _T_19 @[nasti.scala 213:12]
    _T_20.last <= rDone @[nasti.scala 214:12]
    _T_20.resp <= UInt<1>("h00") @[nasti.scala 215:12]
    _T_20.user <= UInt<1>("h00") @[nasti.scala 216:12]
    dut_mem.r.bits.user <= _T_20.user @[CacheTests.scala 152:21]
    dut_mem.r.bits.id <= _T_20.id @[CacheTests.scala 152:21]
    dut_mem.r.bits.last <= _T_20.last @[CacheTests.scala 152:21]
    dut_mem.r.bits.data <= _T_20.data @[CacheTests.scala 152:21]
    dut_mem.r.bits.resp <= _T_20.resp @[CacheTests.scala 152:21]
    gold_mem.ar.ready <= dut_mem.ar.ready @[CacheTests.scala 153:21]
    gold_mem.aw.ready <= dut_mem.aw.ready @[CacheTests.scala 154:21]
    gold_mem.w.ready <= dut_mem.w.ready @[CacheTests.scala 155:21]
    gold_mem.b.valid <= dut_mem.b.valid @[CacheTests.scala 156:21]
    gold_mem.b.bits.user <= dut_mem.b.bits.user @[CacheTests.scala 157:21]
    gold_mem.b.bits.id <= dut_mem.b.bits.id @[CacheTests.scala 157:21]
    gold_mem.b.bits.resp <= dut_mem.b.bits.resp @[CacheTests.scala 157:21]
    gold_mem.r.valid <= dut_mem.r.valid @[CacheTests.scala 158:21]
    gold_mem.r.bits.user <= dut_mem.r.bits.user @[CacheTests.scala 159:21]
    gold_mem.r.bits.id <= dut_mem.r.bits.id @[CacheTests.scala 159:21]
    gold_mem.r.bits.last <= dut_mem.r.bits.last @[CacheTests.scala 159:21]
    gold_mem.r.bits.data <= dut_mem.r.bits.data @[CacheTests.scala 159:21]
    gold_mem.r.bits.resp <= dut_mem.r.bits.resp @[CacheTests.scala 159:21]
    node _T_21 = eq(UInt<2>("h00"), memState) @[Conditional.scala 37:30]
    when _T_21 : @[Conditional.scala 40:58]
      node _T_22 = and(gold_mem.aw.valid, dut_mem.aw.valid) @[CacheTests.scala 163:30]
      when _T_22 : @[CacheTests.scala 163:51]
        node _T_23 = eq(dut_mem.aw.bits.id, gold_mem.aw.bits.id) @[CacheTests.scala 164:35]
        node _T_24 = bits(reset, 0, 0) @[CacheTests.scala 164:15]
        node _T_25 = or(_T_23, _T_24) @[CacheTests.scala 164:15]
        node _T_26 = eq(_T_25, UInt<1>("h00")) @[CacheTests.scala 164:15]
        when _T_26 : @[CacheTests.scala 164:15]
          printf(clock, UInt<1>(1), "Assertion failed: * dut.io.nasti.aw.bits.id => %x != %x *\n\n    at CacheTests.scala:164 assert(dut_mem.aw.bits.id === gold_mem.aw.bits.id,\n", dut_mem.aw.bits.id, gold_mem.aw.bits.id) @[CacheTests.scala 164:15]
          stop(clock, UInt<1>(1), 1) @[CacheTests.scala 164:15]
          skip @[CacheTests.scala 164:15]
        node _T_27 = eq(gold_mem.aw.bits.addr, dut_mem.aw.bits.addr) @[CacheTests.scala 166:38]
        node _T_28 = bits(reset, 0, 0) @[CacheTests.scala 166:15]
        node _T_29 = or(_T_27, _T_28) @[CacheTests.scala 166:15]
        node _T_30 = eq(_T_29, UInt<1>("h00")) @[CacheTests.scala 166:15]
        when _T_30 : @[CacheTests.scala 166:15]
          printf(clock, UInt<1>(1), "Assertion failed: * dut.io.nasti.aw.bits.addr => %x != %x *\n\n    at CacheTests.scala:166 assert(gold_mem.aw.bits.addr === dut_mem.aw.bits.addr,\n", dut_mem.aw.bits.addr, gold_mem.aw.bits.addr) @[CacheTests.scala 166:15]
          stop(clock, UInt<1>(1), 1) @[CacheTests.scala 166:15]
          skip @[CacheTests.scala 166:15]
        node _T_31 = eq(gold_mem.aw.bits.size, dut_mem.aw.bits.size) @[CacheTests.scala 168:38]
        node _T_32 = bits(reset, 0, 0) @[CacheTests.scala 168:15]
        node _T_33 = or(_T_31, _T_32) @[CacheTests.scala 168:15]
        node _T_34 = eq(_T_33, UInt<1>("h00")) @[CacheTests.scala 168:15]
        when _T_34 : @[CacheTests.scala 168:15]
          printf(clock, UInt<1>(1), "Assertion failed: * dut.io.nasti.aw.bits.size => %x != %x *\n\n    at CacheTests.scala:168 assert(gold_mem.aw.bits.size === dut_mem.aw.bits.size,\n", dut_mem.aw.bits.size, gold_mem.aw.bits.size) @[CacheTests.scala 168:15]
          stop(clock, UInt<1>(1), 1) @[CacheTests.scala 168:15]
          skip @[CacheTests.scala 168:15]
        node _T_35 = eq(gold_mem.aw.bits.len, dut_mem.aw.bits.len) @[CacheTests.scala 170:38]
        node _T_36 = bits(reset, 0, 0) @[CacheTests.scala 170:15]
        node _T_37 = or(_T_35, _T_36) @[CacheTests.scala 170:15]
        node _T_38 = eq(_T_37, UInt<1>("h00")) @[CacheTests.scala 170:15]
        when _T_38 : @[CacheTests.scala 170:15]
          printf(clock, UInt<1>(1), "Assertion failed: * dut.io.nasti.aw.bits.len => %x != %x *\n\n    at CacheTests.scala:170 assert(gold_mem.aw.bits.len  === dut_mem.aw.bits.len,\n", dut_mem.aw.bits.len, gold_mem.aw.bits.len) @[CacheTests.scala 170:15]
          stop(clock, UInt<1>(1), 1) @[CacheTests.scala 170:15]
          skip @[CacheTests.scala 170:15]
        memState <= UInt<2>("h01") @[CacheTests.scala 172:18]
        skip @[CacheTests.scala 163:51]
      else : @[CacheTests.scala 173:57]
        node _T_39 = and(gold_mem.ar.valid, dut_mem.ar.valid) @[CacheTests.scala 173:36]
        when _T_39 : @[CacheTests.scala 173:57]
          node _T_40 = eq(dut_mem.ar.bits.id, gold_mem.ar.bits.id) @[CacheTests.scala 174:35]
          node _T_41 = bits(reset, 0, 0) @[CacheTests.scala 174:15]
          node _T_42 = or(_T_40, _T_41) @[CacheTests.scala 174:15]
          node _T_43 = eq(_T_42, UInt<1>("h00")) @[CacheTests.scala 174:15]
          when _T_43 : @[CacheTests.scala 174:15]
            printf(clock, UInt<1>(1), "Assertion failed: * dut.io.nasti.ar.bits.id => %x != %x *\n\n    at CacheTests.scala:174 assert(dut_mem.ar.bits.id === gold_mem.ar.bits.id,\n", dut_mem.ar.bits.id, gold_mem.ar.bits.id) @[CacheTests.scala 174:15]
            stop(clock, UInt<1>(1), 1) @[CacheTests.scala 174:15]
            skip @[CacheTests.scala 174:15]
          node _T_44 = eq(gold_mem.ar.bits.addr, dut_mem.ar.bits.addr) @[CacheTests.scala 176:38]
          node _T_45 = bits(reset, 0, 0) @[CacheTests.scala 176:15]
          node _T_46 = or(_T_44, _T_45) @[CacheTests.scala 176:15]
          node _T_47 = eq(_T_46, UInt<1>("h00")) @[CacheTests.scala 176:15]
          when _T_47 : @[CacheTests.scala 176:15]
            printf(clock, UInt<1>(1), "Assertion failed: * dut.io.nasti.ar.bits.addr => %x != %x *\n\n    at CacheTests.scala:176 assert(gold_mem.ar.bits.addr === dut_mem.ar.bits.addr,\n", dut_mem.ar.bits.addr, gold_mem.ar.bits.addr) @[CacheTests.scala 176:15]
            stop(clock, UInt<1>(1), 1) @[CacheTests.scala 176:15]
            skip @[CacheTests.scala 176:15]
          node _T_48 = eq(gold_mem.ar.bits.size, dut_mem.ar.bits.size) @[CacheTests.scala 178:38]
          node _T_49 = bits(reset, 0, 0) @[CacheTests.scala 178:15]
          node _T_50 = or(_T_48, _T_49) @[CacheTests.scala 178:15]
          node _T_51 = eq(_T_50, UInt<1>("h00")) @[CacheTests.scala 178:15]
          when _T_51 : @[CacheTests.scala 178:15]
            printf(clock, UInt<1>(1), "Assertion failed: * dut.io.nasti.ar.bits.size => %x != %x *\n\n    at CacheTests.scala:178 assert(gold_mem.ar.bits.size === dut_mem.ar.bits.size,\n", dut_mem.ar.bits.size, gold_mem.ar.bits.size) @[CacheTests.scala 178:15]
            stop(clock, UInt<1>(1), 1) @[CacheTests.scala 178:15]
            skip @[CacheTests.scala 178:15]
          node _T_52 = eq(gold_mem.ar.bits.len, dut_mem.ar.bits.len) @[CacheTests.scala 180:38]
          node _T_53 = bits(reset, 0, 0) @[CacheTests.scala 180:15]
          node _T_54 = or(_T_52, _T_53) @[CacheTests.scala 180:15]
          node _T_55 = eq(_T_54, UInt<1>("h00")) @[CacheTests.scala 180:15]
          when _T_55 : @[CacheTests.scala 180:15]
            printf(clock, UInt<1>(1), "Assertion failed: * dut.io.nasti.ar.bits.len => %x != %x *\nn\n    at CacheTests.scala:180 assert(gold_mem.ar.bits.len  === dut_mem.ar.bits.len,\n", dut_mem.ar.bits.len, gold_mem.ar.bits.len) @[CacheTests.scala 180:15]
            stop(clock, UInt<1>(1), 1) @[CacheTests.scala 180:15]
            skip @[CacheTests.scala 180:15]
          memState <= UInt<2>("h03") @[CacheTests.scala 182:18]
          skip @[CacheTests.scala 173:57]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_56 = eq(UInt<2>("h01"), memState) @[Conditional.scala 37:30]
      when _T_56 : @[Conditional.scala 39:67]
        node _T_57 = eq(dut_mem.aw.bits.size, UInt<2>("h03")) @[CacheTests.scala 186:35]
        node _T_58 = bits(reset, 0, 0) @[CacheTests.scala 186:13]
        node _T_59 = or(_T_57, _T_58) @[CacheTests.scala 186:13]
        node _T_60 = eq(_T_59, UInt<1>("h00")) @[CacheTests.scala 186:13]
        when _T_60 : @[CacheTests.scala 186:13]
          printf(clock, UInt<1>(1), "Assertion failed\n    at CacheTests.scala:186 assert(dut_mem.aw.bits.size === size)\n") @[CacheTests.scala 186:13]
          stop(clock, UInt<1>(1), 1) @[CacheTests.scala 186:13]
          skip @[CacheTests.scala 186:13]
        node _T_61 = eq(dut_mem.aw.bits.len, UInt<1>("h01")) @[CacheTests.scala 187:35]
        node _T_62 = bits(reset, 0, 0) @[CacheTests.scala 187:13]
        node _T_63 = or(_T_61, _T_62) @[CacheTests.scala 187:13]
        node _T_64 = eq(_T_63, UInt<1>("h00")) @[CacheTests.scala 187:13]
        when _T_64 : @[CacheTests.scala 187:13]
          printf(clock, UInt<1>(1), "Assertion failed\n    at CacheTests.scala:187 assert(dut_mem.aw.bits.len  === len)\n") @[CacheTests.scala 187:13]
          stop(clock, UInt<1>(1), 1) @[CacheTests.scala 187:13]
          skip @[CacheTests.scala 187:13]
        node _T_65 = and(gold_mem.w.valid, dut_mem.w.valid) @[CacheTests.scala 188:29]
        when _T_65 : @[CacheTests.scala 188:49]
          node _T_66 = eq(dut_mem.w.bits.data, gold_mem.w.bits.data) @[CacheTests.scala 189:36]
          node _T_67 = bits(reset, 0, 0) @[CacheTests.scala 189:15]
          node _T_68 = or(_T_66, _T_67) @[CacheTests.scala 189:15]
          node _T_69 = eq(_T_68, UInt<1>("h00")) @[CacheTests.scala 189:15]
          when _T_69 : @[CacheTests.scala 189:15]
            printf(clock, UInt<1>(1), "Assertion failed: * dut.io.nasti.w.bits.data => %x != %x *\n\n    at CacheTests.scala:189 assert(dut_mem.w.bits.data === gold_mem.w.bits.data,\n", dut_mem.w.bits.data, gold_mem.w.bits.data) @[CacheTests.scala 189:15]
            stop(clock, UInt<1>(1), 1) @[CacheTests.scala 189:15]
            skip @[CacheTests.scala 189:15]
          node _T_70 = eq(dut_mem.w.bits.strb, gold_mem.w.bits.strb) @[CacheTests.scala 191:36]
          node _T_71 = bits(reset, 0, 0) @[CacheTests.scala 191:15]
          node _T_72 = or(_T_70, _T_71) @[CacheTests.scala 191:15]
          node _T_73 = eq(_T_72, UInt<1>("h00")) @[CacheTests.scala 191:15]
          when _T_73 : @[CacheTests.scala 191:15]
            printf(clock, UInt<1>(1), "Assertion failed: * dut.io.nasti.w.bits.strb => %x != %x *\n\n    at CacheTests.scala:191 assert(dut_mem.w.bits.strb === gold_mem.w.bits.strb,\n", dut_mem.w.bits.strb, gold_mem.w.bits.strb) @[CacheTests.scala 191:15]
            stop(clock, UInt<1>(1), 1) @[CacheTests.scala 191:15]
            skip @[CacheTests.scala 191:15]
          node _T_74 = eq(dut_mem.w.bits.last, gold_mem.w.bits.last) @[CacheTests.scala 193:36]
          node _T_75 = bits(reset, 0, 0) @[CacheTests.scala 193:15]
          node _T_76 = or(_T_74, _T_75) @[CacheTests.scala 193:15]
          node _T_77 = eq(_T_76, UInt<1>("h00")) @[CacheTests.scala 193:15]
          when _T_77 : @[CacheTests.scala 193:15]
            printf(clock, UInt<1>(1), "Assertion failed: * dut.io.nasti.w.bits.last => %x != %x *\n\n    at CacheTests.scala:193 assert(dut_mem.w.bits.last === gold_mem.w.bits.last,\n", dut_mem.w.bits.last, gold_mem.w.bits.last) @[CacheTests.scala 193:15]
            stop(clock, UInt<1>(1), 1) @[CacheTests.scala 193:15]
            skip @[CacheTests.scala 193:15]
          node _T_78 = eq(dut_mem.w.bits.strb, UInt<8>("h0ff")) @[CacheTests.scala 195:36]
          node _T_79 = bits(reset, 0, 0) @[CacheTests.scala 195:15]
          node _T_80 = or(_T_78, _T_79) @[CacheTests.scala 195:15]
          node _T_81 = eq(_T_80, UInt<1>("h00")) @[CacheTests.scala 195:15]
          when _T_81 : @[CacheTests.scala 195:15]
            printf(clock, UInt<1>(1), "Assertion failed\n    at CacheTests.scala:195 assert(dut_mem.w.bits.strb === ((1 << (nastiXDataBits / 8)) - 1).U) // TODO: release it?\n") @[CacheTests.scala 195:15]
            stop(clock, UInt<1>(1), 1) @[CacheTests.scala 195:15]
            skip @[CacheTests.scala 195:15]
          node _T_82 = dshr(dut_mem.aw.bits.addr, UInt<2>("h03")) @[CacheTests.scala 196:35]
          node _T_83 = add(_T_82, wCnt) @[CacheTests.scala 196:51]
          node _T_84 = tail(_T_83, 1) @[CacheTests.scala 196:51]
          node _T_85 = bits(_T_84, 19, 0) @[CacheTests.scala 196:12]
          infer mport _T_86 = mem[_T_85], clock @[CacheTests.scala 196:12]
          _T_86 <= dut_mem.w.bits.data @[CacheTests.scala 196:59]
          node _T_87 = dshr(dut_mem.aw.bits.addr, UInt<2>("h03")) @[CacheTests.scala 197:65]
          node _T_88 = add(_T_87, wCnt) @[CacheTests.scala 197:81]
          node _T_89 = tail(_T_88, 1) @[CacheTests.scala 197:81]
          node _T_90 = bits(reset, 0, 0) @[CacheTests.scala 197:15]
          node _T_91 = eq(_T_90, UInt<1>("h00")) @[CacheTests.scala 197:15]
          when _T_91 : @[CacheTests.scala 197:15]
            printf(clock, UInt<1>(1), "[write] mem[%x] <= %x\n", _T_89, dut_mem.w.bits.data) @[CacheTests.scala 197:15]
            skip @[CacheTests.scala 197:15]
          dut_mem.w.ready <= UInt<1>("h01") @[CacheTests.scala 198:25]
          skip @[CacheTests.scala 188:49]
        when wDone : @[CacheTests.scala 200:19]
          dut_mem.aw.ready <= UInt<1>("h01") @[CacheTests.scala 201:26]
          memState <= UInt<2>("h02") @[CacheTests.scala 202:18]
          skip @[CacheTests.scala 200:19]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_92 = eq(UInt<2>("h02"), memState) @[Conditional.scala 37:30]
        when _T_92 : @[Conditional.scala 39:67]
          node _T_93 = and(gold_mem.b.ready, dut_mem.b.ready) @[CacheTests.scala 206:29]
          when _T_93 : @[CacheTests.scala 206:49]
            memState <= UInt<2>("h00") @[CacheTests.scala 207:18]
            skip @[CacheTests.scala 206:49]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_94 = eq(UInt<2>("h03"), memState) @[Conditional.scala 37:30]
          when _T_94 : @[Conditional.scala 39:67]
            node _T_95 = and(dut_mem.r.ready, gold_mem.r.ready) @[CacheTests.scala 211:28]
            when _T_95 : @[CacheTests.scala 211:49]
              node _T_96 = dshr(dut_mem.ar.bits.addr, UInt<2>("h03")) @[CacheTests.scala 212:64]
              node _T_97 = add(_T_96, rCnt) @[CacheTests.scala 212:80]
              node _T_98 = tail(_T_97, 1) @[CacheTests.scala 212:80]
              node _T_99 = bits(reset, 0, 0) @[CacheTests.scala 212:15]
              node _T_100 = eq(_T_99, UInt<1>("h00")) @[CacheTests.scala 212:15]
              when _T_100 : @[CacheTests.scala 212:15]
                printf(clock, UInt<1>(1), "[read] mem[%x] => %x\n", _T_98, dut_mem.r.bits.data) @[CacheTests.scala 212:15]
                skip @[CacheTests.scala 212:15]
              skip @[CacheTests.scala 211:49]
            when rDone : @[CacheTests.scala 214:19]
              dut_mem.ar.ready <= UInt<1>("h01") @[CacheTests.scala 215:26]
              memState <= UInt<2>("h00") @[CacheTests.scala 216:18]
              skip @[CacheTests.scala 214:19]
            skip @[Conditional.scala 39:67]
    node _T_101 = cat(UInt<20>("h04ad6b"), UInt<8>("h09f")) @[Cat.scala 30:58]
    node initAddr_0 = cat(_T_101, UInt<1>("h00")) @[Cat.scala 30:58]
    node _T_102 = cat(UInt<20>("h04ad6b"), UInt<8>("h09f")) @[Cat.scala 30:58]
    node initAddr_1 = cat(_T_102, UInt<1>("h01")) @[Cat.scala 30:58]
    node _T_103 = cat(UInt<20>("h04ad6b"), UInt<8>("h0a0")) @[Cat.scala 30:58]
    node initAddr_2 = cat(_T_103, UInt<1>("h00")) @[Cat.scala 30:58]
    node _T_104 = cat(UInt<20>("h04ad6b"), UInt<8>("h0a0")) @[Cat.scala 30:58]
    node initAddr_3 = cat(_T_104, UInt<1>("h01")) @[Cat.scala 30:58]
    node _T_105 = cat(UInt<20>("h0dff73"), UInt<8>("h09f")) @[Cat.scala 30:58]
    node initAddr_4 = cat(_T_105, UInt<1>("h00")) @[Cat.scala 30:58]
    node _T_106 = cat(UInt<20>("h0dff73"), UInt<8>("h09f")) @[Cat.scala 30:58]
    node initAddr_5 = cat(_T_106, UInt<1>("h01")) @[Cat.scala 30:58]
    node _T_107 = cat(UInt<20>("h0dff73"), UInt<8>("h0a0")) @[Cat.scala 30:58]
    node initAddr_6 = cat(_T_107, UInt<1>("h00")) @[Cat.scala 30:58]
    node _T_108 = cat(UInt<20>("h0dff73"), UInt<8>("h0a0")) @[Cat.scala 30:58]
    node initAddr_7 = cat(_T_108, UInt<1>("h01")) @[Cat.scala 30:58]
    node _T_109 = cat(UInt<20>("h0825c4"), UInt<8>("h09f")) @[Cat.scala 30:58]
    node initAddr_8 = cat(_T_109, UInt<1>("h00")) @[Cat.scala 30:58]
    node _T_110 = cat(UInt<20>("h0825c4"), UInt<8>("h09f")) @[Cat.scala 30:58]
    node initAddr_9 = cat(_T_110, UInt<1>("h01")) @[Cat.scala 30:58]
    node _T_111 = cat(UInt<20>("h0825c4"), UInt<8>("h0a0")) @[Cat.scala 30:58]
    node initAddr_10 = cat(_T_111, UInt<1>("h00")) @[Cat.scala 30:58]
    node _T_112 = cat(UInt<20>("h0825c4"), UInt<8>("h0a0")) @[Cat.scala 30:58]
    node initAddr_11 = cat(_T_112, UInt<1>("h01")) @[Cat.scala 30:58]
    node _T_113 = cat(UInt<64>("h0533839783c838dc2"), UInt<64>("h02a23229c062d7502")) @[Cat.scala 30:58]
    node _T_114 = cat(UInt<8>("h09f"), UInt<4>("h0c")) @[Cat.scala 30:58]
    node _T_115 = cat(UInt<4>("h00"), _T_113) @[Cat.scala 30:58]
    node _T_116 = cat(_T_115, UInt<20>("h04ad6b")) @[Cat.scala 30:58]
    node testVec_0 = cat(_T_116, _T_114) @[Cat.scala 30:58]
    node _T_117 = cat(UInt<64>("h03886b0d096518d5d"), UInt<64>("h0954f412534d0657b")) @[Cat.scala 30:58]
    node _T_118 = cat(UInt<8>("h09f"), UInt<4>("h08")) @[Cat.scala 30:58]
    node _T_119 = cat(UInt<4>("h00"), _T_117) @[Cat.scala 30:58]
    node _T_120 = cat(_T_119, UInt<20>("h04ad6b")) @[Cat.scala 30:58]
    node testVec_1 = cat(_T_120, _T_118) @[Cat.scala 30:58]
    node _T_121 = cat(UInt<64>("h0a6d1b64e317f191c"), UInt<64>("h047e6153b81b0a17")) @[Cat.scala 30:58]
    node _T_122 = cat(UInt<8>("h09f"), UInt<4>("h0c")) @[Cat.scala 30:58]
    node _T_123 = cat(UInt<4>("h00"), _T_121) @[Cat.scala 30:58]
    node _T_124 = cat(_T_123, UInt<20>("h0dff73")) @[Cat.scala 30:58]
    node testVec_2 = cat(_T_124, _T_122) @[Cat.scala 30:58]
    node _T_125 = cat(UInt<64>("h05db70f37524dffba"), UInt<64>("h0477a84480fd90243")) @[Cat.scala 30:58]
    node _T_126 = cat(UInt<8>("h09f"), UInt<4>("h0c")) @[Cat.scala 30:58]
    node _T_127 = cat(UInt<4>("h00"), _T_125) @[Cat.scala 30:58]
    node _T_128 = cat(_T_127, UInt<20>("h0dff73")) @[Cat.scala 30:58]
    node testVec_3 = cat(_T_128, _T_126) @[Cat.scala 30:58]
    node _T_129 = cat(UInt<64>("h03934fc7f4f82e9b"), UInt<64>("h02f79790db2260770")) @[Cat.scala 30:58]
    node _T_130 = cat(UInt<8>("h09f"), UInt<4>("h00")) @[Cat.scala 30:58]
    node _T_131 = cat(UInt<4>("h00"), _T_129) @[Cat.scala 30:58]
    node _T_132 = cat(_T_131, UInt<20>("h0dff73")) @[Cat.scala 30:58]
    node testVec_4 = cat(_T_132, _T_130) @[Cat.scala 30:58]
    node _T_133 = cat(UInt<64>("h033209ff4aaeb62dd"), UInt<64>("h06529477a9349df44")) @[Cat.scala 30:58]
    node _T_134 = cat(UInt<8>("h09f"), UInt<4>("h08")) @[Cat.scala 30:58]
    node _T_135 = cat(UInt<4>("h0e"), _T_133) @[Cat.scala 30:58]
    node _T_136 = cat(_T_135, UInt<20>("h0dff73")) @[Cat.scala 30:58]
    node testVec_5 = cat(_T_136, _T_134) @[Cat.scala 30:58]
    node _T_137 = cat(UInt<64>("h0d74777195b74de94"), UInt<64>("h075ec9d4d227a05f9")) @[Cat.scala 30:58]
    node _T_138 = cat(UInt<8>("h09f"), UInt<4>("h08")) @[Cat.scala 30:58]
    node _T_139 = cat(UInt<4>("h00"), _T_137) @[Cat.scala 30:58]
    node _T_140 = cat(_T_139, UInt<20>("h0dff73")) @[Cat.scala 30:58]
    node testVec_6 = cat(_T_140, _T_138) @[Cat.scala 30:58]
    node _T_141 = cat(UInt<64>("h08949ec4243a5289d"), UInt<64>("h04c4539a1b6d0ea1a")) @[Cat.scala 30:58]
    node _T_142 = cat(UInt<8>("h09f"), UInt<4>("h00")) @[Cat.scala 30:58]
    node _T_143 = cat(UInt<4>("h00"), _T_141) @[Cat.scala 30:58]
    node _T_144 = cat(_T_143, UInt<20>("h0825c4")) @[Cat.scala 30:58]
    node testVec_7 = cat(_T_144, _T_142) @[Cat.scala 30:58]
    node _T_145 = cat(UInt<64>("h0a296a953efc538fa"), UInt<64>("h05f4144816c0e6e0f")) @[Cat.scala 30:58]
    node _T_146 = cat(UInt<8>("h0a0"), UInt<4>("h0c")) @[Cat.scala 30:58]
    node _T_147 = cat(UInt<4>("h0f"), _T_145) @[Cat.scala 30:58]
    node _T_148 = cat(_T_147, UInt<20>("h04ad6b")) @[Cat.scala 30:58]
    node testVec_8 = cat(_T_148, _T_146) @[Cat.scala 30:58]
    node _T_149 = cat(UInt<64>("h0bf7eb1bd1695a0ca"), UInt<64>("h0e69d60c07b7d87fe")) @[Cat.scala 30:58]
    node _T_150 = cat(UInt<8>("h0a0"), UInt<4>("h0c")) @[Cat.scala 30:58]
    node _T_151 = cat(UInt<4>("h00"), _T_149) @[Cat.scala 30:58]
    node _T_152 = cat(_T_151, UInt<20>("h04ad6b")) @[Cat.scala 30:58]
    node testVec_9 = cat(_T_152, _T_150) @[Cat.scala 30:58]
    node _T_153 = cat(UInt<64>("h01cbcc9cca40a7a9b"), UInt<64>("h04d8e4c4797add999")) @[Cat.scala 30:58]
    node _T_154 = cat(UInt<8>("h0a0"), UInt<4>("h08")) @[Cat.scala 30:58]
    node _T_155 = cat(UInt<4>("h00"), _T_153) @[Cat.scala 30:58]
    node _T_156 = cat(_T_155, UInt<20>("h04ad6b")) @[Cat.scala 30:58]
    node testVec_10 = cat(_T_156, _T_154) @[Cat.scala 30:58]
    node _T_157 = cat(UInt<64>("h098d9861406a13eaa"), UInt<64>("h07622d39101cdef9c")) @[Cat.scala 30:58]
    node _T_158 = cat(UInt<8>("h0a0"), UInt<4>("h0c")) @[Cat.scala 30:58]
    node _T_159 = cat(UInt<4>("h02"), _T_157) @[Cat.scala 30:58]
    node _T_160 = cat(_T_159, UInt<20>("h0dff73")) @[Cat.scala 30:58]
    node testVec_11 = cat(_T_160, _T_158) @[Cat.scala 30:58]
    node _T_161 = cat(UInt<64>("h0320cfa59daa83acf"), UInt<64>("h05a1c503144d7d1ac")) @[Cat.scala 30:58]
    node _T_162 = cat(UInt<8>("h0a0"), UInt<4>("h00")) @[Cat.scala 30:58]
    node _T_163 = cat(UInt<4>("h00"), _T_161) @[Cat.scala 30:58]
    node _T_164 = cat(_T_163, UInt<20>("h0dff73")) @[Cat.scala 30:58]
    node testVec_12 = cat(_T_164, _T_162) @[Cat.scala 30:58]
    node _T_165 = cat(UInt<64>("h03bd55fbec7b979db"), UInt<64>("h0437ac6dbf6affed3")) @[Cat.scala 30:58]
    node _T_166 = cat(UInt<8>("h0a0"), UInt<4>("h08")) @[Cat.scala 30:58]
    node _T_167 = cat(UInt<4>("h00"), _T_165) @[Cat.scala 30:58]
    node _T_168 = cat(_T_167, UInt<20>("h0825c4")) @[Cat.scala 30:58]
    node testVec_13 = cat(_T_168, _T_166) @[Cat.scala 30:58]
    node _T_169 = cat(UInt<64>("h0215486ed49a777e2"), UInt<64>("h0f03b5b8044b2b77b")) @[Cat.scala 30:58]
    node _T_170 = cat(UInt<8>("h0a0"), UInt<4>("h00")) @[Cat.scala 30:58]
    node _T_171 = cat(UInt<4>("h00"), _T_169) @[Cat.scala 30:58]
    node _T_172 = cat(_T_171, UInt<20>("h0825c4")) @[Cat.scala 30:58]
    node testVec_14 = cat(_T_172, _T_170) @[Cat.scala 30:58]
    reg state : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[CacheTests.scala 264:22]
    reg timeout : UInt<32>, clock @[CacheTests.scala 265:20]
    node _T_173 = eq(state, UInt<2>("h00")) @[CacheTests.scala 266:43]
    reg initCnt : UInt<4>, clock with : (reset => (reset, UInt<4>("h00"))) @[Counter.scala 29:33]
    wire initDone : UInt<1>
    initDone <= UInt<1>("h00")
    when _T_173 : @[Counter.scala 67:17]
      node _T_174 = eq(initCnt, UInt<4>("h0b")) @[Counter.scala 38:24]
      node _T_175 = add(initCnt, UInt<1>("h01")) @[Counter.scala 39:22]
      node _T_176 = tail(_T_175, 1) @[Counter.scala 39:22]
      initCnt <= _T_176 @[Counter.scala 39:13]
      when _T_174 : @[Counter.scala 41:21]
        initCnt <= UInt<1>("h00") @[Counter.scala 41:29]
        skip @[Counter.scala 41:21]
      initDone <= _T_174 @[Counter.scala 67:24]
      skip @[Counter.scala 67:17]
    node _T_177 = eq(state, UInt<2>("h03")) @[CacheTests.scala 267:43]
    reg testCnt : UInt<4>, clock with : (reset => (reset, UInt<4>("h00"))) @[Counter.scala 29:33]
    wire testDone : UInt<1>
    testDone <= UInt<1>("h00")
    when _T_177 : @[Counter.scala 67:17]
      node _T_178 = eq(testCnt, UInt<4>("h0e")) @[Counter.scala 38:24]
      node _T_179 = add(testCnt, UInt<1>("h01")) @[Counter.scala 39:22]
      node _T_180 = tail(_T_179, 1) @[Counter.scala 39:22]
      testCnt <= _T_180 @[Counter.scala 39:13]
      when _T_178 : @[Counter.scala 41:21]
        testCnt <= UInt<1>("h00") @[Counter.scala 41:29]
        skip @[Counter.scala 41:21]
      testDone <= _T_178 @[Counter.scala 67:24]
      skip @[Counter.scala 67:17]
    wire _T_181 : UInt<164>[15] @[CacheTests.scala 268:22]
    _T_181[0] <= testVec_0 @[CacheTests.scala 268:22]
    _T_181[1] <= testVec_1 @[CacheTests.scala 268:22]
    _T_181[2] <= testVec_2 @[CacheTests.scala 268:22]
    _T_181[3] <= testVec_3 @[CacheTests.scala 268:22]
    _T_181[4] <= testVec_4 @[CacheTests.scala 268:22]
    _T_181[5] <= testVec_5 @[CacheTests.scala 268:22]
    _T_181[6] <= testVec_6 @[CacheTests.scala 268:22]
    _T_181[7] <= testVec_7 @[CacheTests.scala 268:22]
    _T_181[8] <= testVec_8 @[CacheTests.scala 268:22]
    _T_181[9] <= testVec_9 @[CacheTests.scala 268:22]
    _T_181[10] <= testVec_10 @[CacheTests.scala 268:22]
    _T_181[11] <= testVec_11 @[CacheTests.scala 268:22]
    _T_181[12] <= testVec_12 @[CacheTests.scala 268:22]
    _T_181[13] <= testVec_13 @[CacheTests.scala 268:22]
    _T_181[14] <= testVec_14 @[CacheTests.scala 268:22]
    node mask = shr(_T_181[testCnt], 160) @[CacheTests.scala 268:41]
    wire _T_182 : UInt<164>[15] @[CacheTests.scala 269:22]
    _T_182[0] <= testVec_0 @[CacheTests.scala 269:22]
    _T_182[1] <= testVec_1 @[CacheTests.scala 269:22]
    _T_182[2] <= testVec_2 @[CacheTests.scala 269:22]
    _T_182[3] <= testVec_3 @[CacheTests.scala 269:22]
    _T_182[4] <= testVec_4 @[CacheTests.scala 269:22]
    _T_182[5] <= testVec_5 @[CacheTests.scala 269:22]
    _T_182[6] <= testVec_6 @[CacheTests.scala 269:22]
    _T_182[7] <= testVec_7 @[CacheTests.scala 269:22]
    _T_182[8] <= testVec_8 @[CacheTests.scala 269:22]
    _T_182[9] <= testVec_9 @[CacheTests.scala 269:22]
    _T_182[10] <= testVec_10 @[CacheTests.scala 269:22]
    _T_182[11] <= testVec_11 @[CacheTests.scala 269:22]
    _T_182[12] <= testVec_12 @[CacheTests.scala 269:22]
    _T_182[13] <= testVec_13 @[CacheTests.scala 269:22]
    _T_182[14] <= testVec_14 @[CacheTests.scala 269:22]
    node _T_183 = shr(_T_182[testCnt], 32) @[CacheTests.scala 269:41]
    node data = bits(_T_183, 127, 0) @[CacheTests.scala 269:65]
    wire _T_184 : UInt<164>[15] @[CacheTests.scala 270:22]
    _T_184[0] <= testVec_0 @[CacheTests.scala 270:22]
    _T_184[1] <= testVec_1 @[CacheTests.scala 270:22]
    _T_184[2] <= testVec_2 @[CacheTests.scala 270:22]
    _T_184[3] <= testVec_3 @[CacheTests.scala 270:22]
    _T_184[4] <= testVec_4 @[CacheTests.scala 270:22]
    _T_184[5] <= testVec_5 @[CacheTests.scala 270:22]
    _T_184[6] <= testVec_6 @[CacheTests.scala 270:22]
    _T_184[7] <= testVec_7 @[CacheTests.scala 270:22]
    _T_184[8] <= testVec_8 @[CacheTests.scala 270:22]
    _T_184[9] <= testVec_9 @[CacheTests.scala 270:22]
    _T_184[10] <= testVec_10 @[CacheTests.scala 270:22]
    _T_184[11] <= testVec_11 @[CacheTests.scala 270:22]
    _T_184[12] <= testVec_12 @[CacheTests.scala 270:22]
    _T_184[13] <= testVec_13 @[CacheTests.scala 270:22]
    _T_184[14] <= testVec_14 @[CacheTests.scala 270:22]
    node _T_185 = dshr(_T_184[testCnt], UInt<4>("h0c")) @[CacheTests.scala 270:41]
    node tag = bits(_T_185, 19, 0) @[CacheTests.scala 270:60]
    wire _T_186 : UInt<164>[15] @[CacheTests.scala 271:22]
    _T_186[0] <= testVec_0 @[CacheTests.scala 271:22]
    _T_186[1] <= testVec_1 @[CacheTests.scala 271:22]
    _T_186[2] <= testVec_2 @[CacheTests.scala 271:22]
    _T_186[3] <= testVec_3 @[CacheTests.scala 271:22]
    _T_186[4] <= testVec_4 @[CacheTests.scala 271:22]
    _T_186[5] <= testVec_5 @[CacheTests.scala 271:22]
    _T_186[6] <= testVec_6 @[CacheTests.scala 271:22]
    _T_186[7] <= testVec_7 @[CacheTests.scala 271:22]
    _T_186[8] <= testVec_8 @[CacheTests.scala 271:22]
    _T_186[9] <= testVec_9 @[CacheTests.scala 271:22]
    _T_186[10] <= testVec_10 @[CacheTests.scala 271:22]
    _T_186[11] <= testVec_11 @[CacheTests.scala 271:22]
    _T_186[12] <= testVec_12 @[CacheTests.scala 271:22]
    _T_186[13] <= testVec_13 @[CacheTests.scala 271:22]
    _T_186[14] <= testVec_14 @[CacheTests.scala 271:22]
    node _T_187 = dshr(_T_186[testCnt], UInt<3>("h04")) @[CacheTests.scala 271:41]
    node idx = bits(_T_187, 7, 0) @[CacheTests.scala 271:51]
    wire _T_188 : UInt<164>[15] @[CacheTests.scala 272:22]
    _T_188[0] <= testVec_0 @[CacheTests.scala 272:22]
    _T_188[1] <= testVec_1 @[CacheTests.scala 272:22]
    _T_188[2] <= testVec_2 @[CacheTests.scala 272:22]
    _T_188[3] <= testVec_3 @[CacheTests.scala 272:22]
    _T_188[4] <= testVec_4 @[CacheTests.scala 272:22]
    _T_188[5] <= testVec_5 @[CacheTests.scala 272:22]
    _T_188[6] <= testVec_6 @[CacheTests.scala 272:22]
    _T_188[7] <= testVec_7 @[CacheTests.scala 272:22]
    _T_188[8] <= testVec_8 @[CacheTests.scala 272:22]
    _T_188[9] <= testVec_9 @[CacheTests.scala 272:22]
    _T_188[10] <= testVec_10 @[CacheTests.scala 272:22]
    _T_188[11] <= testVec_11 @[CacheTests.scala 272:22]
    _T_188[12] <= testVec_12 @[CacheTests.scala 272:22]
    _T_188[13] <= testVec_13 @[CacheTests.scala 272:22]
    _T_188[14] <= testVec_14 @[CacheTests.scala 272:22]
    node off = bits(_T_188[testCnt], 3, 0) @[CacheTests.scala 272:41]
    node _T_189 = cat(tag, idx) @[Cat.scala 30:58]
    node _T_190 = cat(_T_189, off) @[Cat.scala 30:58]
    dut.io.cpu.req.bits.addr <= _T_190 @[CacheTests.scala 273:29]
    dut.io.cpu.req.bits.data <= data @[CacheTests.scala 274:29]
    dut.io.cpu.req.bits.mask <= mask @[CacheTests.scala 275:29]
    node _T_191 = eq(state, UInt<2>("h02")) @[CacheTests.scala 276:38]
    dut.io.cpu.req.valid <= _T_191 @[CacheTests.scala 276:29]
    dut.io.cpu.abort is invalid @[CacheTests.scala 277:29]
    gold_req.bits.mask <= dut.io.cpu.req.bits.mask @[CacheTests.scala 278:29]
    gold_req.bits.data <= dut.io.cpu.req.bits.data @[CacheTests.scala 278:29]
    gold_req.bits.addr <= dut.io.cpu.req.bits.addr @[CacheTests.scala 278:29]
    node _T_192 = eq(state, UInt<2>("h01")) @[CacheTests.scala 279:38]
    gold_req.valid <= _T_192 @[CacheTests.scala 279:29]
    node _T_193 = eq(state, UInt<2>("h03")) @[CacheTests.scala 280:38]
    gold_resp.ready <= _T_193 @[CacheTests.scala 280:29]
    node _T_194 = eq(UInt<2>("h00"), state) @[Conditional.scala 37:30]
    when _T_194 : @[Conditional.scala 40:58]
      wire _T_195 : UInt<29>[12] @[CacheTests.scala 284:18]
      _T_195[0] <= initAddr_0 @[CacheTests.scala 284:18]
      _T_195[1] <= initAddr_1 @[CacheTests.scala 284:18]
      _T_195[2] <= initAddr_2 @[CacheTests.scala 284:18]
      _T_195[3] <= initAddr_3 @[CacheTests.scala 284:18]
      _T_195[4] <= initAddr_4 @[CacheTests.scala 284:18]
      _T_195[5] <= initAddr_5 @[CacheTests.scala 284:18]
      _T_195[6] <= initAddr_6 @[CacheTests.scala 284:18]
      _T_195[7] <= initAddr_7 @[CacheTests.scala 284:18]
      _T_195[8] <= initAddr_8 @[CacheTests.scala 284:18]
      _T_195[9] <= initAddr_9 @[CacheTests.scala 284:18]
      _T_195[10] <= initAddr_10 @[CacheTests.scala 284:18]
      _T_195[11] <= initAddr_11 @[CacheTests.scala 284:18]
      node _T_196 = bits(_T_195[initCnt], 19, 0) @[CacheTests.scala 284:10]
      infer mport _T_197 = mem[_T_196], clock @[CacheTests.scala 284:10]
      wire _T_198 : UInt<64>[12] @[CacheTests.scala 284:49]
      _T_198[0] <= UInt<64>("h0435f816bb1dde63") @[CacheTests.scala 284:49]
      _T_198[1] <= UInt<64>("h0c7db46c815d18ce6") @[CacheTests.scala 284:49]
      _T_198[2] <= UInt<64>("h0e9596f2582ba247c") @[CacheTests.scala 284:49]
      _T_198[3] <= UInt<64>("h0b0d1dbcdd9878315") @[CacheTests.scala 284:49]
      _T_198[4] <= UInt<64>("h0468b752266c876f9") @[CacheTests.scala 284:49]
      _T_198[5] <= UInt<64>("h0d9734eca0f88adf7") @[CacheTests.scala 284:49]
      _T_198[6] <= UInt<64>("h07e7dfd70c26768c8") @[CacheTests.scala 284:49]
      _T_198[7] <= UInt<64>("h0a9c87fed22464945") @[CacheTests.scala 284:49]
      _T_198[8] <= UInt<64>("h09fac5b46b8ef17b6") @[CacheTests.scala 284:49]
      _T_198[9] <= UInt<64>("h01f12255b0e3c52a3") @[CacheTests.scala 284:49]
      _T_198[10] <= UInt<64>("h097a089b7d05f0a6e") @[CacheTests.scala 284:49]
      _T_198[11] <= UInt<64>("h0a95a579ed5d67c9b") @[CacheTests.scala 284:49]
      _T_197 <= _T_198[initCnt] @[CacheTests.scala 284:39]
      wire _T_199 : UInt<29>[12] @[CacheTests.scala 285:47]
      _T_199[0] <= initAddr_0 @[CacheTests.scala 285:47]
      _T_199[1] <= initAddr_1 @[CacheTests.scala 285:47]
      _T_199[2] <= initAddr_2 @[CacheTests.scala 285:47]
      _T_199[3] <= initAddr_3 @[CacheTests.scala 285:47]
      _T_199[4] <= initAddr_4 @[CacheTests.scala 285:47]
      _T_199[5] <= initAddr_5 @[CacheTests.scala 285:47]
      _T_199[6] <= initAddr_6 @[CacheTests.scala 285:47]
      _T_199[7] <= initAddr_7 @[CacheTests.scala 285:47]
      _T_199[8] <= initAddr_8 @[CacheTests.scala 285:47]
      _T_199[9] <= initAddr_9 @[CacheTests.scala 285:47]
      _T_199[10] <= initAddr_10 @[CacheTests.scala 285:47]
      _T_199[11] <= initAddr_11 @[CacheTests.scala 285:47]
      wire _T_200 : UInt<64>[12] @[CacheTests.scala 285:75]
      _T_200[0] <= UInt<64>("h0435f816bb1dde63") @[CacheTests.scala 285:75]
      _T_200[1] <= UInt<64>("h0c7db46c815d18ce6") @[CacheTests.scala 285:75]
      _T_200[2] <= UInt<64>("h0e9596f2582ba247c") @[CacheTests.scala 285:75]
      _T_200[3] <= UInt<64>("h0b0d1dbcdd9878315") @[CacheTests.scala 285:75]
      _T_200[4] <= UInt<64>("h0468b752266c876f9") @[CacheTests.scala 285:75]
      _T_200[5] <= UInt<64>("h0d9734eca0f88adf7") @[CacheTests.scala 285:75]
      _T_200[6] <= UInt<64>("h07e7dfd70c26768c8") @[CacheTests.scala 285:75]
      _T_200[7] <= UInt<64>("h0a9c87fed22464945") @[CacheTests.scala 285:75]
      _T_200[8] <= UInt<64>("h09fac5b46b8ef17b6") @[CacheTests.scala 285:75]
      _T_200[9] <= UInt<64>("h01f12255b0e3c52a3") @[CacheTests.scala 285:75]
      _T_200[10] <= UInt<64>("h097a089b7d05f0a6e") @[CacheTests.scala 285:75]
      _T_200[11] <= UInt<64>("h0a95a579ed5d67c9b") @[CacheTests.scala 285:75]
      node _T_201 = bits(reset, 0, 0) @[CacheTests.scala 285:13]
      node _T_202 = eq(_T_201, UInt<1>("h00")) @[CacheTests.scala 285:13]
      when _T_202 : @[CacheTests.scala 285:13]
        printf(clock, UInt<1>(1), "[init] mem[%x] <= %x\n", _T_199[initCnt], _T_200[initCnt]) @[CacheTests.scala 285:13]
        skip @[CacheTests.scala 285:13]
      when initDone : @[CacheTests.scala 286:22]
        state <= UInt<2>("h01") @[CacheTests.scala 287:15]
        skip @[CacheTests.scala 286:22]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_203 = eq(UInt<2>("h01"), state) @[Conditional.scala 37:30]
      when _T_203 : @[Conditional.scala 39:67]
        when gold_req.ready : @[CacheTests.scala 291:28]
          timeout <= UInt<1>("h00") @[CacheTests.scala 292:17]
          state <= UInt<2>("h02") @[CacheTests.scala 293:15]
          skip @[CacheTests.scala 291:28]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_204 = eq(UInt<2>("h02"), state) @[Conditional.scala 37:30]
        when _T_204 : @[Conditional.scala 39:67]
          node _T_205 = add(timeout, UInt<1>("h01")) @[CacheTests.scala 297:26]
          node _T_206 = tail(_T_205, 1) @[CacheTests.scala 297:26]
          timeout <= _T_206 @[CacheTests.scala 297:15]
          node _T_207 = lt(timeout, UInt<7>("h064")) @[CacheTests.scala 298:22]
          node _T_208 = bits(reset, 0, 0) @[CacheTests.scala 298:13]
          node _T_209 = or(_T_207, _T_208) @[CacheTests.scala 298:13]
          node _T_210 = eq(_T_209, UInt<1>("h00")) @[CacheTests.scala 298:13]
          when _T_210 : @[CacheTests.scala 298:13]
            printf(clock, UInt<1>(1), "Assertion failed\n    at CacheTests.scala:298 assert(timeout < 100.U)\n") @[CacheTests.scala 298:13]
            stop(clock, UInt<1>(1), 1) @[CacheTests.scala 298:13]
            skip @[CacheTests.scala 298:13]
          node _T_211 = and(dut.io.cpu.resp.valid, gold_resp.valid) @[CacheTests.scala 299:34]
          when _T_211 : @[CacheTests.scala 299:54]
            node _T_212 = orr(mask) @[CacheTests.scala 300:20]
            node _T_213 = eq(_T_212, UInt<1>("h00")) @[CacheTests.scala 300:14]
            when _T_213 : @[CacheTests.scala 300:25]
              node _T_214 = eq(dut.io.cpu.resp.bits.data, gold_resp.bits.data) @[CacheTests.scala 301:44]
              node _T_215 = bits(reset, 0, 0) @[CacheTests.scala 301:17]
              node _T_216 = or(_T_214, _T_215) @[CacheTests.scala 301:17]
              node _T_217 = eq(_T_216, UInt<1>("h00")) @[CacheTests.scala 301:17]
              when _T_217 : @[CacheTests.scala 301:17]
                printf(clock, UInt<1>(1), "Assertion failed: * dut.io.cpu.resp.bits.data => %x ?= %x *\n\n    at CacheTests.scala:301 assert(dut.io.cpu.resp.bits.data === gold_resp.bits.data,\n", dut.io.cpu.resp.bits.data, gold_resp.bits.data) @[CacheTests.scala 301:17]
                stop(clock, UInt<1>(1), 1) @[CacheTests.scala 301:17]
                skip @[CacheTests.scala 301:17]
              skip @[CacheTests.scala 300:25]
            state <= UInt<2>("h03") @[CacheTests.scala 305:15]
            skip @[CacheTests.scala 299:54]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_218 = eq(UInt<2>("h03"), state) @[Conditional.scala 37:30]
          when _T_218 : @[Conditional.scala 39:67]
            state <= UInt<2>("h01") @[CacheTests.scala 309:13]
            skip @[Conditional.scala 39:67]
    when testDone : @[CacheTests.scala 313:18]
      node _T_219 = bits(reset, 0, 0) @[CacheTests.scala 313:24]
      node _T_220 = eq(_T_219, UInt<1>("h00")) @[CacheTests.scala 313:24]
      when _T_220 : @[CacheTests.scala 313:24]
        stop(clock, UInt<1>(1), 0) @[CacheTests.scala 313:24]
        skip @[CacheTests.scala 313:24]
      skip @[CacheTests.scala 313:18]
    
