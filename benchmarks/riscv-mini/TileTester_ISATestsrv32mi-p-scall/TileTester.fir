circuit TileTester :
  module CSR :
    input clock : Clock
    input reset : Reset
    output io : { flip stall : UInt<1>, flip cmd : UInt<3>, flip in : UInt<32>, out : UInt<32>, flip pc : UInt<32>, flip addr : UInt<32>, flip inst : UInt<32>, flip illegal : UInt<1>, flip st_type : UInt<2>, flip ld_type : UInt<3>, flip pc_check : UInt<1>, expt : UInt<1>, evec : UInt<32>, epc : UInt<32>, host : { flip fromhost : { valid : UInt<1>, bits : UInt<32>}, tohost : UInt<32>}}
  
    node csr_addr = bits(io.inst, 31, 20) @[CSR.scala 100:25]
    node rs1_addr = bits(io.inst, 19, 15) @[CSR.scala 101:25]
    reg time : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[CSR.scala 104:25]
    reg timeh : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[CSR.scala 105:25]
    reg cycle : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[CSR.scala 106:25]
    reg cycleh : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[CSR.scala 107:25]
    reg instret : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[CSR.scala 108:25]
    reg instreth : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[CSR.scala 109:25]
    node _T = cat(UInt<2>("h0"), UInt<4>("h0")) @[Cat.scala 30:58]
    node mcpuid = cat(_T, UInt<26>("h100100")) @[Cat.scala 30:58]
    reg PRV : UInt<2>, clock with :
      reset => (reset, UInt<2>("h3")) @[CSR.scala 118:21]
    reg PRV1 : UInt<2>, clock with :
      reset => (reset, UInt<2>("h3")) @[CSR.scala 119:21]
    reg IE : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[CSR.scala 122:20]
    reg IE1 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[CSR.scala 123:20]
    node _T_1 = cat(IE1, PRV) @[Cat.scala 30:58]
    node _T_2 = cat(_T_1, IE) @[Cat.scala 30:58]
    node _T_3 = cat(UInt<1>("h0"), PRV1) @[Cat.scala 30:58]
    node _T_4 = cat(UInt<1>("h0"), UInt<2>("h0")) @[Cat.scala 30:58]
    node _T_5 = cat(_T_4, _T_3) @[Cat.scala 30:58]
    node _T_6 = cat(_T_5, _T_2) @[Cat.scala 30:58]
    node _T_7 = cat(UInt<2>("h0"), UInt<2>("h0")) @[Cat.scala 30:58]
    node _T_8 = cat(_T_7, UInt<2>("h0")) @[Cat.scala 30:58]
    node _T_9 = cat(UInt<5>("h0"), UInt<1>("h0")) @[Cat.scala 30:58]
    node _T_10 = cat(UInt<1>("h0"), UInt<9>("h0")) @[Cat.scala 30:58]
    node _T_11 = cat(_T_10, _T_9) @[Cat.scala 30:58]
    node _T_12 = cat(_T_11, _T_8) @[Cat.scala 30:58]
    node mstatus = cat(_T_12, _T_6) @[Cat.scala 30:58]
    reg MTIP : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[CSR.scala 139:21]
    reg MTIE : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[CSR.scala 142:21]
    reg MSIP : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[CSR.scala 145:21]
    reg MSIE : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[CSR.scala 148:21]
    node _T_13 = cat(UInt<1>("h0"), UInt<1>("h0")) @[Cat.scala 30:58]
    node _T_14 = cat(MSIP, UInt<1>("h0")) @[Cat.scala 30:58]
    node _T_15 = cat(_T_14, _T_13) @[Cat.scala 30:58]
    node _T_16 = cat(UInt<1>("h0"), UInt<1>("h0")) @[Cat.scala 30:58]
    node _T_17 = cat(UInt<24>("h0"), MTIP) @[Cat.scala 30:58]
    node _T_18 = cat(_T_17, UInt<1>("h0")) @[Cat.scala 30:58]
    node _T_19 = cat(_T_18, _T_16) @[Cat.scala 30:58]
    node mip = cat(_T_19, _T_15) @[Cat.scala 30:58]
    node _T_20 = cat(UInt<1>("h0"), UInt<1>("h0")) @[Cat.scala 30:58]
    node _T_21 = cat(MSIE, UInt<1>("h0")) @[Cat.scala 30:58]
    node _T_22 = cat(_T_21, _T_20) @[Cat.scala 30:58]
    node _T_23 = cat(UInt<1>("h0"), UInt<1>("h0")) @[Cat.scala 30:58]
    node _T_24 = cat(UInt<24>("h0"), MTIE) @[Cat.scala 30:58]
    node _T_25 = cat(_T_24, UInt<1>("h0")) @[Cat.scala 30:58]
    node _T_26 = cat(_T_25, _T_23) @[Cat.scala 30:58]
    node mie = cat(_T_26, _T_22) @[Cat.scala 30:58]
    reg mtimecmp : UInt<32>, clock with :
      reset => (UInt<1>("h0"), mtimecmp) @[CSR.scala 154:21]
    reg mscratch : UInt<32>, clock with :
      reset => (UInt<1>("h0"), mscratch) @[CSR.scala 156:21]
    reg mepc : UInt<32>, clock with :
      reset => (UInt<1>("h0"), mepc) @[CSR.scala 158:17]
    reg mcause : UInt<32>, clock with :
      reset => (UInt<1>("h0"), mcause) @[CSR.scala 159:19]
    reg mbadaddr : UInt<32>, clock with :
      reset => (UInt<1>("h0"), mbadaddr) @[CSR.scala 160:21]
    reg mtohost : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[CSR.scala 162:24]
    reg mfromhost : UInt<32>, clock with :
      reset => (UInt<1>("h0"), mfromhost) @[CSR.scala 163:22]
    io.host.tohost <= mtohost @[CSR.scala 164:18]
    when io.host.fromhost.valid : @[CSR.scala 165:32]
      mfromhost <= io.host.fromhost.bits @[CSR.scala 166:15]
    node _T_27 = and(csr_addr, UInt<12>("hfff")) @[Lookup.scala 31:38]
    node _T_28 = eq(UInt<12>("hc00"), _T_27) @[Lookup.scala 31:38]
    node _T_29 = and(csr_addr, UInt<12>("hfff")) @[Lookup.scala 31:38]
    node _T_30 = eq(UInt<12>("hc01"), _T_29) @[Lookup.scala 31:38]
    node _T_31 = and(csr_addr, UInt<12>("hfff")) @[Lookup.scala 31:38]
    node _T_32 = eq(UInt<12>("hc02"), _T_31) @[Lookup.scala 31:38]
    node _T_33 = and(csr_addr, UInt<12>("hfff")) @[Lookup.scala 31:38]
    node _T_34 = eq(UInt<12>("hc80"), _T_33) @[Lookup.scala 31:38]
    node _T_35 = and(csr_addr, UInt<12>("hfff")) @[Lookup.scala 31:38]
    node _T_36 = eq(UInt<12>("hc81"), _T_35) @[Lookup.scala 31:38]
    node _T_37 = and(csr_addr, UInt<12>("hfff")) @[Lookup.scala 31:38]
    node _T_38 = eq(UInt<12>("hc82"), _T_37) @[Lookup.scala 31:38]
    node _T_39 = and(csr_addr, UInt<12>("hfff")) @[Lookup.scala 31:38]
    node _T_40 = eq(UInt<12>("h900"), _T_39) @[Lookup.scala 31:38]
    node _T_41 = and(csr_addr, UInt<12>("hfff")) @[Lookup.scala 31:38]
    node _T_42 = eq(UInt<12>("h901"), _T_41) @[Lookup.scala 31:38]
    node _T_43 = and(csr_addr, UInt<12>("hfff")) @[Lookup.scala 31:38]
    node _T_44 = eq(UInt<12>("h902"), _T_43) @[Lookup.scala 31:38]
    node _T_45 = and(csr_addr, UInt<12>("hfff")) @[Lookup.scala 31:38]
    node _T_46 = eq(UInt<12>("h980"), _T_45) @[Lookup.scala 31:38]
    node _T_47 = and(csr_addr, UInt<12>("hfff")) @[Lookup.scala 31:38]
    node _T_48 = eq(UInt<12>("h981"), _T_47) @[Lookup.scala 31:38]
    node _T_49 = and(csr_addr, UInt<12>("hfff")) @[Lookup.scala 31:38]
    node _T_50 = eq(UInt<12>("h982"), _T_49) @[Lookup.scala 31:38]
    node _T_51 = and(csr_addr, UInt<12>("hfff")) @[Lookup.scala 31:38]
    node _T_52 = eq(UInt<12>("hf00"), _T_51) @[Lookup.scala 31:38]
    node _T_53 = and(csr_addr, UInt<12>("hfff")) @[Lookup.scala 31:38]
    node _T_54 = eq(UInt<12>("hf01"), _T_53) @[Lookup.scala 31:38]
    node _T_55 = and(csr_addr, UInt<12>("hfff")) @[Lookup.scala 31:38]
    node _T_56 = eq(UInt<12>("hf10"), _T_55) @[Lookup.scala 31:38]
    node _T_57 = and(csr_addr, UInt<12>("hfff")) @[Lookup.scala 31:38]
    node _T_58 = eq(UInt<10>("h301"), _T_57) @[Lookup.scala 31:38]
    node _T_59 = and(csr_addr, UInt<12>("hfff")) @[Lookup.scala 31:38]
    node _T_60 = eq(UInt<10>("h302"), _T_59) @[Lookup.scala 31:38]
    node _T_61 = and(csr_addr, UInt<12>("hfff")) @[Lookup.scala 31:38]
    node _T_62 = eq(UInt<10>("h304"), _T_61) @[Lookup.scala 31:38]
    node _T_63 = and(csr_addr, UInt<12>("hfff")) @[Lookup.scala 31:38]
    node _T_64 = eq(UInt<10>("h321"), _T_63) @[Lookup.scala 31:38]
    node _T_65 = and(csr_addr, UInt<12>("hfff")) @[Lookup.scala 31:38]
    node _T_66 = eq(UInt<11>("h701"), _T_65) @[Lookup.scala 31:38]
    node _T_67 = and(csr_addr, UInt<12>("hfff")) @[Lookup.scala 31:38]
    node _T_68 = eq(UInt<11>("h741"), _T_67) @[Lookup.scala 31:38]
    node _T_69 = and(csr_addr, UInt<12>("hfff")) @[Lookup.scala 31:38]
    node _T_70 = eq(UInt<10>("h340"), _T_69) @[Lookup.scala 31:38]
    node _T_71 = and(csr_addr, UInt<12>("hfff")) @[Lookup.scala 31:38]
    node _T_72 = eq(UInt<10>("h341"), _T_71) @[Lookup.scala 31:38]
    node _T_73 = and(csr_addr, UInt<12>("hfff")) @[Lookup.scala 31:38]
    node _T_74 = eq(UInt<10>("h342"), _T_73) @[Lookup.scala 31:38]
    node _T_75 = and(csr_addr, UInt<12>("hfff")) @[Lookup.scala 31:38]
    node _T_76 = eq(UInt<10>("h343"), _T_75) @[Lookup.scala 31:38]
    node _T_77 = and(csr_addr, UInt<12>("hfff")) @[Lookup.scala 31:38]
    node _T_78 = eq(UInt<10>("h344"), _T_77) @[Lookup.scala 31:38]
    node _T_79 = and(csr_addr, UInt<12>("hfff")) @[Lookup.scala 31:38]
    node _T_80 = eq(UInt<11>("h780"), _T_79) @[Lookup.scala 31:38]
    node _T_81 = and(csr_addr, UInt<12>("hfff")) @[Lookup.scala 31:38]
    node _T_82 = eq(UInt<11>("h781"), _T_81) @[Lookup.scala 31:38]
    node _T_83 = and(csr_addr, UInt<12>("hfff")) @[Lookup.scala 31:38]
    node _T_84 = eq(UInt<10>("h300"), _T_83) @[Lookup.scala 31:38]
    node _T_85 = mux(_T_84, mstatus, UInt<1>("h0")) @[Lookup.scala 33:37]
    node _T_86 = mux(_T_82, mfromhost, _T_85) @[Lookup.scala 33:37]
    node _T_87 = mux(_T_80, mtohost, _T_86) @[Lookup.scala 33:37]
    node _T_88 = mux(_T_78, mip, _T_87) @[Lookup.scala 33:37]
    node _T_89 = mux(_T_76, mbadaddr, _T_88) @[Lookup.scala 33:37]
    node _T_90 = mux(_T_74, mcause, _T_89) @[Lookup.scala 33:37]
    node _T_91 = mux(_T_72, mepc, _T_90) @[Lookup.scala 33:37]
    node _T_92 = mux(_T_70, mscratch, _T_91) @[Lookup.scala 33:37]
    node _T_93 = mux(_T_68, timeh, _T_92) @[Lookup.scala 33:37]
    node _T_94 = mux(_T_66, time, _T_93) @[Lookup.scala 33:37]
    node _T_95 = mux(_T_64, mtimecmp, _T_94) @[Lookup.scala 33:37]
    node _T_96 = mux(_T_62, mie, _T_95) @[Lookup.scala 33:37]
    node _T_97 = mux(_T_60, UInt<32>("h0"), _T_96) @[Lookup.scala 33:37]
    node _T_98 = mux(_T_58, UInt<32>("h100"), _T_97) @[Lookup.scala 33:37]
    node _T_99 = mux(_T_56, UInt<32>("h0"), _T_98) @[Lookup.scala 33:37]
    node _T_100 = mux(_T_54, UInt<32>("h0"), _T_99) @[Lookup.scala 33:37]
    node _T_101 = mux(_T_52, mcpuid, _T_100) @[Lookup.scala 33:37]
    node _T_102 = mux(_T_50, instreth, _T_101) @[Lookup.scala 33:37]
    node _T_103 = mux(_T_48, timeh, _T_102) @[Lookup.scala 33:37]
    node _T_104 = mux(_T_46, cycleh, _T_103) @[Lookup.scala 33:37]
    node _T_105 = mux(_T_44, instret, _T_104) @[Lookup.scala 33:37]
    node _T_106 = mux(_T_42, time, _T_105) @[Lookup.scala 33:37]
    node _T_107 = mux(_T_40, cycle, _T_106) @[Lookup.scala 33:37]
    node _T_108 = mux(_T_38, instreth, _T_107) @[Lookup.scala 33:37]
    node _T_109 = mux(_T_36, timeh, _T_108) @[Lookup.scala 33:37]
    node _T_110 = mux(_T_34, cycleh, _T_109) @[Lookup.scala 33:37]
    node _T_111 = mux(_T_32, instret, _T_110) @[Lookup.scala 33:37]
    node _T_112 = mux(_T_30, time, _T_111) @[Lookup.scala 33:37]
    node _T_113 = mux(_T_28, cycle, _T_112) @[Lookup.scala 33:37]
    io.out <= _T_113 @[CSR.scala 201:10]
    node _T_114 = bits(csr_addr, 9, 8) @[CSR.scala 203:27]
    node privValid = leq(_T_114, PRV) @[CSR.scala 203:34]
    node privInst = eq(io.cmd, UInt<3>("h4")) @[CSR.scala 204:26]
    node _T_115 = bits(csr_addr, 0, 0) @[CSR.scala 205:40]
    node _T_116 = eq(_T_115, UInt<1>("h0")) @[CSR.scala 205:31]
    node _T_117 = and(privInst, _T_116) @[CSR.scala 205:28]
    node _T_118 = bits(csr_addr, 8, 8) @[CSR.scala 205:56]
    node _T_119 = eq(_T_118, UInt<1>("h0")) @[CSR.scala 205:47]
    node isEcall = and(_T_117, _T_119) @[CSR.scala 205:44]
    node _T_120 = bits(csr_addr, 0, 0) @[CSR.scala 206:40]
    node _T_121 = and(privInst, _T_120) @[CSR.scala 206:28]
    node _T_122 = bits(csr_addr, 8, 8) @[CSR.scala 206:56]
    node _T_123 = eq(_T_122, UInt<1>("h0")) @[CSR.scala 206:47]
    node isEbreak = and(_T_121, _T_123) @[CSR.scala 206:44]
    node _T_124 = bits(csr_addr, 0, 0) @[CSR.scala 207:40]
    node _T_125 = eq(_T_124, UInt<1>("h0")) @[CSR.scala 207:31]
    node _T_126 = and(privInst, _T_125) @[CSR.scala 207:28]
    node _T_127 = bits(csr_addr, 8, 8) @[CSR.scala 207:56]
    node isEret = and(_T_126, _T_127) @[CSR.scala 207:44]
    node _T_128 = and(csr_addr, UInt<12>("hfff")) @[CSR.scala 208:37]
    node _T_129 = eq(UInt<12>("hc00"), _T_128) @[CSR.scala 208:37]
    node _T_130 = and(csr_addr, UInt<12>("hfff")) @[CSR.scala 208:37]
    node _T_131 = eq(UInt<12>("hc01"), _T_130) @[CSR.scala 208:37]
    node _T_132 = and(csr_addr, UInt<12>("hfff")) @[CSR.scala 208:37]
    node _T_133 = eq(UInt<12>("hc02"), _T_132) @[CSR.scala 208:37]
    node _T_134 = and(csr_addr, UInt<12>("hfff")) @[CSR.scala 208:37]
    node _T_135 = eq(UInt<12>("hc80"), _T_134) @[CSR.scala 208:37]
    node _T_136 = and(csr_addr, UInt<12>("hfff")) @[CSR.scala 208:37]
    node _T_137 = eq(UInt<12>("hc81"), _T_136) @[CSR.scala 208:37]
    node _T_138 = and(csr_addr, UInt<12>("hfff")) @[CSR.scala 208:37]
    node _T_139 = eq(UInt<12>("hc82"), _T_138) @[CSR.scala 208:37]
    node _T_140 = and(csr_addr, UInt<12>("hfff")) @[CSR.scala 208:37]
    node _T_141 = eq(UInt<12>("h900"), _T_140) @[CSR.scala 208:37]
    node _T_142 = and(csr_addr, UInt<12>("hfff")) @[CSR.scala 208:37]
    node _T_143 = eq(UInt<12>("h901"), _T_142) @[CSR.scala 208:37]
    node _T_144 = and(csr_addr, UInt<12>("hfff")) @[CSR.scala 208:37]
    node _T_145 = eq(UInt<12>("h902"), _T_144) @[CSR.scala 208:37]
    node _T_146 = and(csr_addr, UInt<12>("hfff")) @[CSR.scala 208:37]
    node _T_147 = eq(UInt<12>("h980"), _T_146) @[CSR.scala 208:37]
    node _T_148 = and(csr_addr, UInt<12>("hfff")) @[CSR.scala 208:37]
    node _T_149 = eq(UInt<12>("h981"), _T_148) @[CSR.scala 208:37]
    node _T_150 = and(csr_addr, UInt<12>("hfff")) @[CSR.scala 208:37]
    node _T_151 = eq(UInt<12>("h982"), _T_150) @[CSR.scala 208:37]
    node _T_152 = and(csr_addr, UInt<12>("hfff")) @[CSR.scala 208:37]
    node _T_153 = eq(UInt<12>("hf00"), _T_152) @[CSR.scala 208:37]
    node _T_154 = and(csr_addr, UInt<12>("hfff")) @[CSR.scala 208:37]
    node _T_155 = eq(UInt<12>("hf01"), _T_154) @[CSR.scala 208:37]
    node _T_156 = and(csr_addr, UInt<12>("hfff")) @[CSR.scala 208:37]
    node _T_157 = eq(UInt<12>("hf10"), _T_156) @[CSR.scala 208:37]
    node _T_158 = and(csr_addr, UInt<12>("hfff")) @[CSR.scala 208:37]
    node _T_159 = eq(UInt<10>("h301"), _T_158) @[CSR.scala 208:37]
    node _T_160 = and(csr_addr, UInt<12>("hfff")) @[CSR.scala 208:37]
    node _T_161 = eq(UInt<10>("h302"), _T_160) @[CSR.scala 208:37]
    node _T_162 = and(csr_addr, UInt<12>("hfff")) @[CSR.scala 208:37]
    node _T_163 = eq(UInt<10>("h304"), _T_162) @[CSR.scala 208:37]
    node _T_164 = and(csr_addr, UInt<12>("hfff")) @[CSR.scala 208:37]
    node _T_165 = eq(UInt<10>("h321"), _T_164) @[CSR.scala 208:37]
    node _T_166 = and(csr_addr, UInt<12>("hfff")) @[CSR.scala 208:37]
    node _T_167 = eq(UInt<11>("h701"), _T_166) @[CSR.scala 208:37]
    node _T_168 = and(csr_addr, UInt<12>("hfff")) @[CSR.scala 208:37]
    node _T_169 = eq(UInt<11>("h741"), _T_168) @[CSR.scala 208:37]
    node _T_170 = and(csr_addr, UInt<12>("hfff")) @[CSR.scala 208:37]
    node _T_171 = eq(UInt<10>("h340"), _T_170) @[CSR.scala 208:37]
    node _T_172 = and(csr_addr, UInt<12>("hfff")) @[CSR.scala 208:37]
    node _T_173 = eq(UInt<10>("h341"), _T_172) @[CSR.scala 208:37]
    node _T_174 = and(csr_addr, UInt<12>("hfff")) @[CSR.scala 208:37]
    node _T_175 = eq(UInt<10>("h342"), _T_174) @[CSR.scala 208:37]
    node _T_176 = and(csr_addr, UInt<12>("hfff")) @[CSR.scala 208:37]
    node _T_177 = eq(UInt<10>("h343"), _T_176) @[CSR.scala 208:37]
    node _T_178 = and(csr_addr, UInt<12>("hfff")) @[CSR.scala 208:37]
    node _T_179 = eq(UInt<10>("h344"), _T_178) @[CSR.scala 208:37]
    node _T_180 = and(csr_addr, UInt<12>("hfff")) @[CSR.scala 208:37]
    node _T_181 = eq(UInt<11>("h780"), _T_180) @[CSR.scala 208:37]
    node _T_182 = and(csr_addr, UInt<12>("hfff")) @[CSR.scala 208:37]
    node _T_183 = eq(UInt<11>("h781"), _T_182) @[CSR.scala 208:37]
    node _T_184 = and(csr_addr, UInt<12>("hfff")) @[CSR.scala 208:37]
    node _T_185 = eq(UInt<10>("h300"), _T_184) @[CSR.scala 208:37]
    node _T_186 = or(_T_129, _T_131) @[CSR.scala 208:61]
    node _T_187 = or(_T_186, _T_133) @[CSR.scala 208:61]
    node _T_188 = or(_T_187, _T_135) @[CSR.scala 208:61]
    node _T_189 = or(_T_188, _T_137) @[CSR.scala 208:61]
    node _T_190 = or(_T_189, _T_139) @[CSR.scala 208:61]
    node _T_191 = or(_T_190, _T_141) @[CSR.scala 208:61]
    node _T_192 = or(_T_191, _T_143) @[CSR.scala 208:61]
    node _T_193 = or(_T_192, _T_145) @[CSR.scala 208:61]
    node _T_194 = or(_T_193, _T_147) @[CSR.scala 208:61]
    node _T_195 = or(_T_194, _T_149) @[CSR.scala 208:61]
    node _T_196 = or(_T_195, _T_151) @[CSR.scala 208:61]
    node _T_197 = or(_T_196, _T_153) @[CSR.scala 208:61]
    node _T_198 = or(_T_197, _T_155) @[CSR.scala 208:61]
    node _T_199 = or(_T_198, _T_157) @[CSR.scala 208:61]
    node _T_200 = or(_T_199, _T_159) @[CSR.scala 208:61]
    node _T_201 = or(_T_200, _T_161) @[CSR.scala 208:61]
    node _T_202 = or(_T_201, _T_163) @[CSR.scala 208:61]
    node _T_203 = or(_T_202, _T_165) @[CSR.scala 208:61]
    node _T_204 = or(_T_203, _T_167) @[CSR.scala 208:61]
    node _T_205 = or(_T_204, _T_169) @[CSR.scala 208:61]
    node _T_206 = or(_T_205, _T_171) @[CSR.scala 208:61]
    node _T_207 = or(_T_206, _T_173) @[CSR.scala 208:61]
    node _T_208 = or(_T_207, _T_175) @[CSR.scala 208:61]
    node _T_209 = or(_T_208, _T_177) @[CSR.scala 208:61]
    node _T_210 = or(_T_209, _T_179) @[CSR.scala 208:61]
    node _T_211 = or(_T_210, _T_181) @[CSR.scala 208:61]
    node _T_212 = or(_T_211, _T_183) @[CSR.scala 208:61]
    node csrValid = or(_T_212, _T_185) @[CSR.scala 208:61]
    node _T_213 = bits(csr_addr, 11, 10) @[CSR.scala 209:27]
    node _T_214 = andr(_T_213) @[CSR.scala 209:36]
    node _T_215 = eq(csr_addr, UInt<12>("h301")) @[CSR.scala 209:53]
    node _T_216 = or(_T_214, _T_215) @[CSR.scala 209:41]
    node _T_217 = eq(csr_addr, UInt<12>("h302")) @[CSR.scala 209:79]
    node csrRO = or(_T_216, _T_217) @[CSR.scala 209:67]
    node _T_218 = eq(io.cmd, UInt<3>("h1")) @[CSR.scala 210:26]
    node _T_219 = bits(io.cmd, 1, 1) @[CSR.scala 210:45]
    node _T_220 = orr(rs1_addr) @[CSR.scala 210:61]
    node _T_221 = and(_T_219, _T_220) @[CSR.scala 210:49]
    node wen = or(_T_218, _T_221) @[CSR.scala 210:36]
    node _T_222 = or(io.out, io.in) @[CSR.scala 213:22]
    node _T_223 = not(io.in) @[CSR.scala 214:24]
    node _T_224 = and(io.out, _T_223) @[CSR.scala 214:22]
    node _T_225 = eq(UInt<3>("h1"), io.cmd) @[Mux.scala 80:60]
    node _T_226 = mux(_T_225, io.in, UInt<1>("h0")) @[Mux.scala 80:57]
    node _T_227 = eq(UInt<3>("h2"), io.cmd) @[Mux.scala 80:60]
    node _T_228 = mux(_T_227, _T_222, _T_226) @[Mux.scala 80:57]
    node _T_229 = eq(UInt<3>("h3"), io.cmd) @[Mux.scala 80:60]
    node wdata = mux(_T_229, _T_224, _T_228) @[Mux.scala 80:57]
    node _T_230 = bits(io.addr, 1, 1) @[CSR.scala 216:44]
    node iaddrInvalid = and(io.pc_check, _T_230) @[CSR.scala 216:34]
    node _T_231 = bits(io.addr, 1, 0) @[CSR.scala 218:29]
    node _T_232 = orr(_T_231) @[CSR.scala 218:36]
    node _T_233 = bits(io.addr, 0, 0) @[CSR.scala 218:65]
    node _T_234 = bits(io.addr, 0, 0) @[CSR.scala 218:95]
    node _T_235 = eq(UInt<3>("h1"), io.ld_type) @[Mux.scala 80:60]
    node _T_236 = mux(_T_235, _T_232, UInt<1>("h0")) @[Mux.scala 80:57]
    node _T_237 = eq(UInt<3>("h2"), io.ld_type) @[Mux.scala 80:60]
    node _T_238 = mux(_T_237, _T_233, _T_236) @[Mux.scala 80:57]
    node _T_239 = eq(UInt<3>("h4"), io.ld_type) @[Mux.scala 80:60]
    node laddrInvalid = mux(_T_239, _T_234, _T_238) @[Mux.scala 80:57]
    node _T_240 = bits(io.addr, 1, 0) @[CSR.scala 220:29]
    node _T_241 = orr(_T_240) @[CSR.scala 220:36]
    node _T_242 = bits(io.addr, 0, 0) @[CSR.scala 220:65]
    node _T_243 = eq(UInt<2>("h1"), io.st_type) @[Mux.scala 80:60]
    node _T_244 = mux(_T_243, _T_241, UInt<1>("h0")) @[Mux.scala 80:57]
    node _T_245 = eq(UInt<2>("h2"), io.st_type) @[Mux.scala 80:60]
    node saddrInvalid = mux(_T_245, _T_242, _T_244) @[Mux.scala 80:57]
    node _T_246 = or(io.illegal, iaddrInvalid) @[CSR.scala 221:25]
    node _T_247 = or(_T_246, laddrInvalid) @[CSR.scala 221:41]
    node _T_248 = or(_T_247, saddrInvalid) @[CSR.scala 221:57]
    node _T_249 = bits(io.cmd, 1, 0) @[CSR.scala 222:20]
    node _T_250 = orr(_T_249) @[CSR.scala 222:27]
    node _T_251 = eq(csrValid, UInt<1>("h0")) @[CSR.scala 222:35]
    node _T_252 = eq(privValid, UInt<1>("h0")) @[CSR.scala 222:48]
    node _T_253 = or(_T_251, _T_252) @[CSR.scala 222:45]
    node _T_254 = and(_T_250, _T_253) @[CSR.scala 222:31]
    node _T_255 = or(_T_248, _T_254) @[CSR.scala 221:73]
    node _T_256 = and(wen, csrRO) @[CSR.scala 222:67]
    node _T_257 = or(_T_255, _T_256) @[CSR.scala 222:60]
    node _T_258 = eq(privValid, UInt<1>("h0")) @[CSR.scala 223:27]
    node _T_259 = and(privInst, _T_258) @[CSR.scala 223:24]
    node _T_260 = or(_T_257, _T_259) @[CSR.scala 222:76]
    node _T_261 = or(_T_260, isEcall) @[CSR.scala 223:39]
    node _T_262 = or(_T_261, isEbreak) @[CSR.scala 223:50]
    io.expt <= _T_262 @[CSR.scala 221:11]
    node _T_263 = shl(PRV, 6) @[CSR.scala 224:27]
    node _T_264 = add(UInt<32>("h100"), _T_263) @[CSR.scala 224:20]
    node _T_265 = tail(_T_264, 1) @[CSR.scala 224:20]
    io.evec <= _T_265 @[CSR.scala 224:11]
    io.epc <= mepc @[CSR.scala 225:11]
    node _T_266 = add(time, UInt<1>("h1")) @[CSR.scala 228:16]
    node _T_267 = tail(_T_266, 1) @[CSR.scala 228:16]
    time <= _T_267 @[CSR.scala 228:8]
    node _T_268 = andr(time) @[CSR.scala 229:13]
    when _T_268 : @[CSR.scala 229:19]
      node _T_269 = add(timeh, UInt<1>("h1")) @[CSR.scala 229:36]
      node _T_270 = tail(_T_269, 1) @[CSR.scala 229:36]
      timeh <= _T_270 @[CSR.scala 229:27]
    node _T_271 = add(cycle, UInt<1>("h1")) @[CSR.scala 230:18]
    node _T_272 = tail(_T_271, 1) @[CSR.scala 230:18]
    cycle <= _T_272 @[CSR.scala 230:9]
    node _T_273 = andr(cycle) @[CSR.scala 231:14]
    when _T_273 : @[CSR.scala 231:20]
      node _T_274 = add(cycleh, UInt<1>("h1")) @[CSR.scala 231:39]
      node _T_275 = tail(_T_274, 1) @[CSR.scala 231:39]
      cycleh <= _T_275 @[CSR.scala 231:29]
    node _T_276 = neq(io.inst, UInt<32>("h13")) @[CSR.scala 232:27]
    node _T_277 = eq(io.expt, UInt<1>("h0")) @[CSR.scala 232:52]
    node _T_278 = or(_T_277, isEcall) @[CSR.scala 232:61]
    node _T_279 = or(_T_278, isEbreak) @[CSR.scala 232:72]
    node _T_280 = and(_T_276, _T_279) @[CSR.scala 232:48]
    node _T_281 = eq(io.stall, UInt<1>("h0")) @[CSR.scala 232:88]
    node isInstRet = and(_T_280, _T_281) @[CSR.scala 232:85]
    when isInstRet : @[CSR.scala 233:19]
      node _T_282 = add(instret, UInt<1>("h1")) @[CSR.scala 233:40]
      node _T_283 = tail(_T_282, 1) @[CSR.scala 233:40]
      instret <= _T_283 @[CSR.scala 233:29]
    node _T_284 = andr(instret) @[CSR.scala 234:29]
    node _T_285 = and(isInstRet, _T_284) @[CSR.scala 234:18]
    when _T_285 : @[CSR.scala 234:35]
      node _T_286 = add(instreth, UInt<1>("h1")) @[CSR.scala 234:58]
      node _T_287 = tail(_T_286, 1) @[CSR.scala 234:58]
      instreth <= _T_287 @[CSR.scala 234:46]
    node _T_288 = eq(io.stall, UInt<1>("h0")) @[CSR.scala 236:8]
    when _T_288 : @[CSR.scala 236:19]
      when io.expt : @[CSR.scala 237:19]
        node _T_289 = shr(io.pc, 2) @[CSR.scala 238:23]
        node _T_290 = shl(_T_289, 2) @[CSR.scala 238:28]
        mepc <= _T_290 @[CSR.scala 238:14]
        node _T_291 = add(UInt<4>("h8"), PRV) @[CSR.scala 242:47]
        node _T_292 = tail(_T_291, 1) @[CSR.scala 242:47]
        node _T_293 = mux(isEbreak, UInt<2>("h3"), UInt<2>("h2")) @[CSR.scala 243:20]
        node _T_294 = mux(isEcall, _T_292, _T_293) @[CSR.scala 242:20]
        node _T_295 = mux(saddrInvalid, UInt<3>("h6"), _T_294) @[CSR.scala 241:20]
        node _T_296 = mux(laddrInvalid, UInt<3>("h4"), _T_295) @[CSR.scala 240:20]
        node _T_297 = mux(iaddrInvalid, UInt<1>("h0"), _T_296) @[CSR.scala 239:20]
        mcause <= _T_297 @[CSR.scala 239:14]
        PRV <= UInt<2>("h3") @[CSR.scala 244:12]
        IE <= UInt<1>("h0") @[CSR.scala 245:12]
        PRV1 <= PRV @[CSR.scala 246:12]
        IE1 <= IE @[CSR.scala 247:12]
        node _T_298 = or(iaddrInvalid, laddrInvalid) @[CSR.scala 248:25]
        node _T_299 = or(_T_298, saddrInvalid) @[CSR.scala 248:41]
        when _T_299 : @[CSR.scala 248:58]
          mbadaddr <= io.addr @[CSR.scala 248:69]
      else :
        when isEret : @[CSR.scala 249:24]
          PRV <= PRV1 @[CSR.scala 250:12]
          IE <= IE1 @[CSR.scala 251:12]
          PRV1 <= UInt<2>("h0") @[CSR.scala 252:12]
          IE1 <= UInt<1>("h1") @[CSR.scala 253:12]
        else :
          when wen : @[CSR.scala 254:21]
            node _T_300 = eq(csr_addr, UInt<12>("h300")) @[CSR.scala 255:21]
            when _T_300 : @[CSR.scala 255:38]
              node _T_301 = bits(wdata, 5, 4) @[CSR.scala 256:22]
              PRV1 <= _T_301 @[CSR.scala 256:14]
              node _T_302 = bits(wdata, 3, 3) @[CSR.scala 257:22]
              IE1 <= _T_302 @[CSR.scala 257:14]
              node _T_303 = bits(wdata, 2, 1) @[CSR.scala 258:22]
              PRV <= _T_303 @[CSR.scala 258:14]
              node _T_304 = bits(wdata, 0, 0) @[CSR.scala 259:22]
              IE <= _T_304 @[CSR.scala 259:14]
            else :
              node _T_305 = eq(csr_addr, UInt<12>("h344")) @[CSR.scala 261:26]
              when _T_305 : @[CSR.scala 261:39]
                node _T_306 = bits(wdata, 7, 7) @[CSR.scala 262:22]
                MTIP <= _T_306 @[CSR.scala 262:14]
                node _T_307 = bits(wdata, 3, 3) @[CSR.scala 263:22]
                MSIP <= _T_307 @[CSR.scala 263:14]
              else :
                node _T_308 = eq(csr_addr, UInt<12>("h304")) @[CSR.scala 265:26]
                when _T_308 : @[CSR.scala 265:39]
                  node _T_309 = bits(wdata, 7, 7) @[CSR.scala 266:22]
                  MTIE <= _T_309 @[CSR.scala 266:14]
                  node _T_310 = bits(wdata, 3, 3) @[CSR.scala 267:22]
                  MSIE <= _T_310 @[CSR.scala 267:14]
                else :
                  node _T_311 = eq(csr_addr, UInt<12>("h701")) @[CSR.scala 269:26]
                  when _T_311 : @[CSR.scala 269:41]
                    time <= wdata @[CSR.scala 269:48]
                  else :
                    node _T_312 = eq(csr_addr, UInt<12>("h741")) @[CSR.scala 270:26]
                    when _T_312 : @[CSR.scala 270:42]
                      timeh <= wdata @[CSR.scala 270:50]
                    else :
                      node _T_313 = eq(csr_addr, UInt<12>("h321")) @[CSR.scala 271:26]
                      when _T_313 : @[CSR.scala 271:44]
                        mtimecmp <= wdata @[CSR.scala 271:55]
                      else :
                        node _T_314 = eq(csr_addr, UInt<12>("h340")) @[CSR.scala 272:26]
                        when _T_314 : @[CSR.scala 272:44]
                          mscratch <= wdata @[CSR.scala 272:55]
                        else :
                          node _T_315 = eq(csr_addr, UInt<12>("h341")) @[CSR.scala 273:26]
                          when _T_315 : @[CSR.scala 273:40]
                            node _T_316 = dshr(wdata, UInt<2>("h2")) @[CSR.scala 273:56]
                            node _T_317 = dshl(_T_316, UInt<2>("h2")) @[CSR.scala 273:63]
                            mepc <= _T_317 @[CSR.scala 273:47]
                          else :
                            node _T_318 = eq(csr_addr, UInt<12>("h342")) @[CSR.scala 274:26]
                            when _T_318 : @[CSR.scala 274:42]
                              node _T_319 = and(wdata, UInt<32>("h8000000f")) @[CSR.scala 274:60]
                              mcause <= _T_319 @[CSR.scala 274:51]
                            else :
                              node _T_320 = eq(csr_addr, UInt<12>("h343")) @[CSR.scala 275:26]
                              when _T_320 : @[CSR.scala 275:44]
                                mbadaddr <= wdata @[CSR.scala 275:55]
                              else :
                                node _T_321 = eq(csr_addr, UInt<12>("h780")) @[CSR.scala 276:26]
                                when _T_321 : @[CSR.scala 276:43]
                                  mtohost <= wdata @[CSR.scala 276:53]
                                else :
                                  node _T_322 = eq(csr_addr, UInt<12>("h781")) @[CSR.scala 277:26]
                                  when _T_322 : @[CSR.scala 277:45]
                                    mfromhost <= wdata @[CSR.scala 277:57]
                                  else :
                                    node _T_323 = eq(csr_addr, UInt<12>("h900")) @[CSR.scala 278:26]
                                    when _T_323 : @[CSR.scala 278:42]
                                      cycle <= wdata @[CSR.scala 278:50]
                                    else :
                                      node _T_324 = eq(csr_addr, UInt<12>("h901")) @[CSR.scala 279:26]
                                      when _T_324 : @[CSR.scala 279:41]
                                        time <= wdata @[CSR.scala 279:48]
                                      else :
                                        node _T_325 = eq(csr_addr, UInt<12>("h902")) @[CSR.scala 280:26]
                                        when _T_325 : @[CSR.scala 280:44]
                                          instret <= wdata @[CSR.scala 280:54]
                                        else :
                                          node _T_326 = eq(csr_addr, UInt<12>("h980")) @[CSR.scala 281:26]
                                          when _T_326 : @[CSR.scala 281:43]
                                            cycleh <= wdata @[CSR.scala 281:52]
                                          else :
                                            node _T_327 = eq(csr_addr, UInt<12>("h981")) @[CSR.scala 282:26]
                                            when _T_327 : @[CSR.scala 282:42]
                                              timeh <= wdata @[CSR.scala 282:50]
                                            else :
                                              node _T_328 = eq(csr_addr, UInt<12>("h982")) @[CSR.scala 283:26]
                                              when _T_328 : @[CSR.scala 283:45]
                                                instreth <= wdata @[CSR.scala 283:56]

  module RegFile :
    input clock : Clock
    input reset : Reset
    output io : { flip raddr1 : UInt<5>, flip raddr2 : UInt<5>, rdata1 : UInt<32>, rdata2 : UInt<32>, flip wen : UInt<1>, flip waddr : UInt<5>, flip wdata : UInt<32>}
  
    cmem regs : UInt<32> [32] @[RegFile.scala 20:17]
    node _T = orr(io.raddr1) @[RegFile.scala 21:30]
    infer mport _T_1 = regs[io.raddr1], clock @[RegFile.scala 21:39]
    node _T_2 = mux(_T, _T_1, UInt<1>("h0")) @[RegFile.scala 21:19]
    io.rdata1 <= _T_2 @[RegFile.scala 21:13]
    node _T_3 = orr(io.raddr2) @[RegFile.scala 22:30]
    infer mport _T_4 = regs[io.raddr2], clock @[RegFile.scala 22:39]
    node _T_5 = mux(_T_3, _T_4, UInt<1>("h0")) @[RegFile.scala 22:19]
    io.rdata2 <= _T_5 @[RegFile.scala 22:13]
    node _T_6 = orr(io.waddr) @[RegFile.scala 23:26]
    node _T_7 = and(io.wen, _T_6) @[RegFile.scala 23:15]
    when _T_7 : @[RegFile.scala 23:31]
      infer mport _T_8 = regs[io.waddr], clock @[RegFile.scala 24:9]
      _T_8 <= io.wdata @[RegFile.scala 24:20]

  module ALUArea :
    input clock : Clock
    input reset : Reset
    output io : { flip A : UInt<32>, flip B : UInt<32>, flip alu_op : UInt<4>, out : UInt<32>, sum : UInt<32>}
  
    node _T = bits(io.alu_op, 0, 0) @[ALU.scala 64:33]
    node _T_1 = sub(UInt<1>("h0"), io.B) @[ALU.scala 64:38]
    node _T_2 = tail(_T_1, 1) @[ALU.scala 64:38]
    node _T_3 = mux(_T, _T_2, io.B) @[ALU.scala 64:23]
    node _T_4 = add(io.A, _T_3) @[ALU.scala 64:18]
    node sum = tail(_T_4, 1) @[ALU.scala 64:18]
    node _T_5 = bits(io.A, 31, 31) @[ALU.scala 65:21]
    node _T_6 = bits(io.B, 31, 31) @[ALU.scala 65:38]
    node _T_7 = eq(_T_5, _T_6) @[ALU.scala 65:30]
    node _T_8 = bits(sum, 31, 31) @[ALU.scala 65:51]
    node _T_9 = bits(io.alu_op, 1, 1) @[ALU.scala 66:26]
    node _T_10 = bits(io.B, 31, 31) @[ALU.scala 66:35]
    node _T_11 = bits(io.A, 31, 31) @[ALU.scala 66:49]
    node _T_12 = mux(_T_9, _T_10, _T_11) @[ALU.scala 66:16]
    node cmp = mux(_T_7, _T_8, _T_12) @[ALU.scala 65:16]
    node shamt = bits(io.B, 4, 0) @[ALU.scala 67:20]
    node _T_13 = bits(io.alu_op, 3, 3) @[ALU.scala 68:29]
    node _T_14 = shl(UInt<16>("hffff"), 16) @[Bitwise.scala 102:47]
    node _T_15 = xor(UInt<32>("hffffffff"), _T_14) @[Bitwise.scala 102:21]
    node _T_16 = shr(io.A, 16) @[Bitwise.scala 103:21]
    node _T_17 = and(_T_16, _T_15) @[Bitwise.scala 103:31]
    node _T_18 = bits(io.A, 15, 0) @[Bitwise.scala 103:46]
    node _T_19 = shl(_T_18, 16) @[Bitwise.scala 103:65]
    node _T_20 = not(_T_15) @[Bitwise.scala 103:77]
    node _T_21 = and(_T_19, _T_20) @[Bitwise.scala 103:75]
    node _T_22 = or(_T_17, _T_21) @[Bitwise.scala 103:39]
    node _T_23 = bits(_T_15, 23, 0) @[Bitwise.scala 102:28]
    node _T_24 = shl(_T_23, 8) @[Bitwise.scala 102:47]
    node _T_25 = xor(_T_15, _T_24) @[Bitwise.scala 102:21]
    node _T_26 = shr(_T_22, 8) @[Bitwise.scala 103:21]
    node _T_27 = and(_T_26, _T_25) @[Bitwise.scala 103:31]
    node _T_28 = bits(_T_22, 23, 0) @[Bitwise.scala 103:46]
    node _T_29 = shl(_T_28, 8) @[Bitwise.scala 103:65]
    node _T_30 = not(_T_25) @[Bitwise.scala 103:77]
    node _T_31 = and(_T_29, _T_30) @[Bitwise.scala 103:75]
    node _T_32 = or(_T_27, _T_31) @[Bitwise.scala 103:39]
    node _T_33 = bits(_T_25, 27, 0) @[Bitwise.scala 102:28]
    node _T_34 = shl(_T_33, 4) @[Bitwise.scala 102:47]
    node _T_35 = xor(_T_25, _T_34) @[Bitwise.scala 102:21]
    node _T_36 = shr(_T_32, 4) @[Bitwise.scala 103:21]
    node _T_37 = and(_T_36, _T_35) @[Bitwise.scala 103:31]
    node _T_38 = bits(_T_32, 27, 0) @[Bitwise.scala 103:46]
    node _T_39 = shl(_T_38, 4) @[Bitwise.scala 103:65]
    node _T_40 = not(_T_35) @[Bitwise.scala 103:77]
    node _T_41 = and(_T_39, _T_40) @[Bitwise.scala 103:75]
    node _T_42 = or(_T_37, _T_41) @[Bitwise.scala 103:39]
    node _T_43 = bits(_T_35, 29, 0) @[Bitwise.scala 102:28]
    node _T_44 = shl(_T_43, 2) @[Bitwise.scala 102:47]
    node _T_45 = xor(_T_35, _T_44) @[Bitwise.scala 102:21]
    node _T_46 = shr(_T_42, 2) @[Bitwise.scala 103:21]
    node _T_47 = and(_T_46, _T_45) @[Bitwise.scala 103:31]
    node _T_48 = bits(_T_42, 29, 0) @[Bitwise.scala 103:46]
    node _T_49 = shl(_T_48, 2) @[Bitwise.scala 103:65]
    node _T_50 = not(_T_45) @[Bitwise.scala 103:77]
    node _T_51 = and(_T_49, _T_50) @[Bitwise.scala 103:75]
    node _T_52 = or(_T_47, _T_51) @[Bitwise.scala 103:39]
    node _T_53 = bits(_T_45, 30, 0) @[Bitwise.scala 102:28]
    node _T_54 = shl(_T_53, 1) @[Bitwise.scala 102:47]
    node _T_55 = xor(_T_45, _T_54) @[Bitwise.scala 102:21]
    node _T_56 = shr(_T_52, 1) @[Bitwise.scala 103:21]
    node _T_57 = and(_T_56, _T_55) @[Bitwise.scala 103:31]
    node _T_58 = bits(_T_52, 30, 0) @[Bitwise.scala 103:46]
    node _T_59 = shl(_T_58, 1) @[Bitwise.scala 103:65]
    node _T_60 = not(_T_55) @[Bitwise.scala 103:77]
    node _T_61 = and(_T_59, _T_60) @[Bitwise.scala 103:75]
    node _T_62 = or(_T_57, _T_61) @[Bitwise.scala 103:39]
    node shin = mux(_T_13, io.A, _T_62) @[ALU.scala 68:19]
    node _T_63 = bits(io.alu_op, 0, 0) @[ALU.scala 69:30]
    node _T_64 = bits(shin, 31, 31) @[ALU.scala 69:41]
    node _T_65 = and(_T_63, _T_64) @[ALU.scala 69:34]
    node _T_66 = cat(_T_65, shin) @[Cat.scala 30:58]
    node _T_67 = asSInt(_T_66) @[ALU.scala 69:57]
    node _T_68 = dshr(_T_67, shamt) @[ALU.scala 69:64]
    node shiftr = bits(_T_68, 31, 0) @[ALU.scala 69:73]
    node _T_69 = shl(UInt<16>("hffff"), 16) @[Bitwise.scala 102:47]
    node _T_70 = xor(UInt<32>("hffffffff"), _T_69) @[Bitwise.scala 102:21]
    node _T_71 = shr(shiftr, 16) @[Bitwise.scala 103:21]
    node _T_72 = and(_T_71, _T_70) @[Bitwise.scala 103:31]
    node _T_73 = bits(shiftr, 15, 0) @[Bitwise.scala 103:46]
    node _T_74 = shl(_T_73, 16) @[Bitwise.scala 103:65]
    node _T_75 = not(_T_70) @[Bitwise.scala 103:77]
    node _T_76 = and(_T_74, _T_75) @[Bitwise.scala 103:75]
    node _T_77 = or(_T_72, _T_76) @[Bitwise.scala 103:39]
    node _T_78 = bits(_T_70, 23, 0) @[Bitwise.scala 102:28]
    node _T_79 = shl(_T_78, 8) @[Bitwise.scala 102:47]
    node _T_80 = xor(_T_70, _T_79) @[Bitwise.scala 102:21]
    node _T_81 = shr(_T_77, 8) @[Bitwise.scala 103:21]
    node _T_82 = and(_T_81, _T_80) @[Bitwise.scala 103:31]
    node _T_83 = bits(_T_77, 23, 0) @[Bitwise.scala 103:46]
    node _T_84 = shl(_T_83, 8) @[Bitwise.scala 103:65]
    node _T_85 = not(_T_80) @[Bitwise.scala 103:77]
    node _T_86 = and(_T_84, _T_85) @[Bitwise.scala 103:75]
    node _T_87 = or(_T_82, _T_86) @[Bitwise.scala 103:39]
    node _T_88 = bits(_T_80, 27, 0) @[Bitwise.scala 102:28]
    node _T_89 = shl(_T_88, 4) @[Bitwise.scala 102:47]
    node _T_90 = xor(_T_80, _T_89) @[Bitwise.scala 102:21]
    node _T_91 = shr(_T_87, 4) @[Bitwise.scala 103:21]
    node _T_92 = and(_T_91, _T_90) @[Bitwise.scala 103:31]
    node _T_93 = bits(_T_87, 27, 0) @[Bitwise.scala 103:46]
    node _T_94 = shl(_T_93, 4) @[Bitwise.scala 103:65]
    node _T_95 = not(_T_90) @[Bitwise.scala 103:77]
    node _T_96 = and(_T_94, _T_95) @[Bitwise.scala 103:75]
    node _T_97 = or(_T_92, _T_96) @[Bitwise.scala 103:39]
    node _T_98 = bits(_T_90, 29, 0) @[Bitwise.scala 102:28]
    node _T_99 = shl(_T_98, 2) @[Bitwise.scala 102:47]
    node _T_100 = xor(_T_90, _T_99) @[Bitwise.scala 102:21]
    node _T_101 = shr(_T_97, 2) @[Bitwise.scala 103:21]
    node _T_102 = and(_T_101, _T_100) @[Bitwise.scala 103:31]
    node _T_103 = bits(_T_97, 29, 0) @[Bitwise.scala 103:46]
    node _T_104 = shl(_T_103, 2) @[Bitwise.scala 103:65]
    node _T_105 = not(_T_100) @[Bitwise.scala 103:77]
    node _T_106 = and(_T_104, _T_105) @[Bitwise.scala 103:75]
    node _T_107 = or(_T_102, _T_106) @[Bitwise.scala 103:39]
    node _T_108 = bits(_T_100, 30, 0) @[Bitwise.scala 102:28]
    node _T_109 = shl(_T_108, 1) @[Bitwise.scala 102:47]
    node _T_110 = xor(_T_100, _T_109) @[Bitwise.scala 102:21]
    node _T_111 = shr(_T_107, 1) @[Bitwise.scala 103:21]
    node _T_112 = and(_T_111, _T_110) @[Bitwise.scala 103:31]
    node _T_113 = bits(_T_107, 30, 0) @[Bitwise.scala 103:46]
    node _T_114 = shl(_T_113, 1) @[Bitwise.scala 103:65]
    node _T_115 = not(_T_110) @[Bitwise.scala 103:77]
    node _T_116 = and(_T_114, _T_115) @[Bitwise.scala 103:75]
    node shiftl = or(_T_112, _T_116) @[Bitwise.scala 103:39]
    node _T_117 = eq(io.alu_op, UInt<4>("h0")) @[ALU.scala 73:19]
    node _T_118 = eq(io.alu_op, UInt<4>("h1")) @[ALU.scala 73:44]
    node _T_119 = or(_T_117, _T_118) @[ALU.scala 73:31]
    node _T_120 = eq(io.alu_op, UInt<4>("h5")) @[ALU.scala 74:19]
    node _T_121 = eq(io.alu_op, UInt<4>("h7")) @[ALU.scala 74:44]
    node _T_122 = or(_T_120, _T_121) @[ALU.scala 74:31]
    node _T_123 = eq(io.alu_op, UInt<4>("h9")) @[ALU.scala 75:19]
    node _T_124 = eq(io.alu_op, UInt<4>("h8")) @[ALU.scala 75:44]
    node _T_125 = or(_T_123, _T_124) @[ALU.scala 75:31]
    node _T_126 = eq(io.alu_op, UInt<4>("h6")) @[ALU.scala 76:19]
    node _T_127 = eq(io.alu_op, UInt<4>("h2")) @[ALU.scala 77:19]
    node _T_128 = and(io.A, io.B) @[ALU.scala 77:38]
    node _T_129 = eq(io.alu_op, UInt<4>("h3")) @[ALU.scala 78:19]
    node _T_130 = or(io.A, io.B) @[ALU.scala 78:38]
    node _T_131 = eq(io.alu_op, UInt<4>("h4")) @[ALU.scala 79:19]
    node _T_132 = xor(io.A, io.B) @[ALU.scala 79:38]
    node _T_133 = eq(io.alu_op, UInt<4>("ha")) @[ALU.scala 80:19]
    node _T_134 = mux(_T_133, io.A, io.B) @[ALU.scala 80:8]
    node _T_135 = mux(_T_131, _T_132, _T_134) @[ALU.scala 79:8]
    node _T_136 = mux(_T_129, _T_130, _T_135) @[ALU.scala 78:8]
    node _T_137 = mux(_T_127, _T_128, _T_136) @[ALU.scala 77:8]
    node _T_138 = mux(_T_126, shiftl, _T_137) @[ALU.scala 76:8]
    node _T_139 = mux(_T_125, shiftr, _T_138) @[ALU.scala 75:8]
    node _T_140 = mux(_T_122, cmp, _T_139) @[ALU.scala 74:8]
    node out = mux(_T_119, sum, _T_140) @[ALU.scala 73:8]
    io.out <= out @[ALU.scala 83:10]
    io.sum <= sum @[ALU.scala 84:10]

  module ImmGenWire :
    input clock : Clock
    input reset : Reset
    output io : { flip inst : UInt<32>, flip sel : UInt<3>, out : UInt<32>}
  
    node _T = bits(io.inst, 31, 20) @[ImmGen.scala 21:21]
    node Iimm = asSInt(_T) @[ImmGen.scala 21:30]
    node _T_1 = bits(io.inst, 31, 25) @[ImmGen.scala 22:25]
    node _T_2 = bits(io.inst, 11, 7) @[ImmGen.scala 22:42]
    node _T_3 = cat(_T_1, _T_2) @[Cat.scala 30:58]
    node Simm = asSInt(_T_3) @[ImmGen.scala 22:50]
    node _T_4 = bits(io.inst, 31, 31) @[ImmGen.scala 23:25]
    node _T_5 = bits(io.inst, 7, 7) @[ImmGen.scala 23:38]
    node _T_6 = bits(io.inst, 30, 25) @[ImmGen.scala 23:50]
    node _T_7 = bits(io.inst, 11, 8) @[ImmGen.scala 23:67]
    node _T_8 = cat(_T_7, UInt<1>("h0")) @[Cat.scala 30:58]
    node _T_9 = cat(_T_4, _T_5) @[Cat.scala 30:58]
    node _T_10 = cat(_T_9, _T_6) @[Cat.scala 30:58]
    node _T_11 = cat(_T_10, _T_8) @[Cat.scala 30:58]
    node Bimm = asSInt(_T_11) @[ImmGen.scala 23:86]
    node _T_12 = bits(io.inst, 31, 12) @[ImmGen.scala 24:25]
    node _T_13 = cat(_T_12, UInt<12>("h0")) @[Cat.scala 30:58]
    node Uimm = asSInt(_T_13) @[ImmGen.scala 24:46]
    node _T_14 = bits(io.inst, 31, 31) @[ImmGen.scala 25:25]
    node _T_15 = bits(io.inst, 19, 12) @[ImmGen.scala 25:38]
    node _T_16 = bits(io.inst, 20, 20) @[ImmGen.scala 25:55]
    node _T_17 = bits(io.inst, 30, 25) @[ImmGen.scala 25:68]
    node _T_18 = bits(io.inst, 24, 21) @[ImmGen.scala 25:85]
    node _T_19 = cat(_T_17, _T_18) @[Cat.scala 30:58]
    node _T_20 = cat(_T_19, UInt<1>("h0")) @[Cat.scala 30:58]
    node _T_21 = cat(_T_14, _T_15) @[Cat.scala 30:58]
    node _T_22 = cat(_T_21, _T_16) @[Cat.scala 30:58]
    node _T_23 = cat(_T_22, _T_20) @[Cat.scala 30:58]
    node Jimm = asSInt(_T_23) @[ImmGen.scala 25:105]
    node _T_24 = bits(io.inst, 19, 15) @[ImmGen.scala 26:21]
    node Zimm = cvt(_T_24) @[ImmGen.scala 26:30]
    node _T_25 = and(Iimm, asSInt(UInt<2>("h2"))) @[ImmGen.scala 28:36]
    node _T_26 = asSInt(_T_25) @[ImmGen.scala 28:36]
    node _T_27 = eq(UInt<3>("h1"), io.sel) @[Mux.scala 80:60]
    node _T_28 = mux(_T_27, Iimm, _T_26) @[Mux.scala 80:57]
    node _T_29 = eq(UInt<3>("h2"), io.sel) @[Mux.scala 80:60]
    node _T_30 = mux(_T_29, Simm, _T_28) @[Mux.scala 80:57]
    node _T_31 = eq(UInt<3>("h5"), io.sel) @[Mux.scala 80:60]
    node _T_32 = mux(_T_31, Bimm, _T_30) @[Mux.scala 80:57]
    node _T_33 = eq(UInt<3>("h3"), io.sel) @[Mux.scala 80:60]
    node _T_34 = mux(_T_33, Uimm, _T_32) @[Mux.scala 80:57]
    node _T_35 = eq(UInt<3>("h4"), io.sel) @[Mux.scala 80:60]
    node _T_36 = mux(_T_35, Jimm, _T_34) @[Mux.scala 80:57]
    node _T_37 = eq(UInt<3>("h6"), io.sel) @[Mux.scala 80:60]
    node _T_38 = mux(_T_37, Zimm, _T_36) @[Mux.scala 80:57]
    node _T_39 = asUInt(_T_38) @[ImmGen.scala 29:100]
    io.out <= _T_39 @[ImmGen.scala 28:10]

  module BrCondArea :
    input clock : Clock
    input reset : Reset
    output io : { flip rs1 : UInt<32>, flip rs2 : UInt<32>, flip br_type : UInt<3>, taken : UInt<1>}
  
    node _T = sub(io.rs1, io.rs2) @[BrCond.scala 37:21]
    node diff = tail(_T, 1) @[BrCond.scala 37:21]
    node neq = orr(diff) @[BrCond.scala 38:19]
    node eq = eq(neq, UInt<1>("h0")) @[BrCond.scala 39:14]
    node _T_1 = bits(io.rs1, 31, 31) @[BrCond.scala 40:26]
    node _T_2 = bits(io.rs2, 31, 31) @[BrCond.scala 40:45]
    node isSameSign = eq(_T_1, _T_2) @[BrCond.scala 40:35]
    node _T_3 = bits(diff, 31, 31) @[BrCond.scala 41:34]
    node _T_4 = bits(io.rs1, 31, 31) @[BrCond.scala 41:50]
    node lt = mux(isSameSign, _T_3, _T_4) @[BrCond.scala 41:17]
    node _T_5 = bits(diff, 31, 31) @[BrCond.scala 42:34]
    node _T_6 = bits(io.rs2, 31, 31) @[BrCond.scala 42:50]
    node ltu = mux(isSameSign, _T_5, _T_6) @[BrCond.scala 42:17]
    node ge = eq(lt, UInt<1>("h0")) @[BrCond.scala 43:14]
    node geu = eq(ltu, UInt<1>("h0")) @[BrCond.scala 44:14]
    node _T_7 = eq(io.br_type, UInt<3>("h3")) @[BrCond.scala 46:18]
    node _T_8 = and(_T_7, eq) @[BrCond.scala 46:29]
    node _T_9 = eq(io.br_type, UInt<3>("h6")) @[BrCond.scala 47:18]
    node _T_10 = and(_T_9, neq) @[BrCond.scala 47:29]
    node _T_11 = or(_T_8, _T_10) @[BrCond.scala 46:36]
    node _T_12 = eq(io.br_type, UInt<3>("h2")) @[BrCond.scala 48:18]
    node _T_13 = and(_T_12, lt) @[BrCond.scala 48:29]
    node _T_14 = or(_T_11, _T_13) @[BrCond.scala 47:37]
    node _T_15 = eq(io.br_type, UInt<3>("h5")) @[BrCond.scala 49:18]
    node _T_16 = and(_T_15, ge) @[BrCond.scala 49:29]
    node _T_17 = or(_T_14, _T_16) @[BrCond.scala 48:36]
    node _T_18 = eq(io.br_type, UInt<3>("h1")) @[BrCond.scala 50:18]
    node _T_19 = and(_T_18, ltu) @[BrCond.scala 50:30]
    node _T_20 = or(_T_17, _T_19) @[BrCond.scala 49:36]
    node _T_21 = eq(io.br_type, UInt<3>("h4")) @[BrCond.scala 51:18]
    node _T_22 = and(_T_21, geu) @[BrCond.scala 51:30]
    node _T_23 = or(_T_20, _T_22) @[BrCond.scala 50:38]
    io.taken <= _T_23 @[BrCond.scala 45:12]

  module Datapath :
    input clock : Clock
    input reset : Reset
    output io : { host : { flip fromhost : { valid : UInt<1>, bits : UInt<32>}, tohost : UInt<32>}, flip icache : { flip abort : UInt<1>, flip req : { valid : UInt<1>, bits : { addr : UInt<32>, data : UInt<32>, mask : UInt<4>}}, resp : { valid : UInt<1>, bits : { data : UInt<32>}}}, flip dcache : { flip abort : UInt<1>, flip req : { valid : UInt<1>, bits : { addr : UInt<32>, data : UInt<32>, mask : UInt<4>}}, resp : { valid : UInt<1>, bits : { data : UInt<32>}}}, flip ctrl : { flip inst : UInt<32>, pc_sel : UInt<2>, inst_kill : UInt<1>, A_sel : UInt<1>, B_sel : UInt<1>, imm_sel : UInt<3>, alu_op : UInt<4>, br_type : UInt<3>, st_type : UInt<2>, ld_type : UInt<3>, wb_sel : UInt<2>, wb_en : UInt<1>, csr_cmd : UInt<3>, illegal : UInt<1>}}
  
    inst csr of CSR @[Datapath.scala 23:23]
    csr.clock <= clock
    csr.reset <= reset
    inst regFile of RegFile @[Datapath.scala 24:23]
    regFile.clock <= clock
    regFile.reset <= reset
    inst alu of ALUArea @[Config.scala 13:50]
    alu.clock <= clock
    alu.reset <= reset
    inst immGen of ImmGenWire @[Config.scala 14:50]
    immGen.clock <= clock
    immGen.reset <= reset
    inst brCond of BrCondArea @[Config.scala 15:50]
    brCond.clock <= clock
    brCond.reset <= reset
    reg fe_inst : UInt<32>, clock with :
      reset => (reset, UInt<32>("h13")) @[Datapath.scala 32:24]
    reg fe_pc : UInt, clock with :
      reset => (UInt<1>("h0"), fe_pc) @[Datapath.scala 33:20]
    reg ew_inst : UInt<32>, clock with :
      reset => (reset, UInt<32>("h13")) @[Datapath.scala 36:24]
    reg ew_pc : UInt, clock with :
      reset => (UInt<1>("h0"), ew_pc) @[Datapath.scala 37:20]
    reg ew_alu : UInt, clock with :
      reset => (UInt<1>("h0"), ew_alu) @[Datapath.scala 38:20]
    reg csr_in : UInt, clock with :
      reset => (UInt<1>("h0"), csr_in) @[Datapath.scala 39:20]
    reg st_type : UInt<2>, clock with :
      reset => (UInt<1>("h0"), st_type) @[Datapath.scala 42:21]
    reg ld_type : UInt<3>, clock with :
      reset => (UInt<1>("h0"), ld_type) @[Datapath.scala 43:21]
    reg wb_sel : UInt<2>, clock with :
      reset => (UInt<1>("h0"), wb_sel) @[Datapath.scala 44:21]
    reg wb_en : UInt<1>, clock with :
      reset => (UInt<1>("h0"), wb_en) @[Datapath.scala 45:21]
    reg csr_cmd : UInt<3>, clock with :
      reset => (UInt<1>("h0"), csr_cmd) @[Datapath.scala 46:21]
    reg illegal : UInt<1>, clock with :
      reset => (UInt<1>("h0"), illegal) @[Datapath.scala 47:21]
    reg pc_check : UInt<1>, clock with :
      reset => (UInt<1>("h0"), pc_check) @[Datapath.scala 48:21]
    node _T = asUInt(reset) @[Datapath.scala 51:31]
    reg started : UInt<1>, clock with :
      reset => (UInt<1>("h0"), started) @[Datapath.scala 51:24]
    started <= _T @[Datapath.scala 51:24]
    node _T_1 = eq(io.icache.resp.valid, UInt<1>("h0")) @[Datapath.scala 52:15]
    node _T_2 = eq(io.dcache.resp.valid, UInt<1>("h0")) @[Datapath.scala 52:40]
    node stall = or(_T_1, _T_2) @[Datapath.scala 52:37]
    node _T_3 = sub(UInt<32>("h200"), UInt<32>("h4")) @[Datapath.scala 53:47]
    node _T_4 = tail(_T_3, 1) @[Datapath.scala 53:47]
    reg pc : UInt, clock with :
      reset => (reset, _T_4) @[Datapath.scala 53:21]
    node _T_5 = eq(io.ctrl.pc_sel, UInt<2>("h3")) @[Datapath.scala 55:33]
    node _T_6 = eq(io.ctrl.pc_sel, UInt<2>("h1")) @[Datapath.scala 56:33]
    node _T_7 = or(_T_6, brCond.io.taken) @[Datapath.scala 56:44]
    node _T_8 = dshr(alu.io.sum, UInt<1>("h1")) @[Datapath.scala 56:75]
    node _T_9 = dshl(_T_8, UInt<1>("h1")) @[Datapath.scala 56:82]
    node _T_10 = eq(io.ctrl.pc_sel, UInt<2>("h2")) @[Datapath.scala 57:33]
    node _T_11 = add(pc, UInt<3>("h4")) @[Datapath.scala 57:50]
    node _T_12 = tail(_T_11, 1) @[Datapath.scala 57:50]
    node _T_13 = mux(_T_10, pc, _T_12) @[Datapath.scala 57:17]
    node _T_14 = mux(_T_7, _T_9, _T_13) @[Datapath.scala 56:17]
    node _T_15 = mux(_T_5, csr.io.epc, _T_14) @[Datapath.scala 55:17]
    node _T_16 = mux(csr.io.expt, csr.io.evec, _T_15) @[Datapath.scala 54:32]
    node npc = mux(stall, pc, _T_16) @[Datapath.scala 54:17]
    node _T_17 = or(started, io.ctrl.inst_kill) @[Datapath.scala 58:26]
    node _T_18 = or(_T_17, brCond.io.taken) @[Datapath.scala 58:47]
    node _T_19 = or(_T_18, csr.io.expt) @[Datapath.scala 58:66]
    node inst = mux(_T_19, UInt<32>("h13"), io.icache.resp.bits.data) @[Datapath.scala 58:17]
    pc <= npc @[Datapath.scala 59:27]
    io.icache.req.bits.addr <= npc @[Datapath.scala 60:27]
    io.icache.req.bits.data <= UInt<1>("h0") @[Datapath.scala 61:27]
    io.icache.req.bits.mask <= UInt<1>("h0") @[Datapath.scala 62:27]
    node _T_20 = eq(stall, UInt<1>("h0")) @[Datapath.scala 63:30]
    io.icache.req.valid <= _T_20 @[Datapath.scala 63:27]
    io.icache.abort <= UInt<1>("h0") @[Datapath.scala 64:27]
    node _T_21 = eq(stall, UInt<1>("h0")) @[Datapath.scala 67:9]
    when _T_21 : @[Datapath.scala 67:17]
      fe_pc <= pc @[Datapath.scala 68:13]
      fe_inst <= inst @[Datapath.scala 69:13]
    io.ctrl.inst <= fe_inst @[Datapath.scala 74:17]
    node rd_addr = bits(fe_inst, 11, 7) @[Datapath.scala 77:25]
    node rs1_addr = bits(fe_inst, 19, 15) @[Datapath.scala 78:25]
    node rs2_addr = bits(fe_inst, 24, 20) @[Datapath.scala 79:25]
    regFile.io.raddr1 <= rs1_addr @[Datapath.scala 80:21]
    regFile.io.raddr2 <= rs2_addr @[Datapath.scala 81:21]
    immGen.io.inst <= fe_inst @[Datapath.scala 84:18]
    immGen.io.sel <= io.ctrl.imm_sel @[Datapath.scala 85:18]
    node wb_rd_addr = bits(ew_inst, 11, 7) @[Datapath.scala 88:27]
    node _T_22 = orr(rs1_addr) @[Datapath.scala 89:37]
    node _T_23 = and(wb_en, _T_22) @[Datapath.scala 89:25]
    node _T_24 = eq(rs1_addr, wb_rd_addr) @[Datapath.scala 89:54]
    node rs1hazard = and(_T_23, _T_24) @[Datapath.scala 89:41]
    node _T_25 = orr(rs2_addr) @[Datapath.scala 90:37]
    node _T_26 = and(wb_en, _T_25) @[Datapath.scala 90:25]
    node _T_27 = eq(rs2_addr, wb_rd_addr) @[Datapath.scala 90:54]
    node rs2hazard = and(_T_26, _T_27) @[Datapath.scala 90:41]
    node _T_28 = eq(wb_sel, UInt<2>("h0")) @[Datapath.scala 91:24]
    node _T_29 = and(_T_28, rs1hazard) @[Datapath.scala 91:35]
    node rs1 = mux(_T_29, ew_alu, regFile.io.rdata1) @[Datapath.scala 91:16]
    node _T_30 = eq(wb_sel, UInt<2>("h0")) @[Datapath.scala 92:24]
    node _T_31 = and(_T_30, rs2hazard) @[Datapath.scala 92:35]
    node rs2 = mux(_T_31, ew_alu, regFile.io.rdata2) @[Datapath.scala 92:16]
    node _T_32 = eq(io.ctrl.A_sel, UInt<1>("h1")) @[Datapath.scala 95:33]
    node _T_33 = mux(_T_32, rs1, fe_pc) @[Datapath.scala 95:18]
    alu.io.A <= _T_33 @[Datapath.scala 95:12]
    node _T_34 = eq(io.ctrl.B_sel, UInt<1>("h1")) @[Datapath.scala 96:33]
    node _T_35 = mux(_T_34, rs2, immGen.io.out) @[Datapath.scala 96:18]
    alu.io.B <= _T_35 @[Datapath.scala 96:12]
    alu.io.alu_op <= io.ctrl.alu_op @[Datapath.scala 97:17]
    brCond.io.rs1 <= rs1 @[Datapath.scala 100:17]
    brCond.io.rs2 <= rs2 @[Datapath.scala 101:17]
    brCond.io.br_type <= io.ctrl.br_type @[Datapath.scala 102:21]
    node _T_36 = mux(stall, ew_alu, alu.io.sum) @[Datapath.scala 105:20]
    node _T_37 = dshr(_T_36, UInt<2>("h2")) @[Datapath.scala 105:48]
    node daddr = dshl(_T_37, UInt<2>("h2")) @[Datapath.scala 105:55]
    node _T_38 = bits(alu.io.sum, 1, 1) @[Datapath.scala 106:28]
    node _T_39 = dshl(_T_38, UInt<3>("h4")) @[Datapath.scala 106:32]
    node _T_40 = bits(alu.io.sum, 0, 0) @[Datapath.scala 106:60]
    node _T_41 = dshl(_T_40, UInt<2>("h3")) @[Datapath.scala 106:64]
    node woffset = or(_T_39, _T_41) @[Datapath.scala 106:47]
    node _T_42 = eq(stall, UInt<1>("h0")) @[Datapath.scala 107:30]
    node _T_43 = orr(io.ctrl.st_type) @[Datapath.scala 107:57]
    node _T_44 = orr(io.ctrl.ld_type) @[Datapath.scala 107:80]
    node _T_45 = or(_T_43, _T_44) @[Datapath.scala 107:61]
    node _T_46 = and(_T_42, _T_45) @[Datapath.scala 107:37]
    io.dcache.req.valid <= _T_46 @[Datapath.scala 107:27]
    io.dcache.req.bits.addr <= daddr @[Datapath.scala 108:27]
    node _T_47 = dshl(rs2, woffset) @[Datapath.scala 109:34]
    io.dcache.req.bits.data <= _T_47 @[Datapath.scala 109:27]
    node _T_48 = mux(stall, st_type, io.ctrl.st_type) @[Datapath.scala 110:43]
    node _T_49 = bits(alu.io.sum, 1, 0) @[Datapath.scala 113:36]
    node _T_50 = dshl(UInt<2>("h3"), _T_49) @[Datapath.scala 113:23]
    node _T_51 = bits(alu.io.sum, 1, 0) @[Datapath.scala 114:36]
    node _T_52 = dshl(UInt<1>("h1"), _T_51) @[Datapath.scala 114:23]
    node _T_53 = eq(UInt<2>("h1"), _T_48) @[Mux.scala 80:60]
    node _T_54 = mux(_T_53, UInt<4>("hf"), UInt<1>("h0")) @[Mux.scala 80:57]
    node _T_55 = eq(UInt<2>("h2"), _T_48) @[Mux.scala 80:60]
    node _T_56 = mux(_T_55, _T_50, _T_54) @[Mux.scala 80:57]
    node _T_57 = eq(UInt<2>("h3"), _T_48) @[Mux.scala 80:60]
    node _T_58 = mux(_T_57, _T_52, _T_56) @[Mux.scala 80:57]
    io.dcache.req.bits.mask <= _T_58 @[Datapath.scala 110:27]
    node _T_59 = asUInt(reset) @[Datapath.scala 117:14]
    node _T_60 = eq(stall, UInt<1>("h0")) @[Datapath.scala 117:24]
    node _T_61 = and(_T_60, csr.io.expt) @[Datapath.scala 117:31]
    node _T_62 = or(_T_59, _T_61) @[Datapath.scala 117:21]
    when _T_62 : @[Datapath.scala 117:47]
      st_type <= UInt<1>("h0") @[Datapath.scala 118:15]
      ld_type <= UInt<1>("h0") @[Datapath.scala 119:15]
      wb_en <= UInt<1>("h0") @[Datapath.scala 120:15]
      csr_cmd <= UInt<1>("h0") @[Datapath.scala 121:15]
      illegal <= UInt<1>("h0") @[Datapath.scala 122:15]
      pc_check <= UInt<1>("h0") @[Datapath.scala 123:15]
    else :
      node _T_63 = eq(stall, UInt<1>("h0")) @[Datapath.scala 124:14]
      node _T_64 = eq(csr.io.expt, UInt<1>("h0")) @[Datapath.scala 124:24]
      node _T_65 = and(_T_63, _T_64) @[Datapath.scala 124:21]
      when _T_65 : @[Datapath.scala 124:38]
        ew_pc <= fe_pc @[Datapath.scala 125:15]
        ew_inst <= fe_inst @[Datapath.scala 126:15]
        ew_alu <= alu.io.out @[Datapath.scala 127:15]
        node _T_66 = eq(io.ctrl.imm_sel, UInt<3>("h6")) @[Datapath.scala 128:38]
        node _T_67 = mux(_T_66, immGen.io.out, rs1) @[Datapath.scala 128:21]
        csr_in <= _T_67 @[Datapath.scala 128:15]
        st_type <= io.ctrl.st_type @[Datapath.scala 129:15]
        ld_type <= io.ctrl.ld_type @[Datapath.scala 130:15]
        wb_sel <= io.ctrl.wb_sel @[Datapath.scala 131:15]
        wb_en <= io.ctrl.wb_en @[Datapath.scala 132:15]
        csr_cmd <= io.ctrl.csr_cmd @[Datapath.scala 133:15]
        illegal <= io.ctrl.illegal @[Datapath.scala 134:15]
        node _T_68 = eq(io.ctrl.pc_sel, UInt<2>("h1")) @[Datapath.scala 135:33]
        pc_check <= _T_68 @[Datapath.scala 135:15]
    node _T_69 = bits(ew_alu, 1, 1) @[Datapath.scala 139:24]
    node _T_70 = dshl(_T_69, UInt<3>("h4")) @[Datapath.scala 139:28]
    node _T_71 = bits(ew_alu, 0, 0) @[Datapath.scala 139:52]
    node _T_72 = dshl(_T_71, UInt<2>("h3")) @[Datapath.scala 139:56]
    node loffset = or(_T_70, _T_72) @[Datapath.scala 139:43]
    node lshift = dshr(io.dcache.resp.bits.data, loffset) @[Datapath.scala 140:42]
    node _T_73 = cvt(io.dcache.resp.bits.data) @[Datapath.scala 141:61]
    node _T_74 = bits(lshift, 15, 0) @[Datapath.scala 142:21]
    node _T_75 = asSInt(_T_74) @[Datapath.scala 142:29]
    node _T_76 = bits(lshift, 7, 0) @[Datapath.scala 142:53]
    node _T_77 = asSInt(_T_76) @[Datapath.scala 142:60]
    node _T_78 = bits(lshift, 15, 0) @[Datapath.scala 143:21]
    node _T_79 = cvt(_T_78) @[Datapath.scala 143:29]
    node _T_80 = bits(lshift, 7, 0) @[Datapath.scala 143:53]
    node _T_81 = cvt(_T_80) @[Datapath.scala 143:60]
    node _T_82 = eq(UInt<3>("h2"), ld_type) @[Mux.scala 80:60]
    node _T_83 = mux(_T_82, _T_75, _T_73) @[Mux.scala 80:57]
    node _T_84 = eq(UInt<3>("h3"), ld_type) @[Mux.scala 80:60]
    node _T_85 = mux(_T_84, _T_77, _T_83) @[Mux.scala 80:57]
    node _T_86 = eq(UInt<3>("h4"), ld_type) @[Mux.scala 80:60]
    node _T_87 = mux(_T_86, _T_79, _T_85) @[Mux.scala 80:57]
    node _T_88 = eq(UInt<3>("h5"), ld_type) @[Mux.scala 80:60]
    node load = mux(_T_88, _T_81, _T_87) @[Mux.scala 80:57]
    csr.io.stall <= stall @[Datapath.scala 146:19]
    csr.io.in <= csr_in @[Datapath.scala 147:19]
    csr.io.cmd <= csr_cmd @[Datapath.scala 148:19]
    csr.io.inst <= ew_inst @[Datapath.scala 149:19]
    csr.io.pc <= ew_pc @[Datapath.scala 150:19]
    csr.io.addr <= ew_alu @[Datapath.scala 151:19]
    csr.io.illegal <= illegal @[Datapath.scala 152:19]
    csr.io.pc_check <= pc_check @[Datapath.scala 153:19]
    csr.io.ld_type <= ld_type @[Datapath.scala 154:19]
    csr.io.st_type <= st_type @[Datapath.scala 155:19]
    io.host.tohost <= csr.io.host.tohost @[Datapath.scala 156:11]
    csr.io.host.fromhost.bits <= io.host.fromhost.bits @[Datapath.scala 156:11]
    csr.io.host.fromhost.valid <= io.host.fromhost.valid @[Datapath.scala 156:11]
    node _T_89 = cvt(ew_alu) @[Datapath.scala 159:43]
    node _T_90 = add(ew_pc, UInt<3>("h4")) @[Datapath.scala 161:22]
    node _T_91 = tail(_T_90, 1) @[Datapath.scala 161:22]
    node _T_92 = cvt(_T_91) @[Datapath.scala 161:29]
    node _T_93 = cvt(csr.io.out) @[Datapath.scala 162:26]
    node _T_94 = eq(UInt<2>("h1"), wb_sel) @[Mux.scala 80:60]
    node _T_95 = mux(_T_94, load, _T_89) @[Mux.scala 80:57]
    node _T_96 = eq(UInt<2>("h2"), wb_sel) @[Mux.scala 80:60]
    node _T_97 = mux(_T_96, _T_92, _T_95) @[Mux.scala 80:57]
    node _T_98 = eq(UInt<2>("h3"), wb_sel) @[Mux.scala 80:60]
    node _T_99 = mux(_T_98, _T_93, _T_97) @[Mux.scala 80:57]
    node regWrite = asUInt(_T_99) @[Datapath.scala 162:34]
    node _T_100 = eq(stall, UInt<1>("h0")) @[Datapath.scala 164:32]
    node _T_101 = and(wb_en, _T_100) @[Datapath.scala 164:29]
    node _T_102 = eq(csr.io.expt, UInt<1>("h0")) @[Datapath.scala 164:42]
    node _T_103 = and(_T_101, _T_102) @[Datapath.scala 164:39]
    regFile.io.wen <= _T_103 @[Datapath.scala 164:20]
    regFile.io.waddr <= wb_rd_addr @[Datapath.scala 165:20]
    regFile.io.wdata <= regWrite @[Datapath.scala 166:20]
    io.dcache.abort <= csr.io.expt @[Datapath.scala 169:19]

  module Control :
    input clock : Clock
    input reset : Reset
    output io : { flip inst : UInt<32>, pc_sel : UInt<2>, inst_kill : UInt<1>, A_sel : UInt<1>, B_sel : UInt<1>, imm_sel : UInt<3>, alu_op : UInt<4>, br_type : UInt<3>, st_type : UInt<2>, ld_type : UInt<3>, wb_sel : UInt<2>, wb_en : UInt<1>, csr_cmd : UInt<3>, illegal : UInt<1>}
  
    node _T = and(io.inst, UInt<7>("h7f")) @[Lookup.scala 31:38]
    node _T_1 = eq(UInt<6>("h37"), _T) @[Lookup.scala 31:38]
    node _T_2 = and(io.inst, UInt<7>("h7f")) @[Lookup.scala 31:38]
    node _T_3 = eq(UInt<5>("h17"), _T_2) @[Lookup.scala 31:38]
    node _T_4 = and(io.inst, UInt<7>("h7f")) @[Lookup.scala 31:38]
    node _T_5 = eq(UInt<7>("h6f"), _T_4) @[Lookup.scala 31:38]
    node _T_6 = and(io.inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _T_7 = eq(UInt<7>("h67"), _T_6) @[Lookup.scala 31:38]
    node _T_8 = and(io.inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _T_9 = eq(UInt<7>("h63"), _T_8) @[Lookup.scala 31:38]
    node _T_10 = and(io.inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _T_11 = eq(UInt<13>("h1063"), _T_10) @[Lookup.scala 31:38]
    node _T_12 = and(io.inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _T_13 = eq(UInt<15>("h4063"), _T_12) @[Lookup.scala 31:38]
    node _T_14 = and(io.inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _T_15 = eq(UInt<15>("h5063"), _T_14) @[Lookup.scala 31:38]
    node _T_16 = and(io.inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _T_17 = eq(UInt<15>("h6063"), _T_16) @[Lookup.scala 31:38]
    node _T_18 = and(io.inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _T_19 = eq(UInt<15>("h7063"), _T_18) @[Lookup.scala 31:38]
    node _T_20 = and(io.inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _T_21 = eq(UInt<2>("h3"), _T_20) @[Lookup.scala 31:38]
    node _T_22 = and(io.inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _T_23 = eq(UInt<13>("h1003"), _T_22) @[Lookup.scala 31:38]
    node _T_24 = and(io.inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _T_25 = eq(UInt<14>("h2003"), _T_24) @[Lookup.scala 31:38]
    node _T_26 = and(io.inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _T_27 = eq(UInt<15>("h4003"), _T_26) @[Lookup.scala 31:38]
    node _T_28 = and(io.inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _T_29 = eq(UInt<15>("h5003"), _T_28) @[Lookup.scala 31:38]
    node _T_30 = and(io.inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _T_31 = eq(UInt<6>("h23"), _T_30) @[Lookup.scala 31:38]
    node _T_32 = and(io.inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _T_33 = eq(UInt<13>("h1023"), _T_32) @[Lookup.scala 31:38]
    node _T_34 = and(io.inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _T_35 = eq(UInt<14>("h2023"), _T_34) @[Lookup.scala 31:38]
    node _T_36 = and(io.inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _T_37 = eq(UInt<5>("h13"), _T_36) @[Lookup.scala 31:38]
    node _T_38 = and(io.inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _T_39 = eq(UInt<14>("h2013"), _T_38) @[Lookup.scala 31:38]
    node _T_40 = and(io.inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _T_41 = eq(UInt<14>("h3013"), _T_40) @[Lookup.scala 31:38]
    node _T_42 = and(io.inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _T_43 = eq(UInt<15>("h4013"), _T_42) @[Lookup.scala 31:38]
    node _T_44 = and(io.inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _T_45 = eq(UInt<15>("h6013"), _T_44) @[Lookup.scala 31:38]
    node _T_46 = and(io.inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _T_47 = eq(UInt<15>("h7013"), _T_46) @[Lookup.scala 31:38]
    node _T_48 = and(io.inst, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _T_49 = eq(UInt<13>("h1013"), _T_48) @[Lookup.scala 31:38]
    node _T_50 = and(io.inst, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _T_51 = eq(UInt<15>("h5013"), _T_50) @[Lookup.scala 31:38]
    node _T_52 = and(io.inst, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _T_53 = eq(UInt<31>("h40005013"), _T_52) @[Lookup.scala 31:38]
    node _T_54 = and(io.inst, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _T_55 = eq(UInt<6>("h33"), _T_54) @[Lookup.scala 31:38]
    node _T_56 = and(io.inst, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _T_57 = eq(UInt<31>("h40000033"), _T_56) @[Lookup.scala 31:38]
    node _T_58 = and(io.inst, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _T_59 = eq(UInt<13>("h1033"), _T_58) @[Lookup.scala 31:38]
    node _T_60 = and(io.inst, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _T_61 = eq(UInt<14>("h2033"), _T_60) @[Lookup.scala 31:38]
    node _T_62 = and(io.inst, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _T_63 = eq(UInt<14>("h3033"), _T_62) @[Lookup.scala 31:38]
    node _T_64 = and(io.inst, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _T_65 = eq(UInt<15>("h4033"), _T_64) @[Lookup.scala 31:38]
    node _T_66 = and(io.inst, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _T_67 = eq(UInt<15>("h5033"), _T_66) @[Lookup.scala 31:38]
    node _T_68 = and(io.inst, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _T_69 = eq(UInt<31>("h40005033"), _T_68) @[Lookup.scala 31:38]
    node _T_70 = and(io.inst, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _T_71 = eq(UInt<15>("h6033"), _T_70) @[Lookup.scala 31:38]
    node _T_72 = and(io.inst, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _T_73 = eq(UInt<15>("h7033"), _T_72) @[Lookup.scala 31:38]
    node _T_74 = and(io.inst, UInt<32>("hf00fffff")) @[Lookup.scala 31:38]
    node _T_75 = eq(UInt<4>("hf"), _T_74) @[Lookup.scala 31:38]
    node _T_76 = and(io.inst, UInt<32>("hffffffff")) @[Lookup.scala 31:38]
    node _T_77 = eq(UInt<13>("h100f"), _T_76) @[Lookup.scala 31:38]
    node _T_78 = and(io.inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _T_79 = eq(UInt<13>("h1073"), _T_78) @[Lookup.scala 31:38]
    node _T_80 = and(io.inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _T_81 = eq(UInt<14>("h2073"), _T_80) @[Lookup.scala 31:38]
    node _T_82 = and(io.inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _T_83 = eq(UInt<14>("h3073"), _T_82) @[Lookup.scala 31:38]
    node _T_84 = and(io.inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _T_85 = eq(UInt<15>("h5073"), _T_84) @[Lookup.scala 31:38]
    node _T_86 = and(io.inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _T_87 = eq(UInt<15>("h6073"), _T_86) @[Lookup.scala 31:38]
    node _T_88 = and(io.inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _T_89 = eq(UInt<15>("h7073"), _T_88) @[Lookup.scala 31:38]
    node _T_90 = and(io.inst, UInt<32>("hffffffff")) @[Lookup.scala 31:38]
    node _T_91 = eq(UInt<7>("h73"), _T_90) @[Lookup.scala 31:38]
    node _T_92 = and(io.inst, UInt<32>("hffffffff")) @[Lookup.scala 31:38]
    node _T_93 = eq(UInt<21>("h100073"), _T_92) @[Lookup.scala 31:38]
    node _T_94 = and(io.inst, UInt<32>("hffffffff")) @[Lookup.scala 31:38]
    node _T_95 = eq(UInt<29>("h10000073"), _T_94) @[Lookup.scala 31:38]
    node _T_96 = and(io.inst, UInt<32>("hffffffff")) @[Lookup.scala 31:38]
    node _T_97 = eq(UInt<29>("h10200073"), _T_96) @[Lookup.scala 31:38]
    node _T_98 = mux(_T_97, UInt<2>("h0"), UInt<2>("h0")) @[Lookup.scala 33:37]
    node _T_99 = mux(_T_95, UInt<2>("h3"), _T_98) @[Lookup.scala 33:37]
    node _T_100 = mux(_T_93, UInt<2>("h0"), _T_99) @[Lookup.scala 33:37]
    node _T_101 = mux(_T_91, UInt<2>("h0"), _T_100) @[Lookup.scala 33:37]
    node _T_102 = mux(_T_89, UInt<2>("h2"), _T_101) @[Lookup.scala 33:37]
    node _T_103 = mux(_T_87, UInt<2>("h2"), _T_102) @[Lookup.scala 33:37]
    node _T_104 = mux(_T_85, UInt<2>("h2"), _T_103) @[Lookup.scala 33:37]
    node _T_105 = mux(_T_83, UInt<2>("h2"), _T_104) @[Lookup.scala 33:37]
    node _T_106 = mux(_T_81, UInt<2>("h2"), _T_105) @[Lookup.scala 33:37]
    node _T_107 = mux(_T_79, UInt<2>("h2"), _T_106) @[Lookup.scala 33:37]
    node _T_108 = mux(_T_77, UInt<2>("h2"), _T_107) @[Lookup.scala 33:37]
    node _T_109 = mux(_T_75, UInt<2>("h0"), _T_108) @[Lookup.scala 33:37]
    node _T_110 = mux(_T_73, UInt<2>("h0"), _T_109) @[Lookup.scala 33:37]
    node _T_111 = mux(_T_71, UInt<2>("h0"), _T_110) @[Lookup.scala 33:37]
    node _T_112 = mux(_T_69, UInt<2>("h0"), _T_111) @[Lookup.scala 33:37]
    node _T_113 = mux(_T_67, UInt<2>("h0"), _T_112) @[Lookup.scala 33:37]
    node _T_114 = mux(_T_65, UInt<2>("h0"), _T_113) @[Lookup.scala 33:37]
    node _T_115 = mux(_T_63, UInt<2>("h0"), _T_114) @[Lookup.scala 33:37]
    node _T_116 = mux(_T_61, UInt<2>("h0"), _T_115) @[Lookup.scala 33:37]
    node _T_117 = mux(_T_59, UInt<2>("h0"), _T_116) @[Lookup.scala 33:37]
    node _T_118 = mux(_T_57, UInt<2>("h0"), _T_117) @[Lookup.scala 33:37]
    node _T_119 = mux(_T_55, UInt<2>("h0"), _T_118) @[Lookup.scala 33:37]
    node _T_120 = mux(_T_53, UInt<2>("h0"), _T_119) @[Lookup.scala 33:37]
    node _T_121 = mux(_T_51, UInt<2>("h0"), _T_120) @[Lookup.scala 33:37]
    node _T_122 = mux(_T_49, UInt<2>("h0"), _T_121) @[Lookup.scala 33:37]
    node _T_123 = mux(_T_47, UInt<2>("h0"), _T_122) @[Lookup.scala 33:37]
    node _T_124 = mux(_T_45, UInt<2>("h0"), _T_123) @[Lookup.scala 33:37]
    node _T_125 = mux(_T_43, UInt<2>("h0"), _T_124) @[Lookup.scala 33:37]
    node _T_126 = mux(_T_41, UInt<2>("h0"), _T_125) @[Lookup.scala 33:37]
    node _T_127 = mux(_T_39, UInt<2>("h0"), _T_126) @[Lookup.scala 33:37]
    node _T_128 = mux(_T_37, UInt<2>("h0"), _T_127) @[Lookup.scala 33:37]
    node _T_129 = mux(_T_35, UInt<2>("h0"), _T_128) @[Lookup.scala 33:37]
    node _T_130 = mux(_T_33, UInt<2>("h0"), _T_129) @[Lookup.scala 33:37]
    node _T_131 = mux(_T_31, UInt<2>("h0"), _T_130) @[Lookup.scala 33:37]
    node _T_132 = mux(_T_29, UInt<2>("h2"), _T_131) @[Lookup.scala 33:37]
    node _T_133 = mux(_T_27, UInt<2>("h2"), _T_132) @[Lookup.scala 33:37]
    node _T_134 = mux(_T_25, UInt<2>("h2"), _T_133) @[Lookup.scala 33:37]
    node _T_135 = mux(_T_23, UInt<2>("h2"), _T_134) @[Lookup.scala 33:37]
    node _T_136 = mux(_T_21, UInt<2>("h2"), _T_135) @[Lookup.scala 33:37]
    node _T_137 = mux(_T_19, UInt<2>("h0"), _T_136) @[Lookup.scala 33:37]
    node _T_138 = mux(_T_17, UInt<2>("h0"), _T_137) @[Lookup.scala 33:37]
    node _T_139 = mux(_T_15, UInt<2>("h0"), _T_138) @[Lookup.scala 33:37]
    node _T_140 = mux(_T_13, UInt<2>("h0"), _T_139) @[Lookup.scala 33:37]
    node _T_141 = mux(_T_11, UInt<2>("h0"), _T_140) @[Lookup.scala 33:37]
    node _T_142 = mux(_T_9, UInt<2>("h0"), _T_141) @[Lookup.scala 33:37]
    node _T_143 = mux(_T_7, UInt<2>("h1"), _T_142) @[Lookup.scala 33:37]
    node _T_144 = mux(_T_5, UInt<2>("h1"), _T_143) @[Lookup.scala 33:37]
    node _T_145 = mux(_T_3, UInt<2>("h0"), _T_144) @[Lookup.scala 33:37]
    node ctrlSignals_0 = mux(_T_1, UInt<2>("h0"), _T_145) @[Lookup.scala 33:37]
    node _T_146 = mux(_T_97, UInt<1>("h0"), UInt<1>("h0")) @[Lookup.scala 33:37]
    node _T_147 = mux(_T_95, UInt<1>("h0"), _T_146) @[Lookup.scala 33:37]
    node _T_148 = mux(_T_93, UInt<1>("h0"), _T_147) @[Lookup.scala 33:37]
    node _T_149 = mux(_T_91, UInt<1>("h0"), _T_148) @[Lookup.scala 33:37]
    node _T_150 = mux(_T_89, UInt<1>("h0"), _T_149) @[Lookup.scala 33:37]
    node _T_151 = mux(_T_87, UInt<1>("h0"), _T_150) @[Lookup.scala 33:37]
    node _T_152 = mux(_T_85, UInt<1>("h0"), _T_151) @[Lookup.scala 33:37]
    node _T_153 = mux(_T_83, UInt<1>("h1"), _T_152) @[Lookup.scala 33:37]
    node _T_154 = mux(_T_81, UInt<1>("h1"), _T_153) @[Lookup.scala 33:37]
    node _T_155 = mux(_T_79, UInt<1>("h1"), _T_154) @[Lookup.scala 33:37]
    node _T_156 = mux(_T_77, UInt<1>("h0"), _T_155) @[Lookup.scala 33:37]
    node _T_157 = mux(_T_75, UInt<1>("h0"), _T_156) @[Lookup.scala 33:37]
    node _T_158 = mux(_T_73, UInt<1>("h1"), _T_157) @[Lookup.scala 33:37]
    node _T_159 = mux(_T_71, UInt<1>("h1"), _T_158) @[Lookup.scala 33:37]
    node _T_160 = mux(_T_69, UInt<1>("h1"), _T_159) @[Lookup.scala 33:37]
    node _T_161 = mux(_T_67, UInt<1>("h1"), _T_160) @[Lookup.scala 33:37]
    node _T_162 = mux(_T_65, UInt<1>("h1"), _T_161) @[Lookup.scala 33:37]
    node _T_163 = mux(_T_63, UInt<1>("h1"), _T_162) @[Lookup.scala 33:37]
    node _T_164 = mux(_T_61, UInt<1>("h1"), _T_163) @[Lookup.scala 33:37]
    node _T_165 = mux(_T_59, UInt<1>("h1"), _T_164) @[Lookup.scala 33:37]
    node _T_166 = mux(_T_57, UInt<1>("h1"), _T_165) @[Lookup.scala 33:37]
    node _T_167 = mux(_T_55, UInt<1>("h1"), _T_166) @[Lookup.scala 33:37]
    node _T_168 = mux(_T_53, UInt<1>("h1"), _T_167) @[Lookup.scala 33:37]
    node _T_169 = mux(_T_51, UInt<1>("h1"), _T_168) @[Lookup.scala 33:37]
    node _T_170 = mux(_T_49, UInt<1>("h1"), _T_169) @[Lookup.scala 33:37]
    node _T_171 = mux(_T_47, UInt<1>("h1"), _T_170) @[Lookup.scala 33:37]
    node _T_172 = mux(_T_45, UInt<1>("h1"), _T_171) @[Lookup.scala 33:37]
    node _T_173 = mux(_T_43, UInt<1>("h1"), _T_172) @[Lookup.scala 33:37]
    node _T_174 = mux(_T_41, UInt<1>("h1"), _T_173) @[Lookup.scala 33:37]
    node _T_175 = mux(_T_39, UInt<1>("h1"), _T_174) @[Lookup.scala 33:37]
    node _T_176 = mux(_T_37, UInt<1>("h1"), _T_175) @[Lookup.scala 33:37]
    node _T_177 = mux(_T_35, UInt<1>("h1"), _T_176) @[Lookup.scala 33:37]
    node _T_178 = mux(_T_33, UInt<1>("h1"), _T_177) @[Lookup.scala 33:37]
    node _T_179 = mux(_T_31, UInt<1>("h1"), _T_178) @[Lookup.scala 33:37]
    node _T_180 = mux(_T_29, UInt<1>("h1"), _T_179) @[Lookup.scala 33:37]
    node _T_181 = mux(_T_27, UInt<1>("h1"), _T_180) @[Lookup.scala 33:37]
    node _T_182 = mux(_T_25, UInt<1>("h1"), _T_181) @[Lookup.scala 33:37]
    node _T_183 = mux(_T_23, UInt<1>("h1"), _T_182) @[Lookup.scala 33:37]
    node _T_184 = mux(_T_21, UInt<1>("h1"), _T_183) @[Lookup.scala 33:37]
    node _T_185 = mux(_T_19, UInt<1>("h0"), _T_184) @[Lookup.scala 33:37]
    node _T_186 = mux(_T_17, UInt<1>("h0"), _T_185) @[Lookup.scala 33:37]
    node _T_187 = mux(_T_15, UInt<1>("h0"), _T_186) @[Lookup.scala 33:37]
    node _T_188 = mux(_T_13, UInt<1>("h0"), _T_187) @[Lookup.scala 33:37]
    node _T_189 = mux(_T_11, UInt<1>("h0"), _T_188) @[Lookup.scala 33:37]
    node _T_190 = mux(_T_9, UInt<1>("h0"), _T_189) @[Lookup.scala 33:37]
    node _T_191 = mux(_T_7, UInt<1>("h1"), _T_190) @[Lookup.scala 33:37]
    node _T_192 = mux(_T_5, UInt<1>("h0"), _T_191) @[Lookup.scala 33:37]
    node _T_193 = mux(_T_3, UInt<1>("h0"), _T_192) @[Lookup.scala 33:37]
    node ctrlSignals_1 = mux(_T_1, UInt<1>("h0"), _T_193) @[Lookup.scala 33:37]
    node _T_194 = mux(_T_97, UInt<1>("h0"), UInt<1>("h0")) @[Lookup.scala 33:37]
    node _T_195 = mux(_T_95, UInt<1>("h0"), _T_194) @[Lookup.scala 33:37]
    node _T_196 = mux(_T_93, UInt<1>("h0"), _T_195) @[Lookup.scala 33:37]
    node _T_197 = mux(_T_91, UInt<1>("h0"), _T_196) @[Lookup.scala 33:37]
    node _T_198 = mux(_T_89, UInt<1>("h0"), _T_197) @[Lookup.scala 33:37]
    node _T_199 = mux(_T_87, UInt<1>("h0"), _T_198) @[Lookup.scala 33:37]
    node _T_200 = mux(_T_85, UInt<1>("h0"), _T_199) @[Lookup.scala 33:37]
    node _T_201 = mux(_T_83, UInt<1>("h0"), _T_200) @[Lookup.scala 33:37]
    node _T_202 = mux(_T_81, UInt<1>("h0"), _T_201) @[Lookup.scala 33:37]
    node _T_203 = mux(_T_79, UInt<1>("h0"), _T_202) @[Lookup.scala 33:37]
    node _T_204 = mux(_T_77, UInt<1>("h0"), _T_203) @[Lookup.scala 33:37]
    node _T_205 = mux(_T_75, UInt<1>("h0"), _T_204) @[Lookup.scala 33:37]
    node _T_206 = mux(_T_73, UInt<1>("h1"), _T_205) @[Lookup.scala 33:37]
    node _T_207 = mux(_T_71, UInt<1>("h1"), _T_206) @[Lookup.scala 33:37]
    node _T_208 = mux(_T_69, UInt<1>("h1"), _T_207) @[Lookup.scala 33:37]
    node _T_209 = mux(_T_67, UInt<1>("h1"), _T_208) @[Lookup.scala 33:37]
    node _T_210 = mux(_T_65, UInt<1>("h1"), _T_209) @[Lookup.scala 33:37]
    node _T_211 = mux(_T_63, UInt<1>("h1"), _T_210) @[Lookup.scala 33:37]
    node _T_212 = mux(_T_61, UInt<1>("h1"), _T_211) @[Lookup.scala 33:37]
    node _T_213 = mux(_T_59, UInt<1>("h1"), _T_212) @[Lookup.scala 33:37]
    node _T_214 = mux(_T_57, UInt<1>("h1"), _T_213) @[Lookup.scala 33:37]
    node _T_215 = mux(_T_55, UInt<1>("h1"), _T_214) @[Lookup.scala 33:37]
    node _T_216 = mux(_T_53, UInt<1>("h0"), _T_215) @[Lookup.scala 33:37]
    node _T_217 = mux(_T_51, UInt<1>("h0"), _T_216) @[Lookup.scala 33:37]
    node _T_218 = mux(_T_49, UInt<1>("h0"), _T_217) @[Lookup.scala 33:37]
    node _T_219 = mux(_T_47, UInt<1>("h0"), _T_218) @[Lookup.scala 33:37]
    node _T_220 = mux(_T_45, UInt<1>("h0"), _T_219) @[Lookup.scala 33:37]
    node _T_221 = mux(_T_43, UInt<1>("h0"), _T_220) @[Lookup.scala 33:37]
    node _T_222 = mux(_T_41, UInt<1>("h0"), _T_221) @[Lookup.scala 33:37]
    node _T_223 = mux(_T_39, UInt<1>("h0"), _T_222) @[Lookup.scala 33:37]
    node _T_224 = mux(_T_37, UInt<1>("h0"), _T_223) @[Lookup.scala 33:37]
    node _T_225 = mux(_T_35, UInt<1>("h0"), _T_224) @[Lookup.scala 33:37]
    node _T_226 = mux(_T_33, UInt<1>("h0"), _T_225) @[Lookup.scala 33:37]
    node _T_227 = mux(_T_31, UInt<1>("h0"), _T_226) @[Lookup.scala 33:37]
    node _T_228 = mux(_T_29, UInt<1>("h0"), _T_227) @[Lookup.scala 33:37]
    node _T_229 = mux(_T_27, UInt<1>("h0"), _T_228) @[Lookup.scala 33:37]
    node _T_230 = mux(_T_25, UInt<1>("h0"), _T_229) @[Lookup.scala 33:37]
    node _T_231 = mux(_T_23, UInt<1>("h0"), _T_230) @[Lookup.scala 33:37]
    node _T_232 = mux(_T_21, UInt<1>("h0"), _T_231) @[Lookup.scala 33:37]
    node _T_233 = mux(_T_19, UInt<1>("h0"), _T_232) @[Lookup.scala 33:37]
    node _T_234 = mux(_T_17, UInt<1>("h0"), _T_233) @[Lookup.scala 33:37]
    node _T_235 = mux(_T_15, UInt<1>("h0"), _T_234) @[Lookup.scala 33:37]
    node _T_236 = mux(_T_13, UInt<1>("h0"), _T_235) @[Lookup.scala 33:37]
    node _T_237 = mux(_T_11, UInt<1>("h0"), _T_236) @[Lookup.scala 33:37]
    node _T_238 = mux(_T_9, UInt<1>("h0"), _T_237) @[Lookup.scala 33:37]
    node _T_239 = mux(_T_7, UInt<1>("h0"), _T_238) @[Lookup.scala 33:37]
    node _T_240 = mux(_T_5, UInt<1>("h0"), _T_239) @[Lookup.scala 33:37]
    node _T_241 = mux(_T_3, UInt<1>("h0"), _T_240) @[Lookup.scala 33:37]
    node ctrlSignals_2 = mux(_T_1, UInt<1>("h0"), _T_241) @[Lookup.scala 33:37]
    node _T_242 = mux(_T_97, UInt<3>("h0"), UInt<3>("h0")) @[Lookup.scala 33:37]
    node _T_243 = mux(_T_95, UInt<3>("h0"), _T_242) @[Lookup.scala 33:37]
    node _T_244 = mux(_T_93, UInt<3>("h0"), _T_243) @[Lookup.scala 33:37]
    node _T_245 = mux(_T_91, UInt<3>("h0"), _T_244) @[Lookup.scala 33:37]
    node _T_246 = mux(_T_89, UInt<3>("h6"), _T_245) @[Lookup.scala 33:37]
    node _T_247 = mux(_T_87, UInt<3>("h6"), _T_246) @[Lookup.scala 33:37]
    node _T_248 = mux(_T_85, UInt<3>("h6"), _T_247) @[Lookup.scala 33:37]
    node _T_249 = mux(_T_83, UInt<3>("h0"), _T_248) @[Lookup.scala 33:37]
    node _T_250 = mux(_T_81, UInt<3>("h0"), _T_249) @[Lookup.scala 33:37]
    node _T_251 = mux(_T_79, UInt<3>("h0"), _T_250) @[Lookup.scala 33:37]
    node _T_252 = mux(_T_77, UInt<3>("h0"), _T_251) @[Lookup.scala 33:37]
    node _T_253 = mux(_T_75, UInt<3>("h0"), _T_252) @[Lookup.scala 33:37]
    node _T_254 = mux(_T_73, UInt<3>("h0"), _T_253) @[Lookup.scala 33:37]
    node _T_255 = mux(_T_71, UInt<3>("h0"), _T_254) @[Lookup.scala 33:37]
    node _T_256 = mux(_T_69, UInt<3>("h0"), _T_255) @[Lookup.scala 33:37]
    node _T_257 = mux(_T_67, UInt<3>("h0"), _T_256) @[Lookup.scala 33:37]
    node _T_258 = mux(_T_65, UInt<3>("h0"), _T_257) @[Lookup.scala 33:37]
    node _T_259 = mux(_T_63, UInt<3>("h0"), _T_258) @[Lookup.scala 33:37]
    node _T_260 = mux(_T_61, UInt<3>("h0"), _T_259) @[Lookup.scala 33:37]
    node _T_261 = mux(_T_59, UInt<3>("h0"), _T_260) @[Lookup.scala 33:37]
    node _T_262 = mux(_T_57, UInt<3>("h0"), _T_261) @[Lookup.scala 33:37]
    node _T_263 = mux(_T_55, UInt<3>("h0"), _T_262) @[Lookup.scala 33:37]
    node _T_264 = mux(_T_53, UInt<3>("h1"), _T_263) @[Lookup.scala 33:37]
    node _T_265 = mux(_T_51, UInt<3>("h1"), _T_264) @[Lookup.scala 33:37]
    node _T_266 = mux(_T_49, UInt<3>("h1"), _T_265) @[Lookup.scala 33:37]
    node _T_267 = mux(_T_47, UInt<3>("h1"), _T_266) @[Lookup.scala 33:37]
    node _T_268 = mux(_T_45, UInt<3>("h1"), _T_267) @[Lookup.scala 33:37]
    node _T_269 = mux(_T_43, UInt<3>("h1"), _T_268) @[Lookup.scala 33:37]
    node _T_270 = mux(_T_41, UInt<3>("h1"), _T_269) @[Lookup.scala 33:37]
    node _T_271 = mux(_T_39, UInt<3>("h1"), _T_270) @[Lookup.scala 33:37]
    node _T_272 = mux(_T_37, UInt<3>("h1"), _T_271) @[Lookup.scala 33:37]
    node _T_273 = mux(_T_35, UInt<3>("h2"), _T_272) @[Lookup.scala 33:37]
    node _T_274 = mux(_T_33, UInt<3>("h2"), _T_273) @[Lookup.scala 33:37]
    node _T_275 = mux(_T_31, UInt<3>("h2"), _T_274) @[Lookup.scala 33:37]
    node _T_276 = mux(_T_29, UInt<3>("h1"), _T_275) @[Lookup.scala 33:37]
    node _T_277 = mux(_T_27, UInt<3>("h1"), _T_276) @[Lookup.scala 33:37]
    node _T_278 = mux(_T_25, UInt<3>("h1"), _T_277) @[Lookup.scala 33:37]
    node _T_279 = mux(_T_23, UInt<3>("h1"), _T_278) @[Lookup.scala 33:37]
    node _T_280 = mux(_T_21, UInt<3>("h1"), _T_279) @[Lookup.scala 33:37]
    node _T_281 = mux(_T_19, UInt<3>("h5"), _T_280) @[Lookup.scala 33:37]
    node _T_282 = mux(_T_17, UInt<3>("h5"), _T_281) @[Lookup.scala 33:37]
    node _T_283 = mux(_T_15, UInt<3>("h5"), _T_282) @[Lookup.scala 33:37]
    node _T_284 = mux(_T_13, UInt<3>("h5"), _T_283) @[Lookup.scala 33:37]
    node _T_285 = mux(_T_11, UInt<3>("h5"), _T_284) @[Lookup.scala 33:37]
    node _T_286 = mux(_T_9, UInt<3>("h5"), _T_285) @[Lookup.scala 33:37]
    node _T_287 = mux(_T_7, UInt<3>("h1"), _T_286) @[Lookup.scala 33:37]
    node _T_288 = mux(_T_5, UInt<3>("h4"), _T_287) @[Lookup.scala 33:37]
    node _T_289 = mux(_T_3, UInt<3>("h3"), _T_288) @[Lookup.scala 33:37]
    node ctrlSignals_3 = mux(_T_1, UInt<3>("h3"), _T_289) @[Lookup.scala 33:37]
    node _T_290 = mux(_T_97, UInt<4>("hf"), UInt<4>("hf")) @[Lookup.scala 33:37]
    node _T_291 = mux(_T_95, UInt<4>("hf"), _T_290) @[Lookup.scala 33:37]
    node _T_292 = mux(_T_93, UInt<4>("hf"), _T_291) @[Lookup.scala 33:37]
    node _T_293 = mux(_T_91, UInt<4>("hf"), _T_292) @[Lookup.scala 33:37]
    node _T_294 = mux(_T_89, UInt<4>("hf"), _T_293) @[Lookup.scala 33:37]
    node _T_295 = mux(_T_87, UInt<4>("hf"), _T_294) @[Lookup.scala 33:37]
    node _T_296 = mux(_T_85, UInt<4>("hf"), _T_295) @[Lookup.scala 33:37]
    node _T_297 = mux(_T_83, UInt<4>("ha"), _T_296) @[Lookup.scala 33:37]
    node _T_298 = mux(_T_81, UInt<4>("ha"), _T_297) @[Lookup.scala 33:37]
    node _T_299 = mux(_T_79, UInt<4>("ha"), _T_298) @[Lookup.scala 33:37]
    node _T_300 = mux(_T_77, UInt<4>("hf"), _T_299) @[Lookup.scala 33:37]
    node _T_301 = mux(_T_75, UInt<4>("hf"), _T_300) @[Lookup.scala 33:37]
    node _T_302 = mux(_T_73, UInt<4>("h2"), _T_301) @[Lookup.scala 33:37]
    node _T_303 = mux(_T_71, UInt<4>("h3"), _T_302) @[Lookup.scala 33:37]
    node _T_304 = mux(_T_69, UInt<4>("h9"), _T_303) @[Lookup.scala 33:37]
    node _T_305 = mux(_T_67, UInt<4>("h8"), _T_304) @[Lookup.scala 33:37]
    node _T_306 = mux(_T_65, UInt<4>("h4"), _T_305) @[Lookup.scala 33:37]
    node _T_307 = mux(_T_63, UInt<4>("h7"), _T_306) @[Lookup.scala 33:37]
    node _T_308 = mux(_T_61, UInt<4>("h5"), _T_307) @[Lookup.scala 33:37]
    node _T_309 = mux(_T_59, UInt<4>("h6"), _T_308) @[Lookup.scala 33:37]
    node _T_310 = mux(_T_57, UInt<4>("h1"), _T_309) @[Lookup.scala 33:37]
    node _T_311 = mux(_T_55, UInt<4>("h0"), _T_310) @[Lookup.scala 33:37]
    node _T_312 = mux(_T_53, UInt<4>("h9"), _T_311) @[Lookup.scala 33:37]
    node _T_313 = mux(_T_51, UInt<4>("h8"), _T_312) @[Lookup.scala 33:37]
    node _T_314 = mux(_T_49, UInt<4>("h6"), _T_313) @[Lookup.scala 33:37]
    node _T_315 = mux(_T_47, UInt<4>("h2"), _T_314) @[Lookup.scala 33:37]
    node _T_316 = mux(_T_45, UInt<4>("h3"), _T_315) @[Lookup.scala 33:37]
    node _T_317 = mux(_T_43, UInt<4>("h4"), _T_316) @[Lookup.scala 33:37]
    node _T_318 = mux(_T_41, UInt<4>("h7"), _T_317) @[Lookup.scala 33:37]
    node _T_319 = mux(_T_39, UInt<4>("h5"), _T_318) @[Lookup.scala 33:37]
    node _T_320 = mux(_T_37, UInt<4>("h0"), _T_319) @[Lookup.scala 33:37]
    node _T_321 = mux(_T_35, UInt<4>("h0"), _T_320) @[Lookup.scala 33:37]
    node _T_322 = mux(_T_33, UInt<4>("h0"), _T_321) @[Lookup.scala 33:37]
    node _T_323 = mux(_T_31, UInt<4>("h0"), _T_322) @[Lookup.scala 33:37]
    node _T_324 = mux(_T_29, UInt<4>("h0"), _T_323) @[Lookup.scala 33:37]
    node _T_325 = mux(_T_27, UInt<4>("h0"), _T_324) @[Lookup.scala 33:37]
    node _T_326 = mux(_T_25, UInt<4>("h0"), _T_325) @[Lookup.scala 33:37]
    node _T_327 = mux(_T_23, UInt<4>("h0"), _T_326) @[Lookup.scala 33:37]
    node _T_328 = mux(_T_21, UInt<4>("h0"), _T_327) @[Lookup.scala 33:37]
    node _T_329 = mux(_T_19, UInt<4>("h0"), _T_328) @[Lookup.scala 33:37]
    node _T_330 = mux(_T_17, UInt<4>("h0"), _T_329) @[Lookup.scala 33:37]
    node _T_331 = mux(_T_15, UInt<4>("h0"), _T_330) @[Lookup.scala 33:37]
    node _T_332 = mux(_T_13, UInt<4>("h0"), _T_331) @[Lookup.scala 33:37]
    node _T_333 = mux(_T_11, UInt<4>("h0"), _T_332) @[Lookup.scala 33:37]
    node _T_334 = mux(_T_9, UInt<4>("h0"), _T_333) @[Lookup.scala 33:37]
    node _T_335 = mux(_T_7, UInt<4>("h0"), _T_334) @[Lookup.scala 33:37]
    node _T_336 = mux(_T_5, UInt<4>("h0"), _T_335) @[Lookup.scala 33:37]
    node _T_337 = mux(_T_3, UInt<4>("h0"), _T_336) @[Lookup.scala 33:37]
    node ctrlSignals_4 = mux(_T_1, UInt<4>("hb"), _T_337) @[Lookup.scala 33:37]
    node _T_338 = mux(_T_97, UInt<3>("h0"), UInt<3>("h0")) @[Lookup.scala 33:37]
    node _T_339 = mux(_T_95, UInt<3>("h0"), _T_338) @[Lookup.scala 33:37]
    node _T_340 = mux(_T_93, UInt<3>("h0"), _T_339) @[Lookup.scala 33:37]
    node _T_341 = mux(_T_91, UInt<3>("h0"), _T_340) @[Lookup.scala 33:37]
    node _T_342 = mux(_T_89, UInt<3>("h0"), _T_341) @[Lookup.scala 33:37]
    node _T_343 = mux(_T_87, UInt<3>("h0"), _T_342) @[Lookup.scala 33:37]
    node _T_344 = mux(_T_85, UInt<3>("h0"), _T_343) @[Lookup.scala 33:37]
    node _T_345 = mux(_T_83, UInt<3>("h0"), _T_344) @[Lookup.scala 33:37]
    node _T_346 = mux(_T_81, UInt<3>("h0"), _T_345) @[Lookup.scala 33:37]
    node _T_347 = mux(_T_79, UInt<3>("h0"), _T_346) @[Lookup.scala 33:37]
    node _T_348 = mux(_T_77, UInt<3>("h0"), _T_347) @[Lookup.scala 33:37]
    node _T_349 = mux(_T_75, UInt<3>("h0"), _T_348) @[Lookup.scala 33:37]
    node _T_350 = mux(_T_73, UInt<3>("h0"), _T_349) @[Lookup.scala 33:37]
    node _T_351 = mux(_T_71, UInt<3>("h0"), _T_350) @[Lookup.scala 33:37]
    node _T_352 = mux(_T_69, UInt<3>("h0"), _T_351) @[Lookup.scala 33:37]
    node _T_353 = mux(_T_67, UInt<3>("h0"), _T_352) @[Lookup.scala 33:37]
    node _T_354 = mux(_T_65, UInt<3>("h0"), _T_353) @[Lookup.scala 33:37]
    node _T_355 = mux(_T_63, UInt<3>("h0"), _T_354) @[Lookup.scala 33:37]
    node _T_356 = mux(_T_61, UInt<3>("h0"), _T_355) @[Lookup.scala 33:37]
    node _T_357 = mux(_T_59, UInt<3>("h0"), _T_356) @[Lookup.scala 33:37]
    node _T_358 = mux(_T_57, UInt<3>("h0"), _T_357) @[Lookup.scala 33:37]
    node _T_359 = mux(_T_55, UInt<3>("h0"), _T_358) @[Lookup.scala 33:37]
    node _T_360 = mux(_T_53, UInt<3>("h0"), _T_359) @[Lookup.scala 33:37]
    node _T_361 = mux(_T_51, UInt<3>("h0"), _T_360) @[Lookup.scala 33:37]
    node _T_362 = mux(_T_49, UInt<3>("h0"), _T_361) @[Lookup.scala 33:37]
    node _T_363 = mux(_T_47, UInt<3>("h0"), _T_362) @[Lookup.scala 33:37]
    node _T_364 = mux(_T_45, UInt<3>("h0"), _T_363) @[Lookup.scala 33:37]
    node _T_365 = mux(_T_43, UInt<3>("h0"), _T_364) @[Lookup.scala 33:37]
    node _T_366 = mux(_T_41, UInt<3>("h0"), _T_365) @[Lookup.scala 33:37]
    node _T_367 = mux(_T_39, UInt<3>("h0"), _T_366) @[Lookup.scala 33:37]
    node _T_368 = mux(_T_37, UInt<3>("h0"), _T_367) @[Lookup.scala 33:37]
    node _T_369 = mux(_T_35, UInt<3>("h0"), _T_368) @[Lookup.scala 33:37]
    node _T_370 = mux(_T_33, UInt<3>("h0"), _T_369) @[Lookup.scala 33:37]
    node _T_371 = mux(_T_31, UInt<3>("h0"), _T_370) @[Lookup.scala 33:37]
    node _T_372 = mux(_T_29, UInt<3>("h0"), _T_371) @[Lookup.scala 33:37]
    node _T_373 = mux(_T_27, UInt<3>("h0"), _T_372) @[Lookup.scala 33:37]
    node _T_374 = mux(_T_25, UInt<3>("h0"), _T_373) @[Lookup.scala 33:37]
    node _T_375 = mux(_T_23, UInt<3>("h0"), _T_374) @[Lookup.scala 33:37]
    node _T_376 = mux(_T_21, UInt<3>("h0"), _T_375) @[Lookup.scala 33:37]
    node _T_377 = mux(_T_19, UInt<3>("h4"), _T_376) @[Lookup.scala 33:37]
    node _T_378 = mux(_T_17, UInt<3>("h1"), _T_377) @[Lookup.scala 33:37]
    node _T_379 = mux(_T_15, UInt<3>("h5"), _T_378) @[Lookup.scala 33:37]
    node _T_380 = mux(_T_13, UInt<3>("h2"), _T_379) @[Lookup.scala 33:37]
    node _T_381 = mux(_T_11, UInt<3>("h6"), _T_380) @[Lookup.scala 33:37]
    node _T_382 = mux(_T_9, UInt<3>("h3"), _T_381) @[Lookup.scala 33:37]
    node _T_383 = mux(_T_7, UInt<3>("h0"), _T_382) @[Lookup.scala 33:37]
    node _T_384 = mux(_T_5, UInt<3>("h0"), _T_383) @[Lookup.scala 33:37]
    node _T_385 = mux(_T_3, UInt<3>("h0"), _T_384) @[Lookup.scala 33:37]
    node ctrlSignals_5 = mux(_T_1, UInt<3>("h0"), _T_385) @[Lookup.scala 33:37]
    node _T_386 = mux(_T_97, UInt<1>("h0"), UInt<1>("h0")) @[Lookup.scala 33:37]
    node _T_387 = mux(_T_95, UInt<1>("h1"), _T_386) @[Lookup.scala 33:37]
    node _T_388 = mux(_T_93, UInt<1>("h0"), _T_387) @[Lookup.scala 33:37]
    node _T_389 = mux(_T_91, UInt<1>("h0"), _T_388) @[Lookup.scala 33:37]
    node _T_390 = mux(_T_89, UInt<1>("h1"), _T_389) @[Lookup.scala 33:37]
    node _T_391 = mux(_T_87, UInt<1>("h1"), _T_390) @[Lookup.scala 33:37]
    node _T_392 = mux(_T_85, UInt<1>("h1"), _T_391) @[Lookup.scala 33:37]
    node _T_393 = mux(_T_83, UInt<1>("h1"), _T_392) @[Lookup.scala 33:37]
    node _T_394 = mux(_T_81, UInt<1>("h1"), _T_393) @[Lookup.scala 33:37]
    node _T_395 = mux(_T_79, UInt<1>("h1"), _T_394) @[Lookup.scala 33:37]
    node _T_396 = mux(_T_77, UInt<1>("h1"), _T_395) @[Lookup.scala 33:37]
    node _T_397 = mux(_T_75, UInt<1>("h0"), _T_396) @[Lookup.scala 33:37]
    node _T_398 = mux(_T_73, UInt<1>("h0"), _T_397) @[Lookup.scala 33:37]
    node _T_399 = mux(_T_71, UInt<1>("h0"), _T_398) @[Lookup.scala 33:37]
    node _T_400 = mux(_T_69, UInt<1>("h0"), _T_399) @[Lookup.scala 33:37]
    node _T_401 = mux(_T_67, UInt<1>("h0"), _T_400) @[Lookup.scala 33:37]
    node _T_402 = mux(_T_65, UInt<1>("h0"), _T_401) @[Lookup.scala 33:37]
    node _T_403 = mux(_T_63, UInt<1>("h0"), _T_402) @[Lookup.scala 33:37]
    node _T_404 = mux(_T_61, UInt<1>("h0"), _T_403) @[Lookup.scala 33:37]
    node _T_405 = mux(_T_59, UInt<1>("h0"), _T_404) @[Lookup.scala 33:37]
    node _T_406 = mux(_T_57, UInt<1>("h0"), _T_405) @[Lookup.scala 33:37]
    node _T_407 = mux(_T_55, UInt<1>("h0"), _T_406) @[Lookup.scala 33:37]
    node _T_408 = mux(_T_53, UInt<1>("h0"), _T_407) @[Lookup.scala 33:37]
    node _T_409 = mux(_T_51, UInt<1>("h0"), _T_408) @[Lookup.scala 33:37]
    node _T_410 = mux(_T_49, UInt<1>("h0"), _T_409) @[Lookup.scala 33:37]
    node _T_411 = mux(_T_47, UInt<1>("h0"), _T_410) @[Lookup.scala 33:37]
    node _T_412 = mux(_T_45, UInt<1>("h0"), _T_411) @[Lookup.scala 33:37]
    node _T_413 = mux(_T_43, UInt<1>("h0"), _T_412) @[Lookup.scala 33:37]
    node _T_414 = mux(_T_41, UInt<1>("h0"), _T_413) @[Lookup.scala 33:37]
    node _T_415 = mux(_T_39, UInt<1>("h0"), _T_414) @[Lookup.scala 33:37]
    node _T_416 = mux(_T_37, UInt<1>("h0"), _T_415) @[Lookup.scala 33:37]
    node _T_417 = mux(_T_35, UInt<1>("h0"), _T_416) @[Lookup.scala 33:37]
    node _T_418 = mux(_T_33, UInt<1>("h0"), _T_417) @[Lookup.scala 33:37]
    node _T_419 = mux(_T_31, UInt<1>("h0"), _T_418) @[Lookup.scala 33:37]
    node _T_420 = mux(_T_29, UInt<1>("h1"), _T_419) @[Lookup.scala 33:37]
    node _T_421 = mux(_T_27, UInt<1>("h1"), _T_420) @[Lookup.scala 33:37]
    node _T_422 = mux(_T_25, UInt<1>("h1"), _T_421) @[Lookup.scala 33:37]
    node _T_423 = mux(_T_23, UInt<1>("h1"), _T_422) @[Lookup.scala 33:37]
    node _T_424 = mux(_T_21, UInt<1>("h1"), _T_423) @[Lookup.scala 33:37]
    node _T_425 = mux(_T_19, UInt<1>("h0"), _T_424) @[Lookup.scala 33:37]
    node _T_426 = mux(_T_17, UInt<1>("h0"), _T_425) @[Lookup.scala 33:37]
    node _T_427 = mux(_T_15, UInt<1>("h0"), _T_426) @[Lookup.scala 33:37]
    node _T_428 = mux(_T_13, UInt<1>("h0"), _T_427) @[Lookup.scala 33:37]
    node _T_429 = mux(_T_11, UInt<1>("h0"), _T_428) @[Lookup.scala 33:37]
    node _T_430 = mux(_T_9, UInt<1>("h0"), _T_429) @[Lookup.scala 33:37]
    node _T_431 = mux(_T_7, UInt<1>("h1"), _T_430) @[Lookup.scala 33:37]
    node _T_432 = mux(_T_5, UInt<1>("h1"), _T_431) @[Lookup.scala 33:37]
    node _T_433 = mux(_T_3, UInt<1>("h0"), _T_432) @[Lookup.scala 33:37]
    node ctrlSignals_6 = mux(_T_1, UInt<1>("h0"), _T_433) @[Lookup.scala 33:37]
    node _T_434 = mux(_T_97, UInt<2>("h0"), UInt<2>("h0")) @[Lookup.scala 33:37]
    node _T_435 = mux(_T_95, UInt<2>("h0"), _T_434) @[Lookup.scala 33:37]
    node _T_436 = mux(_T_93, UInt<2>("h0"), _T_435) @[Lookup.scala 33:37]
    node _T_437 = mux(_T_91, UInt<2>("h0"), _T_436) @[Lookup.scala 33:37]
    node _T_438 = mux(_T_89, UInt<2>("h0"), _T_437) @[Lookup.scala 33:37]
    node _T_439 = mux(_T_87, UInt<2>("h0"), _T_438) @[Lookup.scala 33:37]
    node _T_440 = mux(_T_85, UInt<2>("h0"), _T_439) @[Lookup.scala 33:37]
    node _T_441 = mux(_T_83, UInt<2>("h0"), _T_440) @[Lookup.scala 33:37]
    node _T_442 = mux(_T_81, UInt<2>("h0"), _T_441) @[Lookup.scala 33:37]
    node _T_443 = mux(_T_79, UInt<2>("h0"), _T_442) @[Lookup.scala 33:37]
    node _T_444 = mux(_T_77, UInt<2>("h0"), _T_443) @[Lookup.scala 33:37]
    node _T_445 = mux(_T_75, UInt<2>("h0"), _T_444) @[Lookup.scala 33:37]
    node _T_446 = mux(_T_73, UInt<2>("h0"), _T_445) @[Lookup.scala 33:37]
    node _T_447 = mux(_T_71, UInt<2>("h0"), _T_446) @[Lookup.scala 33:37]
    node _T_448 = mux(_T_69, UInt<2>("h0"), _T_447) @[Lookup.scala 33:37]
    node _T_449 = mux(_T_67, UInt<2>("h0"), _T_448) @[Lookup.scala 33:37]
    node _T_450 = mux(_T_65, UInt<2>("h0"), _T_449) @[Lookup.scala 33:37]
    node _T_451 = mux(_T_63, UInt<2>("h0"), _T_450) @[Lookup.scala 33:37]
    node _T_452 = mux(_T_61, UInt<2>("h0"), _T_451) @[Lookup.scala 33:37]
    node _T_453 = mux(_T_59, UInt<2>("h0"), _T_452) @[Lookup.scala 33:37]
    node _T_454 = mux(_T_57, UInt<2>("h0"), _T_453) @[Lookup.scala 33:37]
    node _T_455 = mux(_T_55, UInt<2>("h0"), _T_454) @[Lookup.scala 33:37]
    node _T_456 = mux(_T_53, UInt<2>("h0"), _T_455) @[Lookup.scala 33:37]
    node _T_457 = mux(_T_51, UInt<2>("h0"), _T_456) @[Lookup.scala 33:37]
    node _T_458 = mux(_T_49, UInt<2>("h0"), _T_457) @[Lookup.scala 33:37]
    node _T_459 = mux(_T_47, UInt<2>("h0"), _T_458) @[Lookup.scala 33:37]
    node _T_460 = mux(_T_45, UInt<2>("h0"), _T_459) @[Lookup.scala 33:37]
    node _T_461 = mux(_T_43, UInt<2>("h0"), _T_460) @[Lookup.scala 33:37]
    node _T_462 = mux(_T_41, UInt<2>("h0"), _T_461) @[Lookup.scala 33:37]
    node _T_463 = mux(_T_39, UInt<2>("h0"), _T_462) @[Lookup.scala 33:37]
    node _T_464 = mux(_T_37, UInt<2>("h0"), _T_463) @[Lookup.scala 33:37]
    node _T_465 = mux(_T_35, UInt<2>("h1"), _T_464) @[Lookup.scala 33:37]
    node _T_466 = mux(_T_33, UInt<2>("h2"), _T_465) @[Lookup.scala 33:37]
    node _T_467 = mux(_T_31, UInt<2>("h3"), _T_466) @[Lookup.scala 33:37]
    node _T_468 = mux(_T_29, UInt<2>("h0"), _T_467) @[Lookup.scala 33:37]
    node _T_469 = mux(_T_27, UInt<2>("h0"), _T_468) @[Lookup.scala 33:37]
    node _T_470 = mux(_T_25, UInt<2>("h0"), _T_469) @[Lookup.scala 33:37]
    node _T_471 = mux(_T_23, UInt<2>("h0"), _T_470) @[Lookup.scala 33:37]
    node _T_472 = mux(_T_21, UInt<2>("h0"), _T_471) @[Lookup.scala 33:37]
    node _T_473 = mux(_T_19, UInt<2>("h0"), _T_472) @[Lookup.scala 33:37]
    node _T_474 = mux(_T_17, UInt<2>("h0"), _T_473) @[Lookup.scala 33:37]
    node _T_475 = mux(_T_15, UInt<2>("h0"), _T_474) @[Lookup.scala 33:37]
    node _T_476 = mux(_T_13, UInt<2>("h0"), _T_475) @[Lookup.scala 33:37]
    node _T_477 = mux(_T_11, UInt<2>("h0"), _T_476) @[Lookup.scala 33:37]
    node _T_478 = mux(_T_9, UInt<2>("h0"), _T_477) @[Lookup.scala 33:37]
    node _T_479 = mux(_T_7, UInt<2>("h0"), _T_478) @[Lookup.scala 33:37]
    node _T_480 = mux(_T_5, UInt<2>("h0"), _T_479) @[Lookup.scala 33:37]
    node _T_481 = mux(_T_3, UInt<2>("h0"), _T_480) @[Lookup.scala 33:37]
    node ctrlSignals_7 = mux(_T_1, UInt<2>("h0"), _T_481) @[Lookup.scala 33:37]
    node _T_482 = mux(_T_97, UInt<3>("h0"), UInt<3>("h0")) @[Lookup.scala 33:37]
    node _T_483 = mux(_T_95, UInt<3>("h0"), _T_482) @[Lookup.scala 33:37]
    node _T_484 = mux(_T_93, UInt<3>("h0"), _T_483) @[Lookup.scala 33:37]
    node _T_485 = mux(_T_91, UInt<3>("h0"), _T_484) @[Lookup.scala 33:37]
    node _T_486 = mux(_T_89, UInt<3>("h0"), _T_485) @[Lookup.scala 33:37]
    node _T_487 = mux(_T_87, UInt<3>("h0"), _T_486) @[Lookup.scala 33:37]
    node _T_488 = mux(_T_85, UInt<3>("h0"), _T_487) @[Lookup.scala 33:37]
    node _T_489 = mux(_T_83, UInt<3>("h0"), _T_488) @[Lookup.scala 33:37]
    node _T_490 = mux(_T_81, UInt<3>("h0"), _T_489) @[Lookup.scala 33:37]
    node _T_491 = mux(_T_79, UInt<3>("h0"), _T_490) @[Lookup.scala 33:37]
    node _T_492 = mux(_T_77, UInt<3>("h0"), _T_491) @[Lookup.scala 33:37]
    node _T_493 = mux(_T_75, UInt<3>("h0"), _T_492) @[Lookup.scala 33:37]
    node _T_494 = mux(_T_73, UInt<3>("h0"), _T_493) @[Lookup.scala 33:37]
    node _T_495 = mux(_T_71, UInt<3>("h0"), _T_494) @[Lookup.scala 33:37]
    node _T_496 = mux(_T_69, UInt<3>("h0"), _T_495) @[Lookup.scala 33:37]
    node _T_497 = mux(_T_67, UInt<3>("h0"), _T_496) @[Lookup.scala 33:37]
    node _T_498 = mux(_T_65, UInt<3>("h0"), _T_497) @[Lookup.scala 33:37]
    node _T_499 = mux(_T_63, UInt<3>("h0"), _T_498) @[Lookup.scala 33:37]
    node _T_500 = mux(_T_61, UInt<3>("h0"), _T_499) @[Lookup.scala 33:37]
    node _T_501 = mux(_T_59, UInt<3>("h0"), _T_500) @[Lookup.scala 33:37]
    node _T_502 = mux(_T_57, UInt<3>("h0"), _T_501) @[Lookup.scala 33:37]
    node _T_503 = mux(_T_55, UInt<3>("h0"), _T_502) @[Lookup.scala 33:37]
    node _T_504 = mux(_T_53, UInt<3>("h0"), _T_503) @[Lookup.scala 33:37]
    node _T_505 = mux(_T_51, UInt<3>("h0"), _T_504) @[Lookup.scala 33:37]
    node _T_506 = mux(_T_49, UInt<3>("h0"), _T_505) @[Lookup.scala 33:37]
    node _T_507 = mux(_T_47, UInt<3>("h0"), _T_506) @[Lookup.scala 33:37]
    node _T_508 = mux(_T_45, UInt<3>("h0"), _T_507) @[Lookup.scala 33:37]
    node _T_509 = mux(_T_43, UInt<3>("h0"), _T_508) @[Lookup.scala 33:37]
    node _T_510 = mux(_T_41, UInt<3>("h0"), _T_509) @[Lookup.scala 33:37]
    node _T_511 = mux(_T_39, UInt<3>("h0"), _T_510) @[Lookup.scala 33:37]
    node _T_512 = mux(_T_37, UInt<3>("h0"), _T_511) @[Lookup.scala 33:37]
    node _T_513 = mux(_T_35, UInt<3>("h0"), _T_512) @[Lookup.scala 33:37]
    node _T_514 = mux(_T_33, UInt<3>("h0"), _T_513) @[Lookup.scala 33:37]
    node _T_515 = mux(_T_31, UInt<3>("h0"), _T_514) @[Lookup.scala 33:37]
    node _T_516 = mux(_T_29, UInt<3>("h4"), _T_515) @[Lookup.scala 33:37]
    node _T_517 = mux(_T_27, UInt<3>("h5"), _T_516) @[Lookup.scala 33:37]
    node _T_518 = mux(_T_25, UInt<3>("h1"), _T_517) @[Lookup.scala 33:37]
    node _T_519 = mux(_T_23, UInt<3>("h2"), _T_518) @[Lookup.scala 33:37]
    node _T_520 = mux(_T_21, UInt<3>("h3"), _T_519) @[Lookup.scala 33:37]
    node _T_521 = mux(_T_19, UInt<3>("h0"), _T_520) @[Lookup.scala 33:37]
    node _T_522 = mux(_T_17, UInt<3>("h0"), _T_521) @[Lookup.scala 33:37]
    node _T_523 = mux(_T_15, UInt<3>("h0"), _T_522) @[Lookup.scala 33:37]
    node _T_524 = mux(_T_13, UInt<3>("h0"), _T_523) @[Lookup.scala 33:37]
    node _T_525 = mux(_T_11, UInt<3>("h0"), _T_524) @[Lookup.scala 33:37]
    node _T_526 = mux(_T_9, UInt<3>("h0"), _T_525) @[Lookup.scala 33:37]
    node _T_527 = mux(_T_7, UInt<3>("h0"), _T_526) @[Lookup.scala 33:37]
    node _T_528 = mux(_T_5, UInt<3>("h0"), _T_527) @[Lookup.scala 33:37]
    node _T_529 = mux(_T_3, UInt<3>("h0"), _T_528) @[Lookup.scala 33:37]
    node ctrlSignals_8 = mux(_T_1, UInt<3>("h0"), _T_529) @[Lookup.scala 33:37]
    node _T_530 = mux(_T_97, UInt<2>("h0"), UInt<2>("h0")) @[Lookup.scala 33:37]
    node _T_531 = mux(_T_95, UInt<2>("h3"), _T_530) @[Lookup.scala 33:37]
    node _T_532 = mux(_T_93, UInt<2>("h3"), _T_531) @[Lookup.scala 33:37]
    node _T_533 = mux(_T_91, UInt<2>("h3"), _T_532) @[Lookup.scala 33:37]
    node _T_534 = mux(_T_89, UInt<2>("h3"), _T_533) @[Lookup.scala 33:37]
    node _T_535 = mux(_T_87, UInt<2>("h3"), _T_534) @[Lookup.scala 33:37]
    node _T_536 = mux(_T_85, UInt<2>("h3"), _T_535) @[Lookup.scala 33:37]
    node _T_537 = mux(_T_83, UInt<2>("h3"), _T_536) @[Lookup.scala 33:37]
    node _T_538 = mux(_T_81, UInt<2>("h3"), _T_537) @[Lookup.scala 33:37]
    node _T_539 = mux(_T_79, UInt<2>("h3"), _T_538) @[Lookup.scala 33:37]
    node _T_540 = mux(_T_77, UInt<2>("h0"), _T_539) @[Lookup.scala 33:37]
    node _T_541 = mux(_T_75, UInt<2>("h0"), _T_540) @[Lookup.scala 33:37]
    node _T_542 = mux(_T_73, UInt<2>("h0"), _T_541) @[Lookup.scala 33:37]
    node _T_543 = mux(_T_71, UInt<2>("h0"), _T_542) @[Lookup.scala 33:37]
    node _T_544 = mux(_T_69, UInt<2>("h0"), _T_543) @[Lookup.scala 33:37]
    node _T_545 = mux(_T_67, UInt<2>("h0"), _T_544) @[Lookup.scala 33:37]
    node _T_546 = mux(_T_65, UInt<2>("h0"), _T_545) @[Lookup.scala 33:37]
    node _T_547 = mux(_T_63, UInt<2>("h0"), _T_546) @[Lookup.scala 33:37]
    node _T_548 = mux(_T_61, UInt<2>("h0"), _T_547) @[Lookup.scala 33:37]
    node _T_549 = mux(_T_59, UInt<2>("h0"), _T_548) @[Lookup.scala 33:37]
    node _T_550 = mux(_T_57, UInt<2>("h0"), _T_549) @[Lookup.scala 33:37]
    node _T_551 = mux(_T_55, UInt<2>("h0"), _T_550) @[Lookup.scala 33:37]
    node _T_552 = mux(_T_53, UInt<2>("h0"), _T_551) @[Lookup.scala 33:37]
    node _T_553 = mux(_T_51, UInt<2>("h0"), _T_552) @[Lookup.scala 33:37]
    node _T_554 = mux(_T_49, UInt<2>("h0"), _T_553) @[Lookup.scala 33:37]
    node _T_555 = mux(_T_47, UInt<2>("h0"), _T_554) @[Lookup.scala 33:37]
    node _T_556 = mux(_T_45, UInt<2>("h0"), _T_555) @[Lookup.scala 33:37]
    node _T_557 = mux(_T_43, UInt<2>("h0"), _T_556) @[Lookup.scala 33:37]
    node _T_558 = mux(_T_41, UInt<2>("h0"), _T_557) @[Lookup.scala 33:37]
    node _T_559 = mux(_T_39, UInt<2>("h0"), _T_558) @[Lookup.scala 33:37]
    node _T_560 = mux(_T_37, UInt<2>("h0"), _T_559) @[Lookup.scala 33:37]
    node _T_561 = mux(_T_35, UInt<2>("h0"), _T_560) @[Lookup.scala 33:37]
    node _T_562 = mux(_T_33, UInt<2>("h0"), _T_561) @[Lookup.scala 33:37]
    node _T_563 = mux(_T_31, UInt<2>("h0"), _T_562) @[Lookup.scala 33:37]
    node _T_564 = mux(_T_29, UInt<2>("h1"), _T_563) @[Lookup.scala 33:37]
    node _T_565 = mux(_T_27, UInt<2>("h1"), _T_564) @[Lookup.scala 33:37]
    node _T_566 = mux(_T_25, UInt<2>("h1"), _T_565) @[Lookup.scala 33:37]
    node _T_567 = mux(_T_23, UInt<2>("h1"), _T_566) @[Lookup.scala 33:37]
    node _T_568 = mux(_T_21, UInt<2>("h1"), _T_567) @[Lookup.scala 33:37]
    node _T_569 = mux(_T_19, UInt<2>("h0"), _T_568) @[Lookup.scala 33:37]
    node _T_570 = mux(_T_17, UInt<2>("h0"), _T_569) @[Lookup.scala 33:37]
    node _T_571 = mux(_T_15, UInt<2>("h0"), _T_570) @[Lookup.scala 33:37]
    node _T_572 = mux(_T_13, UInt<2>("h0"), _T_571) @[Lookup.scala 33:37]
    node _T_573 = mux(_T_11, UInt<2>("h0"), _T_572) @[Lookup.scala 33:37]
    node _T_574 = mux(_T_9, UInt<2>("h0"), _T_573) @[Lookup.scala 33:37]
    node _T_575 = mux(_T_7, UInt<2>("h2"), _T_574) @[Lookup.scala 33:37]
    node _T_576 = mux(_T_5, UInt<2>("h2"), _T_575) @[Lookup.scala 33:37]
    node _T_577 = mux(_T_3, UInt<2>("h0"), _T_576) @[Lookup.scala 33:37]
    node ctrlSignals_9 = mux(_T_1, UInt<2>("h0"), _T_577) @[Lookup.scala 33:37]
    node _T_578 = mux(_T_97, UInt<1>("h0"), UInt<1>("h0")) @[Lookup.scala 33:37]
    node _T_579 = mux(_T_95, UInt<1>("h0"), _T_578) @[Lookup.scala 33:37]
    node _T_580 = mux(_T_93, UInt<1>("h0"), _T_579) @[Lookup.scala 33:37]
    node _T_581 = mux(_T_91, UInt<1>("h0"), _T_580) @[Lookup.scala 33:37]
    node _T_582 = mux(_T_89, UInt<1>("h1"), _T_581) @[Lookup.scala 33:37]
    node _T_583 = mux(_T_87, UInt<1>("h1"), _T_582) @[Lookup.scala 33:37]
    node _T_584 = mux(_T_85, UInt<1>("h1"), _T_583) @[Lookup.scala 33:37]
    node _T_585 = mux(_T_83, UInt<1>("h1"), _T_584) @[Lookup.scala 33:37]
    node _T_586 = mux(_T_81, UInt<1>("h1"), _T_585) @[Lookup.scala 33:37]
    node _T_587 = mux(_T_79, UInt<1>("h1"), _T_586) @[Lookup.scala 33:37]
    node _T_588 = mux(_T_77, UInt<1>("h0"), _T_587) @[Lookup.scala 33:37]
    node _T_589 = mux(_T_75, UInt<1>("h0"), _T_588) @[Lookup.scala 33:37]
    node _T_590 = mux(_T_73, UInt<1>("h1"), _T_589) @[Lookup.scala 33:37]
    node _T_591 = mux(_T_71, UInt<1>("h1"), _T_590) @[Lookup.scala 33:37]
    node _T_592 = mux(_T_69, UInt<1>("h1"), _T_591) @[Lookup.scala 33:37]
    node _T_593 = mux(_T_67, UInt<1>("h1"), _T_592) @[Lookup.scala 33:37]
    node _T_594 = mux(_T_65, UInt<1>("h1"), _T_593) @[Lookup.scala 33:37]
    node _T_595 = mux(_T_63, UInt<1>("h1"), _T_594) @[Lookup.scala 33:37]
    node _T_596 = mux(_T_61, UInt<1>("h1"), _T_595) @[Lookup.scala 33:37]
    node _T_597 = mux(_T_59, UInt<1>("h1"), _T_596) @[Lookup.scala 33:37]
    node _T_598 = mux(_T_57, UInt<1>("h1"), _T_597) @[Lookup.scala 33:37]
    node _T_599 = mux(_T_55, UInt<1>("h1"), _T_598) @[Lookup.scala 33:37]
    node _T_600 = mux(_T_53, UInt<1>("h1"), _T_599) @[Lookup.scala 33:37]
    node _T_601 = mux(_T_51, UInt<1>("h1"), _T_600) @[Lookup.scala 33:37]
    node _T_602 = mux(_T_49, UInt<1>("h1"), _T_601) @[Lookup.scala 33:37]
    node _T_603 = mux(_T_47, UInt<1>("h1"), _T_602) @[Lookup.scala 33:37]
    node _T_604 = mux(_T_45, UInt<1>("h1"), _T_603) @[Lookup.scala 33:37]
    node _T_605 = mux(_T_43, UInt<1>("h1"), _T_604) @[Lookup.scala 33:37]
    node _T_606 = mux(_T_41, UInt<1>("h1"), _T_605) @[Lookup.scala 33:37]
    node _T_607 = mux(_T_39, UInt<1>("h1"), _T_606) @[Lookup.scala 33:37]
    node _T_608 = mux(_T_37, UInt<1>("h1"), _T_607) @[Lookup.scala 33:37]
    node _T_609 = mux(_T_35, UInt<1>("h0"), _T_608) @[Lookup.scala 33:37]
    node _T_610 = mux(_T_33, UInt<1>("h0"), _T_609) @[Lookup.scala 33:37]
    node _T_611 = mux(_T_31, UInt<1>("h0"), _T_610) @[Lookup.scala 33:37]
    node _T_612 = mux(_T_29, UInt<1>("h1"), _T_611) @[Lookup.scala 33:37]
    node _T_613 = mux(_T_27, UInt<1>("h1"), _T_612) @[Lookup.scala 33:37]
    node _T_614 = mux(_T_25, UInt<1>("h1"), _T_613) @[Lookup.scala 33:37]
    node _T_615 = mux(_T_23, UInt<1>("h1"), _T_614) @[Lookup.scala 33:37]
    node _T_616 = mux(_T_21, UInt<1>("h1"), _T_615) @[Lookup.scala 33:37]
    node _T_617 = mux(_T_19, UInt<1>("h0"), _T_616) @[Lookup.scala 33:37]
    node _T_618 = mux(_T_17, UInt<1>("h0"), _T_617) @[Lookup.scala 33:37]
    node _T_619 = mux(_T_15, UInt<1>("h0"), _T_618) @[Lookup.scala 33:37]
    node _T_620 = mux(_T_13, UInt<1>("h0"), _T_619) @[Lookup.scala 33:37]
    node _T_621 = mux(_T_11, UInt<1>("h0"), _T_620) @[Lookup.scala 33:37]
    node _T_622 = mux(_T_9, UInt<1>("h0"), _T_621) @[Lookup.scala 33:37]
    node _T_623 = mux(_T_7, UInt<1>("h1"), _T_622) @[Lookup.scala 33:37]
    node _T_624 = mux(_T_5, UInt<1>("h1"), _T_623) @[Lookup.scala 33:37]
    node _T_625 = mux(_T_3, UInt<1>("h1"), _T_624) @[Lookup.scala 33:37]
    node ctrlSignals_10 = mux(_T_1, UInt<1>("h1"), _T_625) @[Lookup.scala 33:37]
    node _T_626 = mux(_T_97, UInt<3>("h0"), UInt<3>("h0")) @[Lookup.scala 33:37]
    node _T_627 = mux(_T_95, UInt<3>("h4"), _T_626) @[Lookup.scala 33:37]
    node _T_628 = mux(_T_93, UInt<3>("h4"), _T_627) @[Lookup.scala 33:37]
    node _T_629 = mux(_T_91, UInt<3>("h4"), _T_628) @[Lookup.scala 33:37]
    node _T_630 = mux(_T_89, UInt<3>("h3"), _T_629) @[Lookup.scala 33:37]
    node _T_631 = mux(_T_87, UInt<3>("h2"), _T_630) @[Lookup.scala 33:37]
    node _T_632 = mux(_T_85, UInt<3>("h1"), _T_631) @[Lookup.scala 33:37]
    node _T_633 = mux(_T_83, UInt<3>("h3"), _T_632) @[Lookup.scala 33:37]
    node _T_634 = mux(_T_81, UInt<3>("h2"), _T_633) @[Lookup.scala 33:37]
    node _T_635 = mux(_T_79, UInt<3>("h1"), _T_634) @[Lookup.scala 33:37]
    node _T_636 = mux(_T_77, UInt<3>("h0"), _T_635) @[Lookup.scala 33:37]
    node _T_637 = mux(_T_75, UInt<3>("h0"), _T_636) @[Lookup.scala 33:37]
    node _T_638 = mux(_T_73, UInt<3>("h0"), _T_637) @[Lookup.scala 33:37]
    node _T_639 = mux(_T_71, UInt<3>("h0"), _T_638) @[Lookup.scala 33:37]
    node _T_640 = mux(_T_69, UInt<3>("h0"), _T_639) @[Lookup.scala 33:37]
    node _T_641 = mux(_T_67, UInt<3>("h0"), _T_640) @[Lookup.scala 33:37]
    node _T_642 = mux(_T_65, UInt<3>("h0"), _T_641) @[Lookup.scala 33:37]
    node _T_643 = mux(_T_63, UInt<3>("h0"), _T_642) @[Lookup.scala 33:37]
    node _T_644 = mux(_T_61, UInt<3>("h0"), _T_643) @[Lookup.scala 33:37]
    node _T_645 = mux(_T_59, UInt<3>("h0"), _T_644) @[Lookup.scala 33:37]
    node _T_646 = mux(_T_57, UInt<3>("h0"), _T_645) @[Lookup.scala 33:37]
    node _T_647 = mux(_T_55, UInt<3>("h0"), _T_646) @[Lookup.scala 33:37]
    node _T_648 = mux(_T_53, UInt<3>("h0"), _T_647) @[Lookup.scala 33:37]
    node _T_649 = mux(_T_51, UInt<3>("h0"), _T_648) @[Lookup.scala 33:37]
    node _T_650 = mux(_T_49, UInt<3>("h0"), _T_649) @[Lookup.scala 33:37]
    node _T_651 = mux(_T_47, UInt<3>("h0"), _T_650) @[Lookup.scala 33:37]
    node _T_652 = mux(_T_45, UInt<3>("h0"), _T_651) @[Lookup.scala 33:37]
    node _T_653 = mux(_T_43, UInt<3>("h0"), _T_652) @[Lookup.scala 33:37]
    node _T_654 = mux(_T_41, UInt<3>("h0"), _T_653) @[Lookup.scala 33:37]
    node _T_655 = mux(_T_39, UInt<3>("h0"), _T_654) @[Lookup.scala 33:37]
    node _T_656 = mux(_T_37, UInt<3>("h0"), _T_655) @[Lookup.scala 33:37]
    node _T_657 = mux(_T_35, UInt<3>("h0"), _T_656) @[Lookup.scala 33:37]
    node _T_658 = mux(_T_33, UInt<3>("h0"), _T_657) @[Lookup.scala 33:37]
    node _T_659 = mux(_T_31, UInt<3>("h0"), _T_658) @[Lookup.scala 33:37]
    node _T_660 = mux(_T_29, UInt<3>("h0"), _T_659) @[Lookup.scala 33:37]
    node _T_661 = mux(_T_27, UInt<3>("h0"), _T_660) @[Lookup.scala 33:37]
    node _T_662 = mux(_T_25, UInt<3>("h0"), _T_661) @[Lookup.scala 33:37]
    node _T_663 = mux(_T_23, UInt<3>("h0"), _T_662) @[Lookup.scala 33:37]
    node _T_664 = mux(_T_21, UInt<3>("h0"), _T_663) @[Lookup.scala 33:37]
    node _T_665 = mux(_T_19, UInt<3>("h0"), _T_664) @[Lookup.scala 33:37]
    node _T_666 = mux(_T_17, UInt<3>("h0"), _T_665) @[Lookup.scala 33:37]
    node _T_667 = mux(_T_15, UInt<3>("h0"), _T_666) @[Lookup.scala 33:37]
    node _T_668 = mux(_T_13, UInt<3>("h0"), _T_667) @[Lookup.scala 33:37]
    node _T_669 = mux(_T_11, UInt<3>("h0"), _T_668) @[Lookup.scala 33:37]
    node _T_670 = mux(_T_9, UInt<3>("h0"), _T_669) @[Lookup.scala 33:37]
    node _T_671 = mux(_T_7, UInt<3>("h0"), _T_670) @[Lookup.scala 33:37]
    node _T_672 = mux(_T_5, UInt<3>("h0"), _T_671) @[Lookup.scala 33:37]
    node _T_673 = mux(_T_3, UInt<3>("h0"), _T_672) @[Lookup.scala 33:37]
    node ctrlSignals_11 = mux(_T_1, UInt<3>("h0"), _T_673) @[Lookup.scala 33:37]
    node _T_674 = mux(_T_97, UInt<1>("h0"), UInt<1>("h1")) @[Lookup.scala 33:37]
    node _T_675 = mux(_T_95, UInt<1>("h0"), _T_674) @[Lookup.scala 33:37]
    node _T_676 = mux(_T_93, UInt<1>("h0"), _T_675) @[Lookup.scala 33:37]
    node _T_677 = mux(_T_91, UInt<1>("h0"), _T_676) @[Lookup.scala 33:37]
    node _T_678 = mux(_T_89, UInt<1>("h0"), _T_677) @[Lookup.scala 33:37]
    node _T_679 = mux(_T_87, UInt<1>("h0"), _T_678) @[Lookup.scala 33:37]
    node _T_680 = mux(_T_85, UInt<1>("h0"), _T_679) @[Lookup.scala 33:37]
    node _T_681 = mux(_T_83, UInt<1>("h0"), _T_680) @[Lookup.scala 33:37]
    node _T_682 = mux(_T_81, UInt<1>("h0"), _T_681) @[Lookup.scala 33:37]
    node _T_683 = mux(_T_79, UInt<1>("h0"), _T_682) @[Lookup.scala 33:37]
    node _T_684 = mux(_T_77, UInt<1>("h0"), _T_683) @[Lookup.scala 33:37]
    node _T_685 = mux(_T_75, UInt<1>("h0"), _T_684) @[Lookup.scala 33:37]
    node _T_686 = mux(_T_73, UInt<1>("h0"), _T_685) @[Lookup.scala 33:37]
    node _T_687 = mux(_T_71, UInt<1>("h0"), _T_686) @[Lookup.scala 33:37]
    node _T_688 = mux(_T_69, UInt<1>("h0"), _T_687) @[Lookup.scala 33:37]
    node _T_689 = mux(_T_67, UInt<1>("h0"), _T_688) @[Lookup.scala 33:37]
    node _T_690 = mux(_T_65, UInt<1>("h0"), _T_689) @[Lookup.scala 33:37]
    node _T_691 = mux(_T_63, UInt<1>("h0"), _T_690) @[Lookup.scala 33:37]
    node _T_692 = mux(_T_61, UInt<1>("h0"), _T_691) @[Lookup.scala 33:37]
    node _T_693 = mux(_T_59, UInt<1>("h0"), _T_692) @[Lookup.scala 33:37]
    node _T_694 = mux(_T_57, UInt<1>("h0"), _T_693) @[Lookup.scala 33:37]
    node _T_695 = mux(_T_55, UInt<1>("h0"), _T_694) @[Lookup.scala 33:37]
    node _T_696 = mux(_T_53, UInt<1>("h0"), _T_695) @[Lookup.scala 33:37]
    node _T_697 = mux(_T_51, UInt<1>("h0"), _T_696) @[Lookup.scala 33:37]
    node _T_698 = mux(_T_49, UInt<1>("h0"), _T_697) @[Lookup.scala 33:37]
    node _T_699 = mux(_T_47, UInt<1>("h0"), _T_698) @[Lookup.scala 33:37]
    node _T_700 = mux(_T_45, UInt<1>("h0"), _T_699) @[Lookup.scala 33:37]
    node _T_701 = mux(_T_43, UInt<1>("h0"), _T_700) @[Lookup.scala 33:37]
    node _T_702 = mux(_T_41, UInt<1>("h0"), _T_701) @[Lookup.scala 33:37]
    node _T_703 = mux(_T_39, UInt<1>("h0"), _T_702) @[Lookup.scala 33:37]
    node _T_704 = mux(_T_37, UInt<1>("h0"), _T_703) @[Lookup.scala 33:37]
    node _T_705 = mux(_T_35, UInt<1>("h0"), _T_704) @[Lookup.scala 33:37]
    node _T_706 = mux(_T_33, UInt<1>("h0"), _T_705) @[Lookup.scala 33:37]
    node _T_707 = mux(_T_31, UInt<1>("h0"), _T_706) @[Lookup.scala 33:37]
    node _T_708 = mux(_T_29, UInt<1>("h0"), _T_707) @[Lookup.scala 33:37]
    node _T_709 = mux(_T_27, UInt<1>("h0"), _T_708) @[Lookup.scala 33:37]
    node _T_710 = mux(_T_25, UInt<1>("h0"), _T_709) @[Lookup.scala 33:37]
    node _T_711 = mux(_T_23, UInt<1>("h0"), _T_710) @[Lookup.scala 33:37]
    node _T_712 = mux(_T_21, UInt<1>("h0"), _T_711) @[Lookup.scala 33:37]
    node _T_713 = mux(_T_19, UInt<1>("h0"), _T_712) @[Lookup.scala 33:37]
    node _T_714 = mux(_T_17, UInt<1>("h0"), _T_713) @[Lookup.scala 33:37]
    node _T_715 = mux(_T_15, UInt<1>("h0"), _T_714) @[Lookup.scala 33:37]
    node _T_716 = mux(_T_13, UInt<1>("h0"), _T_715) @[Lookup.scala 33:37]
    node _T_717 = mux(_T_11, UInt<1>("h0"), _T_716) @[Lookup.scala 33:37]
    node _T_718 = mux(_T_9, UInt<1>("h0"), _T_717) @[Lookup.scala 33:37]
    node _T_719 = mux(_T_7, UInt<1>("h0"), _T_718) @[Lookup.scala 33:37]
    node _T_720 = mux(_T_5, UInt<1>("h0"), _T_719) @[Lookup.scala 33:37]
    node _T_721 = mux(_T_3, UInt<1>("h0"), _T_720) @[Lookup.scala 33:37]
    node ctrlSignals_12 = mux(_T_1, UInt<1>("h0"), _T_721) @[Lookup.scala 33:37]
    io.pc_sel <= ctrlSignals_0 @[Control.scala 149:16]
    node _T_722 = bits(ctrlSignals_6, 0, 0) @[Control.scala 150:34]
    io.inst_kill <= _T_722 @[Control.scala 150:16]
    io.A_sel <= ctrlSignals_1 @[Control.scala 153:14]
    io.B_sel <= ctrlSignals_2 @[Control.scala 154:14]
    io.imm_sel <= ctrlSignals_3 @[Control.scala 155:14]
    io.alu_op <= ctrlSignals_4 @[Control.scala 156:14]
    io.br_type <= ctrlSignals_5 @[Control.scala 157:14]
    io.st_type <= ctrlSignals_7 @[Control.scala 158:14]
    io.ld_type <= ctrlSignals_8 @[Control.scala 161:14]
    io.wb_sel <= ctrlSignals_9 @[Control.scala 162:14]
    node _T_723 = bits(ctrlSignals_10, 0, 0) @[Control.scala 163:33]
    io.wb_en <= _T_723 @[Control.scala 163:14]
    io.csr_cmd <= ctrlSignals_11 @[Control.scala 164:14]
    io.illegal <= ctrlSignals_12 @[Control.scala 165:14]

  module Core :
    input clock : Clock
    input reset : Reset
    output io : { host : { flip fromhost : { valid : UInt<1>, bits : UInt<32>}, tohost : UInt<32>}, flip icache : { flip abort : UInt<1>, flip req : { valid : UInt<1>, bits : { addr : UInt<32>, data : UInt<32>, mask : UInt<4>}}, resp : { valid : UInt<1>, bits : { data : UInt<32>}}}, flip dcache : { flip abort : UInt<1>, flip req : { valid : UInt<1>, bits : { addr : UInt<32>, data : UInt<32>, mask : UInt<4>}}, resp : { valid : UInt<1>, bits : { data : UInt<32>}}}}
  
    inst dpath of Datapath @[Core.scala 35:21]
    dpath.clock <= clock
    dpath.reset <= reset
    inst ctrl of Control @[Core.scala 36:21]
    ctrl.clock <= clock
    ctrl.reset <= reset
    io.host.tohost <= dpath.io.host.tohost @[Core.scala 38:11]
    dpath.io.host.fromhost.bits <= io.host.fromhost.bits @[Core.scala 38:11]
    dpath.io.host.fromhost.valid <= io.host.fromhost.valid @[Core.scala 38:11]
    dpath.io.icache.resp.bits.data <= io.icache.resp.bits.data @[Core.scala 39:19]
    dpath.io.icache.resp.valid <= io.icache.resp.valid @[Core.scala 39:19]
    io.icache.req.bits.mask <= dpath.io.icache.req.bits.mask @[Core.scala 39:19]
    io.icache.req.bits.data <= dpath.io.icache.req.bits.data @[Core.scala 39:19]
    io.icache.req.bits.addr <= dpath.io.icache.req.bits.addr @[Core.scala 39:19]
    io.icache.req.valid <= dpath.io.icache.req.valid @[Core.scala 39:19]
    io.icache.abort <= dpath.io.icache.abort @[Core.scala 39:19]
    dpath.io.dcache.resp.bits.data <= io.dcache.resp.bits.data @[Core.scala 40:19]
    dpath.io.dcache.resp.valid <= io.dcache.resp.valid @[Core.scala 40:19]
    io.dcache.req.bits.mask <= dpath.io.dcache.req.bits.mask @[Core.scala 40:19]
    io.dcache.req.bits.data <= dpath.io.dcache.req.bits.data @[Core.scala 40:19]
    io.dcache.req.bits.addr <= dpath.io.dcache.req.bits.addr @[Core.scala 40:19]
    io.dcache.req.valid <= dpath.io.dcache.req.valid @[Core.scala 40:19]
    io.dcache.abort <= dpath.io.dcache.abort @[Core.scala 40:19]
    dpath.io.ctrl.illegal <= ctrl.io.illegal @[Core.scala 41:17]
    dpath.io.ctrl.csr_cmd <= ctrl.io.csr_cmd @[Core.scala 41:17]
    dpath.io.ctrl.wb_en <= ctrl.io.wb_en @[Core.scala 41:17]
    dpath.io.ctrl.wb_sel <= ctrl.io.wb_sel @[Core.scala 41:17]
    dpath.io.ctrl.ld_type <= ctrl.io.ld_type @[Core.scala 41:17]
    dpath.io.ctrl.st_type <= ctrl.io.st_type @[Core.scala 41:17]
    dpath.io.ctrl.br_type <= ctrl.io.br_type @[Core.scala 41:17]
    dpath.io.ctrl.alu_op <= ctrl.io.alu_op @[Core.scala 41:17]
    dpath.io.ctrl.imm_sel <= ctrl.io.imm_sel @[Core.scala 41:17]
    dpath.io.ctrl.B_sel <= ctrl.io.B_sel @[Core.scala 41:17]
    dpath.io.ctrl.A_sel <= ctrl.io.A_sel @[Core.scala 41:17]
    dpath.io.ctrl.inst_kill <= ctrl.io.inst_kill @[Core.scala 41:17]
    dpath.io.ctrl.pc_sel <= ctrl.io.pc_sel @[Core.scala 41:17]
    ctrl.io.inst <= dpath.io.ctrl.inst @[Core.scala 41:17]

  module Cache :
    input clock : Clock
    input reset : Reset
    output io : { cpu : { flip abort : UInt<1>, flip req : { valid : UInt<1>, bits : { addr : UInt<32>, data : UInt<32>, mask : UInt<4>}}, resp : { valid : UInt<1>, bits : { data : UInt<32>}}}, nasti : { aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, region : UInt<4>, id : UInt<5>, user : UInt<1>}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, last : UInt<1>, id : UInt<5>, strb : UInt<8>, user : UInt<1>}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>, id : UInt<5>, user : UInt<1>}}, ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, region : UInt<4>, id : UInt<5>, user : UInt<1>}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>, data : UInt<64>, last : UInt<1>, id : UInt<5>, user : UInt<1>}}}}
  
    reg state : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[Cache.scala 58:22]
    reg v : UInt<256>, clock with :
      reset => (reset, UInt<256>("h0")) @[Cache.scala 60:25]
    reg d : UInt<256>, clock with :
      reset => (reset, UInt<256>("h0")) @[Cache.scala 61:25]
    smem metaMem : { tag : UInt<20>} [256] @[Cache.scala 62:29]
    smem dataMem_0 : UInt<8>[4] [256] @[Cache.scala 63:46]
    smem dataMem_1 : UInt<8>[4] [256] @[Cache.scala 63:46]
    smem dataMem_2 : UInt<8>[4] [256] @[Cache.scala 63:46]
    smem dataMem_3 : UInt<8>[4] [256] @[Cache.scala 63:46]
    reg addr_reg : UInt<32>, clock with :
      reset => (UInt<1>("h0"), addr_reg) @[Cache.scala 65:21]
    reg cpu_data : UInt<32>, clock with :
      reset => (UInt<1>("h0"), cpu_data) @[Cache.scala 66:21]
    reg cpu_mask : UInt<4>, clock with :
      reset => (UInt<1>("h0"), cpu_mask) @[Cache.scala 67:21]
    node _T = and(io.nasti.r.ready, io.nasti.r.valid) @[Decoupled.scala 40:37]
    reg read_count : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Counter.scala 29:33]
    wire read_wrap_out : UInt<1>
    read_wrap_out <= UInt<1>("h0")
    when _T : @[Counter.scala 67:17]
      node _T_1 = eq(read_count, UInt<1>("h1")) @[Counter.scala 38:24]
      node _T_2 = add(read_count, UInt<1>("h1")) @[Counter.scala 39:22]
      node _T_3 = tail(_T_2, 1) @[Counter.scala 39:22]
      read_count <= _T_3 @[Counter.scala 39:13]
      read_wrap_out <= _T_1 @[Counter.scala 67:24]
    node _T_4 = and(io.nasti.w.ready, io.nasti.w.valid) @[Decoupled.scala 40:37]
    reg write_count : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Counter.scala 29:33]
    wire write_wrap_out : UInt<1>
    write_wrap_out <= UInt<1>("h0")
    when _T_4 : @[Counter.scala 67:17]
      node _T_5 = eq(write_count, UInt<1>("h1")) @[Counter.scala 38:24]
      node _T_6 = add(write_count, UInt<1>("h1")) @[Counter.scala 39:22]
      node _T_7 = tail(_T_6, 1) @[Counter.scala 39:22]
      write_count <= _T_7 @[Counter.scala 39:13]
      write_wrap_out <= _T_5 @[Counter.scala 67:24]
    node is_idle = eq(state, UInt<3>("h0")) @[Cache.scala 74:25]
    node is_read = eq(state, UInt<3>("h1")) @[Cache.scala 75:25]
    node is_write = eq(state, UInt<3>("h2")) @[Cache.scala 76:25]
    node _T_8 = eq(state, UInt<3>("h6")) @[Cache.scala 77:25]
    node is_alloc = and(_T_8, read_wrap_out) @[Cache.scala 77:38]
    reg is_alloc_reg : UInt<1>, clock with :
      reset => (UInt<1>("h0"), is_alloc_reg) @[Cache.scala 78:29]
    is_alloc_reg <= is_alloc @[Cache.scala 78:29]
    wire hit : UInt<1> @[Cache.scala 80:17]
    node _T_9 = or(hit, is_alloc_reg) @[Cache.scala 81:30]
    node _T_10 = and(is_write, _T_9) @[Cache.scala 81:22]
    node _T_11 = eq(io.cpu.abort, UInt<1>("h0")) @[Cache.scala 81:50]
    node _T_12 = and(_T_10, _T_11) @[Cache.scala 81:47]
    node wen = or(_T_12, is_alloc) @[Cache.scala 81:64]
    node _T_13 = eq(wen, UInt<1>("h0")) @[Cache.scala 82:13]
    node _T_14 = or(is_idle, is_read) @[Cache.scala 82:30]
    node _T_15 = and(_T_13, _T_14) @[Cache.scala 82:18]
    node ren = and(_T_15, io.cpu.req.valid) @[Cache.scala 82:42]
    reg ren_reg : UInt<1>, clock with :
      reset => (UInt<1>("h0"), ren_reg) @[Cache.scala 83:24]
    ren_reg <= ren @[Cache.scala 83:24]
    node idx = bits(io.cpu.req.bits.addr, 11, 4) @[Cache.scala 86:22]
    node tag_reg = bits(addr_reg, 31, 12) @[Cache.scala 87:26]
    node idx_reg = bits(addr_reg, 11, 4) @[Cache.scala 88:26]
    node off_reg = bits(addr_reg, 3, 2) @[Cache.scala 89:26]
    wire _T_16 : UInt @[Cache.scala 91:27]
    _T_16 is invalid @[Cache.scala 91:27]
    when ren : @[Cache.scala 91:27]
      _T_16 <= idx @[Cache.scala 91:27]
      node _T_17 = or(_T_16, UInt<8>("h0")) @[Cache.scala 91:27]
      node _T_18 = bits(_T_17, 7, 0) @[Cache.scala 91:27]
      read mport rmeta = metaMem[_T_18], clock @[Cache.scala 91:27]
    wire _T_19 : UInt @[Cache.scala 92:39]
    _T_19 is invalid @[Cache.scala 92:39]
    when ren : @[Cache.scala 92:39]
      _T_19 <= idx @[Cache.scala 92:39]
      node _T_20 = or(_T_19, UInt<8>("h0")) @[Cache.scala 92:39]
      node _T_21 = bits(_T_20, 7, 0) @[Cache.scala 92:39]
      read mport _T_22 = dataMem_0[_T_21], clock @[Cache.scala 92:39]
    node _T_23 = cat(_T_22[1], _T_22[0]) @[Cache.scala 92:50]
    node _T_24 = cat(_T_22[3], _T_22[2]) @[Cache.scala 92:50]
    node _T_25 = cat(_T_24, _T_23) @[Cache.scala 92:50]
    wire _T_26 : UInt @[Cache.scala 92:39]
    _T_26 is invalid @[Cache.scala 92:39]
    when ren : @[Cache.scala 92:39]
      _T_26 <= idx @[Cache.scala 92:39]
      node _T_27 = or(_T_26, UInt<8>("h0")) @[Cache.scala 92:39]
      node _T_28 = bits(_T_27, 7, 0) @[Cache.scala 92:39]
      read mport _T_29 = dataMem_1[_T_28], clock @[Cache.scala 92:39]
    node _T_30 = cat(_T_29[1], _T_29[0]) @[Cache.scala 92:50]
    node _T_31 = cat(_T_29[3], _T_29[2]) @[Cache.scala 92:50]
    node _T_32 = cat(_T_31, _T_30) @[Cache.scala 92:50]
    wire _T_33 : UInt @[Cache.scala 92:39]
    _T_33 is invalid @[Cache.scala 92:39]
    when ren : @[Cache.scala 92:39]
      _T_33 <= idx @[Cache.scala 92:39]
      node _T_34 = or(_T_33, UInt<8>("h0")) @[Cache.scala 92:39]
      node _T_35 = bits(_T_34, 7, 0) @[Cache.scala 92:39]
      read mport _T_36 = dataMem_2[_T_35], clock @[Cache.scala 92:39]
    node _T_37 = cat(_T_36[1], _T_36[0]) @[Cache.scala 92:50]
    node _T_38 = cat(_T_36[3], _T_36[2]) @[Cache.scala 92:50]
    node _T_39 = cat(_T_38, _T_37) @[Cache.scala 92:50]
    wire _T_40 : UInt @[Cache.scala 92:39]
    _T_40 is invalid @[Cache.scala 92:39]
    when ren : @[Cache.scala 92:39]
      _T_40 <= idx @[Cache.scala 92:39]
      node _T_41 = or(_T_40, UInt<8>("h0")) @[Cache.scala 92:39]
      node _T_42 = bits(_T_41, 7, 0) @[Cache.scala 92:39]
      read mport _T_43 = dataMem_3[_T_42], clock @[Cache.scala 92:39]
    node _T_44 = cat(_T_43[1], _T_43[0]) @[Cache.scala 92:50]
    node _T_45 = cat(_T_43[3], _T_43[2]) @[Cache.scala 92:50]
    node _T_46 = cat(_T_45, _T_44) @[Cache.scala 92:50]
    node _T_47 = cat(_T_32, _T_25) @[Cat.scala 30:58]
    node _T_48 = cat(_T_46, _T_39) @[Cat.scala 30:58]
    node rdata = cat(_T_48, _T_47) @[Cat.scala 30:58]
    reg rdata_buf : UInt<128>, clock with :
      reset => (UInt<1>("h0"), rdata_buf) @[Reg.scala 15:16]
    when ren_reg : @[Reg.scala 16:19]
      rdata_buf <= rdata @[Reg.scala 16:23]
    reg refill_buf : UInt<64>[2], clock with :
      reset => (UInt<1>("h0"), refill_buf) @[Cache.scala 94:23]
    node _T_49 = cat(refill_buf[1], refill_buf[0]) @[Cache.scala 95:43]
    node _T_50 = mux(ren_reg, rdata, rdata_buf) @[Cache.scala 95:54]
    node read = mux(is_alloc_reg, _T_49, _T_50) @[Cache.scala 95:17]
    node _T_51 = dshr(v, idx_reg) @[Cache.scala 97:11]
    node _T_52 = bits(_T_51, 0, 0) @[Cache.scala 97:11]
    node _T_53 = eq(rmeta.tag, tag_reg) @[Cache.scala 97:34]
    node _T_54 = and(_T_52, _T_53) @[Cache.scala 97:21]
    hit <= _T_54 @[Cache.scala 97:7]
    node _T_55 = bits(read, 31, 0) @[Cache.scala 100:62]
    node _T_56 = bits(read, 63, 32) @[Cache.scala 100:62]
    node _T_57 = bits(read, 95, 64) @[Cache.scala 100:62]
    node _T_58 = bits(read, 127, 96) @[Cache.scala 100:62]
    wire _T_59 : UInt<32>[4] @[Cache.scala 100:52]
    _T_59[0] <= _T_55 @[Cache.scala 100:52]
    _T_59[1] <= _T_56 @[Cache.scala 100:52]
    _T_59[2] <= _T_57 @[Cache.scala 100:52]
    _T_59[3] <= _T_58 @[Cache.scala 100:52]
    io.cpu.resp.bits.data <= _T_59[off_reg] @[Cache.scala 100:25]
    node _T_60 = and(is_read, hit) @[Cache.scala 101:47]
    node _T_61 = or(is_idle, _T_60) @[Cache.scala 101:36]
    node _T_62 = orr(cpu_mask) @[Cache.scala 101:83]
    node _T_63 = eq(_T_62, UInt<1>("h0")) @[Cache.scala 101:73]
    node _T_64 = and(is_alloc_reg, _T_63) @[Cache.scala 101:70]
    node _T_65 = or(_T_61, _T_64) @[Cache.scala 101:54]
    io.cpu.resp.valid <= _T_65 @[Cache.scala 101:25]
    when io.cpu.resp.valid : @[Cache.scala 103:27]
      addr_reg <= io.cpu.req.bits.addr @[Cache.scala 104:15]
      cpu_data <= io.cpu.req.bits.data @[Cache.scala 105:15]
      cpu_mask <= io.cpu.req.bits.mask @[Cache.scala 106:15]
    wire wmeta : { tag : UInt<20>} @[Cache.scala 109:19]
    wmeta.tag <= tag_reg @[Cache.scala 110:13]
    node _T_66 = eq(is_alloc, UInt<1>("h0")) @[Cache.scala 112:19]
    node _T_67 = cat(off_reg, UInt<2>("h0")) @[Cat.scala 30:58]
    node _T_68 = dshl(cpu_mask, _T_67) @[Cache.scala 112:40]
    node _T_69 = cvt(_T_68) @[Cache.scala 112:80]
    node wmask = mux(_T_66, _T_69, asSInt(UInt<1>("h1"))) @[Cache.scala 112:18]
    node _T_70 = eq(is_alloc, UInt<1>("h0")) @[Cache.scala 113:19]
    node _T_71 = cat(cpu_data, cpu_data) @[Cat.scala 30:58]
    node _T_72 = cat(_T_71, _T_71) @[Cat.scala 30:58]
    node _T_73 = cat(io.nasti.r.bits.data, refill_buf[0]) @[Cat.scala 30:58]
    node wdata = mux(_T_70, _T_72, _T_73) @[Cache.scala 113:18]
    when wen : @[Cache.scala 116:13]
      node _T_74 = dshl(UInt<1>("h1"), idx_reg) @[Cache.scala 117:18]
      node _T_75 = or(v, _T_74) @[Cache.scala 117:18]
      node _T_76 = not(v) @[Cache.scala 117:18]
      node _T_77 = or(_T_76, _T_74) @[Cache.scala 117:18]
      node _T_78 = not(_T_77) @[Cache.scala 117:18]
      node _T_79 = mux(UInt<1>("h1"), _T_75, _T_78) @[Cache.scala 117:18]
      v <= _T_79 @[Cache.scala 117:7]
      node _T_80 = eq(is_alloc, UInt<1>("h0")) @[Cache.scala 118:28]
      node _T_81 = dshl(UInt<1>("h1"), idx_reg) @[Cache.scala 118:18]
      node _T_82 = or(d, _T_81) @[Cache.scala 118:18]
      node _T_83 = not(d) @[Cache.scala 118:18]
      node _T_84 = or(_T_83, _T_81) @[Cache.scala 118:18]
      node _T_85 = not(_T_84) @[Cache.scala 118:18]
      node _T_86 = mux(_T_80, _T_82, _T_85) @[Cache.scala 118:18]
      d <= _T_86 @[Cache.scala 118:7]
      when is_alloc : @[Cache.scala 119:20]
        write mport _T_87 = metaMem[idx_reg], clock
        _T_87.tag <= wmeta.tag
      node _T_88 = bits(wdata, 7, 0) @[Cache.scala 123:53]
      node _T_89 = bits(wdata, 15, 8) @[Cache.scala 123:53]
      node _T_90 = bits(wdata, 23, 16) @[Cache.scala 123:53]
      node _T_91 = bits(wdata, 31, 24) @[Cache.scala 123:53]
      wire _T_92 : UInt<8>[4] @[Cache.scala 123:42]
      _T_92[0] <= _T_88 @[Cache.scala 123:42]
      _T_92[1] <= _T_89 @[Cache.scala 123:42]
      _T_92[2] <= _T_90 @[Cache.scala 123:42]
      _T_92[3] <= _T_91 @[Cache.scala 123:42]
      node _T_93 = bits(wmask, 3, 0) @[Cache.scala 124:37]
      node _T_94 = bits(_T_93, 0, 0) @[Cache.scala 124:71]
      node _T_95 = bits(_T_93, 1, 1) @[Cache.scala 124:71]
      node _T_96 = bits(_T_93, 2, 2) @[Cache.scala 124:71]
      node _T_97 = bits(_T_93, 3, 3) @[Cache.scala 124:71]
      write mport _T_98 = dataMem_0[idx_reg], clock
      when _T_94 :
        _T_98[0] <= _T_92[0]
      when _T_95 :
        _T_98[1] <= _T_92[1]
      when _T_96 :
        _T_98[2] <= _T_92[2]
      when _T_97 :
        _T_98[3] <= _T_92[3]
      node _T_99 = bits(wdata, 39, 32) @[Cache.scala 123:53]
      node _T_100 = bits(wdata, 47, 40) @[Cache.scala 123:53]
      node _T_101 = bits(wdata, 55, 48) @[Cache.scala 123:53]
      node _T_102 = bits(wdata, 63, 56) @[Cache.scala 123:53]
      wire _T_103 : UInt<8>[4] @[Cache.scala 123:42]
      _T_103[0] <= _T_99 @[Cache.scala 123:42]
      _T_103[1] <= _T_100 @[Cache.scala 123:42]
      _T_103[2] <= _T_101 @[Cache.scala 123:42]
      _T_103[3] <= _T_102 @[Cache.scala 123:42]
      node _T_104 = bits(wmask, 7, 4) @[Cache.scala 124:37]
      node _T_105 = bits(_T_104, 0, 0) @[Cache.scala 124:71]
      node _T_106 = bits(_T_104, 1, 1) @[Cache.scala 124:71]
      node _T_107 = bits(_T_104, 2, 2) @[Cache.scala 124:71]
      node _T_108 = bits(_T_104, 3, 3) @[Cache.scala 124:71]
      write mport _T_109 = dataMem_1[idx_reg], clock
      when _T_105 :
        _T_109[0] <= _T_103[0]
      when _T_106 :
        _T_109[1] <= _T_103[1]
      when _T_107 :
        _T_109[2] <= _T_103[2]
      when _T_108 :
        _T_109[3] <= _T_103[3]
      node _T_110 = bits(wdata, 71, 64) @[Cache.scala 123:53]
      node _T_111 = bits(wdata, 79, 72) @[Cache.scala 123:53]
      node _T_112 = bits(wdata, 87, 80) @[Cache.scala 123:53]
      node _T_113 = bits(wdata, 95, 88) @[Cache.scala 123:53]
      wire _T_114 : UInt<8>[4] @[Cache.scala 123:42]
      _T_114[0] <= _T_110 @[Cache.scala 123:42]
      _T_114[1] <= _T_111 @[Cache.scala 123:42]
      _T_114[2] <= _T_112 @[Cache.scala 123:42]
      _T_114[3] <= _T_113 @[Cache.scala 123:42]
      node _T_115 = bits(wmask, 11, 8) @[Cache.scala 124:37]
      node _T_116 = bits(_T_115, 0, 0) @[Cache.scala 124:71]
      node _T_117 = bits(_T_115, 1, 1) @[Cache.scala 124:71]
      node _T_118 = bits(_T_115, 2, 2) @[Cache.scala 124:71]
      node _T_119 = bits(_T_115, 3, 3) @[Cache.scala 124:71]
      write mport _T_120 = dataMem_2[idx_reg], clock
      when _T_116 :
        _T_120[0] <= _T_114[0]
      when _T_117 :
        _T_120[1] <= _T_114[1]
      when _T_118 :
        _T_120[2] <= _T_114[2]
      when _T_119 :
        _T_120[3] <= _T_114[3]
      node _T_121 = bits(wdata, 103, 96) @[Cache.scala 123:53]
      node _T_122 = bits(wdata, 111, 104) @[Cache.scala 123:53]
      node _T_123 = bits(wdata, 119, 112) @[Cache.scala 123:53]
      node _T_124 = bits(wdata, 127, 120) @[Cache.scala 123:53]
      wire _T_125 : UInt<8>[4] @[Cache.scala 123:42]
      _T_125[0] <= _T_121 @[Cache.scala 123:42]
      _T_125[1] <= _T_122 @[Cache.scala 123:42]
      _T_125[2] <= _T_123 @[Cache.scala 123:42]
      _T_125[3] <= _T_124 @[Cache.scala 123:42]
      node _T_126 = bits(wmask, 15, 12) @[Cache.scala 124:37]
      node _T_127 = bits(_T_126, 0, 0) @[Cache.scala 124:71]
      node _T_128 = bits(_T_126, 1, 1) @[Cache.scala 124:71]
      node _T_129 = bits(_T_126, 2, 2) @[Cache.scala 124:71]
      node _T_130 = bits(_T_126, 3, 3) @[Cache.scala 124:71]
      write mport _T_131 = dataMem_3[idx_reg], clock
      when _T_127 :
        _T_131[0] <= _T_125[0]
      when _T_128 :
        _T_131[1] <= _T_125[1]
      when _T_129 :
        _T_131[2] <= _T_125[2]
      when _T_130 :
        _T_131[3] <= _T_125[3]
    node _T_132 = cat(tag_reg, idx_reg) @[Cat.scala 30:58]
    node _T_133 = dshl(_T_132, UInt<3>("h4")) @[Cache.scala 130:33]
    wire _T_134 : { addr : UInt<32>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, region : UInt<4>, id : UInt<5>, user : UInt<1>} @[nasti.scala 178:18]
    _T_134 is invalid @[nasti.scala 178:18]
    _T_134.id <= UInt<1>("h0") @[nasti.scala 179:11]
    _T_134.addr <= _T_133 @[nasti.scala 180:13]
    _T_134.len <= UInt<1>("h1") @[nasti.scala 181:12]
    _T_134.size <= UInt<2>("h3") @[nasti.scala 182:13]
    _T_134.burst <= UInt<1>("h1") @[nasti.scala 183:14]
    _T_134.lock <= UInt<1>("h0") @[nasti.scala 184:13]
    _T_134.cache <= UInt<1>("h0") @[nasti.scala 185:14]
    node _T_135 = cat(UInt<1>("h0"), UInt<1>("h0")) @[Cat.scala 30:58]
    node _T_136 = cat(_T_135, UInt<1>("h0")) @[Cat.scala 30:58]
    _T_134.prot <= _T_136 @[nasti.scala 186:13]
    _T_134.qos <= UInt<1>("h0") @[nasti.scala 187:12]
    _T_134.region <= UInt<1>("h0") @[nasti.scala 188:15]
    _T_134.user <= UInt<1>("h0") @[nasti.scala 189:13]
    io.nasti.ar.bits.user <= _T_134.user @[Cache.scala 129:20]
    io.nasti.ar.bits.id <= _T_134.id @[Cache.scala 129:20]
    io.nasti.ar.bits.region <= _T_134.region @[Cache.scala 129:20]
    io.nasti.ar.bits.qos <= _T_134.qos @[Cache.scala 129:20]
    io.nasti.ar.bits.prot <= _T_134.prot @[Cache.scala 129:20]
    io.nasti.ar.bits.cache <= _T_134.cache @[Cache.scala 129:20]
    io.nasti.ar.bits.lock <= _T_134.lock @[Cache.scala 129:20]
    io.nasti.ar.bits.burst <= _T_134.burst @[Cache.scala 129:20]
    io.nasti.ar.bits.size <= _T_134.size @[Cache.scala 129:20]
    io.nasti.ar.bits.len <= _T_134.len @[Cache.scala 129:20]
    io.nasti.ar.bits.addr <= _T_134.addr @[Cache.scala 129:20]
    io.nasti.ar.valid <= UInt<1>("h0") @[Cache.scala 131:21]
    node _T_137 = eq(state, UInt<3>("h6")) @[Cache.scala 133:29]
    io.nasti.r.ready <= _T_137 @[Cache.scala 133:20]
    node _T_138 = and(io.nasti.r.ready, io.nasti.r.valid) @[Decoupled.scala 40:37]
    when _T_138 : @[Cache.scala 134:27]
      refill_buf[read_count] <= io.nasti.r.bits.data @[Cache.scala 134:52]
    node _T_139 = cat(rmeta.tag, idx_reg) @[Cat.scala 30:58]
    node _T_140 = dshl(_T_139, UInt<3>("h4")) @[Cache.scala 138:35]
    wire _T_141 : { addr : UInt<32>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, region : UInt<4>, id : UInt<5>, user : UInt<1>} @[nasti.scala 158:18]
    _T_141 is invalid @[nasti.scala 158:18]
    _T_141.id <= UInt<1>("h0") @[nasti.scala 159:11]
    _T_141.addr <= _T_140 @[nasti.scala 160:13]
    _T_141.len <= UInt<1>("h1") @[nasti.scala 161:12]
    _T_141.size <= UInt<2>("h3") @[nasti.scala 162:13]
    _T_141.burst <= UInt<1>("h1") @[nasti.scala 163:14]
    _T_141.lock <= UInt<1>("h0") @[nasti.scala 164:13]
    _T_141.cache <= UInt<1>("h0") @[nasti.scala 165:14]
    node _T_142 = cat(UInt<1>("h0"), UInt<1>("h0")) @[Cat.scala 30:58]
    node _T_143 = cat(_T_142, UInt<1>("h0")) @[Cat.scala 30:58]
    _T_141.prot <= _T_143 @[nasti.scala 166:13]
    _T_141.qos <= UInt<1>("h0") @[nasti.scala 167:12]
    _T_141.region <= UInt<1>("h0") @[nasti.scala 168:15]
    _T_141.user <= UInt<1>("h0") @[nasti.scala 169:13]
    io.nasti.aw.bits.user <= _T_141.user @[Cache.scala 137:20]
    io.nasti.aw.bits.id <= _T_141.id @[Cache.scala 137:20]
    io.nasti.aw.bits.region <= _T_141.region @[Cache.scala 137:20]
    io.nasti.aw.bits.qos <= _T_141.qos @[Cache.scala 137:20]
    io.nasti.aw.bits.prot <= _T_141.prot @[Cache.scala 137:20]
    io.nasti.aw.bits.cache <= _T_141.cache @[Cache.scala 137:20]
    io.nasti.aw.bits.lock <= _T_141.lock @[Cache.scala 137:20]
    io.nasti.aw.bits.burst <= _T_141.burst @[Cache.scala 137:20]
    io.nasti.aw.bits.size <= _T_141.size @[Cache.scala 137:20]
    io.nasti.aw.bits.len <= _T_141.len @[Cache.scala 137:20]
    io.nasti.aw.bits.addr <= _T_141.addr @[Cache.scala 137:20]
    io.nasti.aw.valid <= UInt<1>("h0") @[Cache.scala 139:21]
    node _T_144 = bits(read, 63, 0) @[Cache.scala 142:42]
    node _T_145 = bits(read, 127, 64) @[Cache.scala 142:42]
    wire _T_146 : UInt<64>[2] @[Cache.scala 142:32]
    _T_146[0] <= _T_144 @[Cache.scala 142:32]
    _T_146[1] <= _T_145 @[Cache.scala 142:32]
    wire _T_147 : { data : UInt<64>, last : UInt<1>, id : UInt<5>, strb : UInt<8>, user : UInt<1>} @[nasti.scala 198:17]
    _T_147 is invalid @[nasti.scala 198:17]
    node _T_148 = mux(UInt<1>("h1"), UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    _T_147.strb <= _T_148 @[nasti.scala 199:12]
    _T_147.data <= _T_146[write_count] @[nasti.scala 200:12]
    _T_147.last <= write_wrap_out @[nasti.scala 201:12]
    _T_147.id <= UInt<1>("h0") @[nasti.scala 202:12]
    _T_147.user <= UInt<1>("h0") @[nasti.scala 203:12]
    io.nasti.w.bits.user <= _T_147.user @[Cache.scala 141:19]
    io.nasti.w.bits.strb <= _T_147.strb @[Cache.scala 141:19]
    io.nasti.w.bits.id <= _T_147.id @[Cache.scala 141:19]
    io.nasti.w.bits.last <= _T_147.last @[Cache.scala 141:19]
    io.nasti.w.bits.data <= _T_147.data @[Cache.scala 141:19]
    io.nasti.w.valid <= UInt<1>("h0") @[Cache.scala 144:20]
    io.nasti.b.ready <= UInt<1>("h0") @[Cache.scala 146:20]
    node _T_149 = dshr(v, idx_reg) @[Cache.scala 149:19]
    node _T_150 = bits(_T_149, 0, 0) @[Cache.scala 149:19]
    node _T_151 = dshr(d, idx_reg) @[Cache.scala 149:33]
    node _T_152 = bits(_T_151, 0, 0) @[Cache.scala 149:33]
    node is_dirty = and(_T_150, _T_152) @[Cache.scala 149:29]
    node _T_153 = eq(UInt<3>("h0"), state) @[Conditional.scala 37:30]
    when _T_153 : @[Conditional.scala 40:58]
      when io.cpu.req.valid : @[Cache.scala 152:30]
        node _T_154 = orr(io.cpu.req.bits.mask) @[Cache.scala 153:43]
        node _T_155 = mux(_T_154, UInt<3>("h2"), UInt<3>("h1")) @[Cache.scala 153:21]
        state <= _T_155 @[Cache.scala 153:15]
    else :
      node _T_156 = eq(UInt<3>("h1"), state) @[Conditional.scala 37:30]
      when _T_156 : @[Conditional.scala 39:67]
        when hit : @[Cache.scala 157:17]
          when io.cpu.req.valid : @[Cache.scala 158:32]
            node _T_157 = orr(io.cpu.req.bits.mask) @[Cache.scala 159:45]
            node _T_158 = mux(_T_157, UInt<3>("h2"), UInt<3>("h1")) @[Cache.scala 159:23]
            state <= _T_158 @[Cache.scala 159:17]
          else :
            state <= UInt<3>("h0") @[Cache.scala 161:17]
        else :
          io.nasti.aw.valid <= is_dirty @[Cache.scala 164:27]
          node _T_159 = eq(is_dirty, UInt<1>("h0")) @[Cache.scala 165:30]
          io.nasti.ar.valid <= _T_159 @[Cache.scala 165:27]
          node _T_160 = and(io.nasti.aw.ready, io.nasti.aw.valid) @[Decoupled.scala 40:37]
          when _T_160 : @[Cache.scala 166:34]
            state <= UInt<3>("h3") @[Cache.scala 167:17]
          else :
            node _T_161 = and(io.nasti.ar.ready, io.nasti.ar.valid) @[Decoupled.scala 40:37]
            when _T_161 : @[Cache.scala 168:40]
              state <= UInt<3>("h6") @[Cache.scala 169:17]
      else :
        node _T_162 = eq(UInt<3>("h2"), state) @[Conditional.scala 37:30]
        when _T_162 : @[Conditional.scala 39:67]
          node _T_163 = or(hit, is_alloc_reg) @[Cache.scala 174:16]
          node _T_164 = or(_T_163, io.cpu.abort) @[Cache.scala 174:32]
          when _T_164 : @[Cache.scala 174:49]
            state <= UInt<3>("h0") @[Cache.scala 175:15]
          else :
            io.nasti.aw.valid <= is_dirty @[Cache.scala 177:27]
            node _T_165 = eq(is_dirty, UInt<1>("h0")) @[Cache.scala 178:30]
            io.nasti.ar.valid <= _T_165 @[Cache.scala 178:27]
            node _T_166 = and(io.nasti.aw.ready, io.nasti.aw.valid) @[Decoupled.scala 40:37]
            when _T_166 : @[Cache.scala 179:34]
              state <= UInt<3>("h3") @[Cache.scala 180:17]
            else :
              node _T_167 = and(io.nasti.ar.ready, io.nasti.ar.valid) @[Decoupled.scala 40:37]
              when _T_167 : @[Cache.scala 181:40]
                state <= UInt<3>("h6") @[Cache.scala 182:17]
        else :
          node _T_168 = eq(UInt<3>("h3"), state) @[Conditional.scala 37:30]
          when _T_168 : @[Conditional.scala 39:67]
            io.nasti.w.valid <= UInt<1>("h1") @[Cache.scala 187:24]
            when write_wrap_out : @[Cache.scala 188:28]
              state <= UInt<3>("h4") @[Cache.scala 189:15]
          else :
            node _T_169 = eq(UInt<3>("h4"), state) @[Conditional.scala 37:30]
            when _T_169 : @[Conditional.scala 39:67]
              io.nasti.b.ready <= UInt<1>("h1") @[Cache.scala 193:24]
              node _T_170 = and(io.nasti.b.ready, io.nasti.b.valid) @[Decoupled.scala 40:37]
              when _T_170 : @[Cache.scala 194:31]
                state <= UInt<3>("h5") @[Cache.scala 195:15]
            else :
              node _T_171 = eq(UInt<3>("h5"), state) @[Conditional.scala 37:30]
              when _T_171 : @[Conditional.scala 39:67]
                io.nasti.ar.valid <= UInt<1>("h1") @[Cache.scala 199:25]
                node _T_172 = and(io.nasti.ar.ready, io.nasti.ar.valid) @[Decoupled.scala 40:37]
                when _T_172 : @[Cache.scala 200:32]
                  state <= UInt<3>("h6") @[Cache.scala 201:15]
              else :
                node _T_173 = eq(UInt<3>("h6"), state) @[Conditional.scala 37:30]
                when _T_173 : @[Conditional.scala 39:67]
                  when read_wrap_out : @[Cache.scala 205:27]
                    node _T_174 = orr(cpu_mask) @[Cache.scala 206:31]
                    node _T_175 = mux(_T_174, UInt<3>("h2"), UInt<3>("h0")) @[Cache.scala 206:21]
                    state <= _T_175 @[Cache.scala 206:15]

  module Cache_1 :
    input clock : Clock
    input reset : Reset
    output io : { cpu : { flip abort : UInt<1>, flip req : { valid : UInt<1>, bits : { addr : UInt<32>, data : UInt<32>, mask : UInt<4>}}, resp : { valid : UInt<1>, bits : { data : UInt<32>}}}, nasti : { aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, region : UInt<4>, id : UInt<5>, user : UInt<1>}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, last : UInt<1>, id : UInt<5>, strb : UInt<8>, user : UInt<1>}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>, id : UInt<5>, user : UInt<1>}}, ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, region : UInt<4>, id : UInt<5>, user : UInt<1>}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>, data : UInt<64>, last : UInt<1>, id : UInt<5>, user : UInt<1>}}}}
  
    reg state : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[Cache.scala 58:22]
    reg v : UInt<256>, clock with :
      reset => (reset, UInt<256>("h0")) @[Cache.scala 60:25]
    reg d : UInt<256>, clock with :
      reset => (reset, UInt<256>("h0")) @[Cache.scala 61:25]
    smem metaMem : { tag : UInt<20>} [256] @[Cache.scala 62:29]
    smem dataMem_0 : UInt<8>[4] [256] @[Cache.scala 63:46]
    smem dataMem_1 : UInt<8>[4] [256] @[Cache.scala 63:46]
    smem dataMem_2 : UInt<8>[4] [256] @[Cache.scala 63:46]
    smem dataMem_3 : UInt<8>[4] [256] @[Cache.scala 63:46]
    reg addr_reg : UInt<32>, clock with :
      reset => (UInt<1>("h0"), addr_reg) @[Cache.scala 65:21]
    reg cpu_data : UInt<32>, clock with :
      reset => (UInt<1>("h0"), cpu_data) @[Cache.scala 66:21]
    reg cpu_mask : UInt<4>, clock with :
      reset => (UInt<1>("h0"), cpu_mask) @[Cache.scala 67:21]
    node _T = and(io.nasti.r.ready, io.nasti.r.valid) @[Decoupled.scala 40:37]
    reg read_count : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Counter.scala 29:33]
    wire read_wrap_out : UInt<1>
    read_wrap_out <= UInt<1>("h0")
    when _T : @[Counter.scala 67:17]
      node _T_1 = eq(read_count, UInt<1>("h1")) @[Counter.scala 38:24]
      node _T_2 = add(read_count, UInt<1>("h1")) @[Counter.scala 39:22]
      node _T_3 = tail(_T_2, 1) @[Counter.scala 39:22]
      read_count <= _T_3 @[Counter.scala 39:13]
      read_wrap_out <= _T_1 @[Counter.scala 67:24]
    node _T_4 = and(io.nasti.w.ready, io.nasti.w.valid) @[Decoupled.scala 40:37]
    reg write_count : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Counter.scala 29:33]
    wire write_wrap_out : UInt<1>
    write_wrap_out <= UInt<1>("h0")
    when _T_4 : @[Counter.scala 67:17]
      node _T_5 = eq(write_count, UInt<1>("h1")) @[Counter.scala 38:24]
      node _T_6 = add(write_count, UInt<1>("h1")) @[Counter.scala 39:22]
      node _T_7 = tail(_T_6, 1) @[Counter.scala 39:22]
      write_count <= _T_7 @[Counter.scala 39:13]
      write_wrap_out <= _T_5 @[Counter.scala 67:24]
    node is_idle = eq(state, UInt<3>("h0")) @[Cache.scala 74:25]
    node is_read = eq(state, UInt<3>("h1")) @[Cache.scala 75:25]
    node is_write = eq(state, UInt<3>("h2")) @[Cache.scala 76:25]
    node _T_8 = eq(state, UInt<3>("h6")) @[Cache.scala 77:25]
    node is_alloc = and(_T_8, read_wrap_out) @[Cache.scala 77:38]
    reg is_alloc_reg : UInt<1>, clock with :
      reset => (UInt<1>("h0"), is_alloc_reg) @[Cache.scala 78:29]
    is_alloc_reg <= is_alloc @[Cache.scala 78:29]
    wire hit : UInt<1> @[Cache.scala 80:17]
    node _T_9 = or(hit, is_alloc_reg) @[Cache.scala 81:30]
    node _T_10 = and(is_write, _T_9) @[Cache.scala 81:22]
    node _T_11 = eq(io.cpu.abort, UInt<1>("h0")) @[Cache.scala 81:50]
    node _T_12 = and(_T_10, _T_11) @[Cache.scala 81:47]
    node wen = or(_T_12, is_alloc) @[Cache.scala 81:64]
    node _T_13 = eq(wen, UInt<1>("h0")) @[Cache.scala 82:13]
    node _T_14 = or(is_idle, is_read) @[Cache.scala 82:30]
    node _T_15 = and(_T_13, _T_14) @[Cache.scala 82:18]
    node ren = and(_T_15, io.cpu.req.valid) @[Cache.scala 82:42]
    reg ren_reg : UInt<1>, clock with :
      reset => (UInt<1>("h0"), ren_reg) @[Cache.scala 83:24]
    ren_reg <= ren @[Cache.scala 83:24]
    node idx = bits(io.cpu.req.bits.addr, 11, 4) @[Cache.scala 86:22]
    node tag_reg = bits(addr_reg, 31, 12) @[Cache.scala 87:26]
    node idx_reg = bits(addr_reg, 11, 4) @[Cache.scala 88:26]
    node off_reg = bits(addr_reg, 3, 2) @[Cache.scala 89:26]
    wire _T_16 : UInt @[Cache.scala 91:27]
    _T_16 is invalid @[Cache.scala 91:27]
    when ren : @[Cache.scala 91:27]
      _T_16 <= idx @[Cache.scala 91:27]
      node _T_17 = or(_T_16, UInt<8>("h0")) @[Cache.scala 91:27]
      node _T_18 = bits(_T_17, 7, 0) @[Cache.scala 91:27]
      read mport rmeta = metaMem[_T_18], clock @[Cache.scala 91:27]
    wire _T_19 : UInt @[Cache.scala 92:39]
    _T_19 is invalid @[Cache.scala 92:39]
    when ren : @[Cache.scala 92:39]
      _T_19 <= idx @[Cache.scala 92:39]
      node _T_20 = or(_T_19, UInt<8>("h0")) @[Cache.scala 92:39]
      node _T_21 = bits(_T_20, 7, 0) @[Cache.scala 92:39]
      read mport _T_22 = dataMem_0[_T_21], clock @[Cache.scala 92:39]
    node _T_23 = cat(_T_22[1], _T_22[0]) @[Cache.scala 92:50]
    node _T_24 = cat(_T_22[3], _T_22[2]) @[Cache.scala 92:50]
    node _T_25 = cat(_T_24, _T_23) @[Cache.scala 92:50]
    wire _T_26 : UInt @[Cache.scala 92:39]
    _T_26 is invalid @[Cache.scala 92:39]
    when ren : @[Cache.scala 92:39]
      _T_26 <= idx @[Cache.scala 92:39]
      node _T_27 = or(_T_26, UInt<8>("h0")) @[Cache.scala 92:39]
      node _T_28 = bits(_T_27, 7, 0) @[Cache.scala 92:39]
      read mport _T_29 = dataMem_1[_T_28], clock @[Cache.scala 92:39]
    node _T_30 = cat(_T_29[1], _T_29[0]) @[Cache.scala 92:50]
    node _T_31 = cat(_T_29[3], _T_29[2]) @[Cache.scala 92:50]
    node _T_32 = cat(_T_31, _T_30) @[Cache.scala 92:50]
    wire _T_33 : UInt @[Cache.scala 92:39]
    _T_33 is invalid @[Cache.scala 92:39]
    when ren : @[Cache.scala 92:39]
      _T_33 <= idx @[Cache.scala 92:39]
      node _T_34 = or(_T_33, UInt<8>("h0")) @[Cache.scala 92:39]
      node _T_35 = bits(_T_34, 7, 0) @[Cache.scala 92:39]
      read mport _T_36 = dataMem_2[_T_35], clock @[Cache.scala 92:39]
    node _T_37 = cat(_T_36[1], _T_36[0]) @[Cache.scala 92:50]
    node _T_38 = cat(_T_36[3], _T_36[2]) @[Cache.scala 92:50]
    node _T_39 = cat(_T_38, _T_37) @[Cache.scala 92:50]
    wire _T_40 : UInt @[Cache.scala 92:39]
    _T_40 is invalid @[Cache.scala 92:39]
    when ren : @[Cache.scala 92:39]
      _T_40 <= idx @[Cache.scala 92:39]
      node _T_41 = or(_T_40, UInt<8>("h0")) @[Cache.scala 92:39]
      node _T_42 = bits(_T_41, 7, 0) @[Cache.scala 92:39]
      read mport _T_43 = dataMem_3[_T_42], clock @[Cache.scala 92:39]
    node _T_44 = cat(_T_43[1], _T_43[0]) @[Cache.scala 92:50]
    node _T_45 = cat(_T_43[3], _T_43[2]) @[Cache.scala 92:50]
    node _T_46 = cat(_T_45, _T_44) @[Cache.scala 92:50]
    node _T_47 = cat(_T_32, _T_25) @[Cat.scala 30:58]
    node _T_48 = cat(_T_46, _T_39) @[Cat.scala 30:58]
    node rdata = cat(_T_48, _T_47) @[Cat.scala 30:58]
    reg rdata_buf : UInt<128>, clock with :
      reset => (UInt<1>("h0"), rdata_buf) @[Reg.scala 15:16]
    when ren_reg : @[Reg.scala 16:19]
      rdata_buf <= rdata @[Reg.scala 16:23]
    reg refill_buf : UInt<64>[2], clock with :
      reset => (UInt<1>("h0"), refill_buf) @[Cache.scala 94:23]
    node _T_49 = cat(refill_buf[1], refill_buf[0]) @[Cache.scala 95:43]
    node _T_50 = mux(ren_reg, rdata, rdata_buf) @[Cache.scala 95:54]
    node read = mux(is_alloc_reg, _T_49, _T_50) @[Cache.scala 95:17]
    node _T_51 = dshr(v, idx_reg) @[Cache.scala 97:11]
    node _T_52 = bits(_T_51, 0, 0) @[Cache.scala 97:11]
    node _T_53 = eq(rmeta.tag, tag_reg) @[Cache.scala 97:34]
    node _T_54 = and(_T_52, _T_53) @[Cache.scala 97:21]
    hit <= _T_54 @[Cache.scala 97:7]
    node _T_55 = bits(read, 31, 0) @[Cache.scala 100:62]
    node _T_56 = bits(read, 63, 32) @[Cache.scala 100:62]
    node _T_57 = bits(read, 95, 64) @[Cache.scala 100:62]
    node _T_58 = bits(read, 127, 96) @[Cache.scala 100:62]
    wire _T_59 : UInt<32>[4] @[Cache.scala 100:52]
    _T_59[0] <= _T_55 @[Cache.scala 100:52]
    _T_59[1] <= _T_56 @[Cache.scala 100:52]
    _T_59[2] <= _T_57 @[Cache.scala 100:52]
    _T_59[3] <= _T_58 @[Cache.scala 100:52]
    io.cpu.resp.bits.data <= _T_59[off_reg] @[Cache.scala 100:25]
    node _T_60 = and(is_read, hit) @[Cache.scala 101:47]
    node _T_61 = or(is_idle, _T_60) @[Cache.scala 101:36]
    node _T_62 = orr(cpu_mask) @[Cache.scala 101:83]
    node _T_63 = eq(_T_62, UInt<1>("h0")) @[Cache.scala 101:73]
    node _T_64 = and(is_alloc_reg, _T_63) @[Cache.scala 101:70]
    node _T_65 = or(_T_61, _T_64) @[Cache.scala 101:54]
    io.cpu.resp.valid <= _T_65 @[Cache.scala 101:25]
    when io.cpu.resp.valid : @[Cache.scala 103:27]
      addr_reg <= io.cpu.req.bits.addr @[Cache.scala 104:15]
      cpu_data <= io.cpu.req.bits.data @[Cache.scala 105:15]
      cpu_mask <= io.cpu.req.bits.mask @[Cache.scala 106:15]
    wire wmeta : { tag : UInt<20>} @[Cache.scala 109:19]
    wmeta.tag <= tag_reg @[Cache.scala 110:13]
    node _T_66 = eq(is_alloc, UInt<1>("h0")) @[Cache.scala 112:19]
    node _T_67 = cat(off_reg, UInt<2>("h0")) @[Cat.scala 30:58]
    node _T_68 = dshl(cpu_mask, _T_67) @[Cache.scala 112:40]
    node _T_69 = cvt(_T_68) @[Cache.scala 112:80]
    node wmask = mux(_T_66, _T_69, asSInt(UInt<1>("h1"))) @[Cache.scala 112:18]
    node _T_70 = eq(is_alloc, UInt<1>("h0")) @[Cache.scala 113:19]
    node _T_71 = cat(cpu_data, cpu_data) @[Cat.scala 30:58]
    node _T_72 = cat(_T_71, _T_71) @[Cat.scala 30:58]
    node _T_73 = cat(io.nasti.r.bits.data, refill_buf[0]) @[Cat.scala 30:58]
    node wdata = mux(_T_70, _T_72, _T_73) @[Cache.scala 113:18]
    when wen : @[Cache.scala 116:13]
      node _T_74 = dshl(UInt<1>("h1"), idx_reg) @[Cache.scala 117:18]
      node _T_75 = or(v, _T_74) @[Cache.scala 117:18]
      node _T_76 = not(v) @[Cache.scala 117:18]
      node _T_77 = or(_T_76, _T_74) @[Cache.scala 117:18]
      node _T_78 = not(_T_77) @[Cache.scala 117:18]
      node _T_79 = mux(UInt<1>("h1"), _T_75, _T_78) @[Cache.scala 117:18]
      v <= _T_79 @[Cache.scala 117:7]
      node _T_80 = eq(is_alloc, UInt<1>("h0")) @[Cache.scala 118:28]
      node _T_81 = dshl(UInt<1>("h1"), idx_reg) @[Cache.scala 118:18]
      node _T_82 = or(d, _T_81) @[Cache.scala 118:18]
      node _T_83 = not(d) @[Cache.scala 118:18]
      node _T_84 = or(_T_83, _T_81) @[Cache.scala 118:18]
      node _T_85 = not(_T_84) @[Cache.scala 118:18]
      node _T_86 = mux(_T_80, _T_82, _T_85) @[Cache.scala 118:18]
      d <= _T_86 @[Cache.scala 118:7]
      when is_alloc : @[Cache.scala 119:20]
        write mport _T_87 = metaMem[idx_reg], clock
        _T_87.tag <= wmeta.tag
      node _T_88 = bits(wdata, 7, 0) @[Cache.scala 123:53]
      node _T_89 = bits(wdata, 15, 8) @[Cache.scala 123:53]
      node _T_90 = bits(wdata, 23, 16) @[Cache.scala 123:53]
      node _T_91 = bits(wdata, 31, 24) @[Cache.scala 123:53]
      wire _T_92 : UInt<8>[4] @[Cache.scala 123:42]
      _T_92[0] <= _T_88 @[Cache.scala 123:42]
      _T_92[1] <= _T_89 @[Cache.scala 123:42]
      _T_92[2] <= _T_90 @[Cache.scala 123:42]
      _T_92[3] <= _T_91 @[Cache.scala 123:42]
      node _T_93 = bits(wmask, 3, 0) @[Cache.scala 124:37]
      node _T_94 = bits(_T_93, 0, 0) @[Cache.scala 124:71]
      node _T_95 = bits(_T_93, 1, 1) @[Cache.scala 124:71]
      node _T_96 = bits(_T_93, 2, 2) @[Cache.scala 124:71]
      node _T_97 = bits(_T_93, 3, 3) @[Cache.scala 124:71]
      write mport _T_98 = dataMem_0[idx_reg], clock
      when _T_94 :
        _T_98[0] <= _T_92[0]
      when _T_95 :
        _T_98[1] <= _T_92[1]
      when _T_96 :
        _T_98[2] <= _T_92[2]
      when _T_97 :
        _T_98[3] <= _T_92[3]
      node _T_99 = bits(wdata, 39, 32) @[Cache.scala 123:53]
      node _T_100 = bits(wdata, 47, 40) @[Cache.scala 123:53]
      node _T_101 = bits(wdata, 55, 48) @[Cache.scala 123:53]
      node _T_102 = bits(wdata, 63, 56) @[Cache.scala 123:53]
      wire _T_103 : UInt<8>[4] @[Cache.scala 123:42]
      _T_103[0] <= _T_99 @[Cache.scala 123:42]
      _T_103[1] <= _T_100 @[Cache.scala 123:42]
      _T_103[2] <= _T_101 @[Cache.scala 123:42]
      _T_103[3] <= _T_102 @[Cache.scala 123:42]
      node _T_104 = bits(wmask, 7, 4) @[Cache.scala 124:37]
      node _T_105 = bits(_T_104, 0, 0) @[Cache.scala 124:71]
      node _T_106 = bits(_T_104, 1, 1) @[Cache.scala 124:71]
      node _T_107 = bits(_T_104, 2, 2) @[Cache.scala 124:71]
      node _T_108 = bits(_T_104, 3, 3) @[Cache.scala 124:71]
      write mport _T_109 = dataMem_1[idx_reg], clock
      when _T_105 :
        _T_109[0] <= _T_103[0]
      when _T_106 :
        _T_109[1] <= _T_103[1]
      when _T_107 :
        _T_109[2] <= _T_103[2]
      when _T_108 :
        _T_109[3] <= _T_103[3]
      node _T_110 = bits(wdata, 71, 64) @[Cache.scala 123:53]
      node _T_111 = bits(wdata, 79, 72) @[Cache.scala 123:53]
      node _T_112 = bits(wdata, 87, 80) @[Cache.scala 123:53]
      node _T_113 = bits(wdata, 95, 88) @[Cache.scala 123:53]
      wire _T_114 : UInt<8>[4] @[Cache.scala 123:42]
      _T_114[0] <= _T_110 @[Cache.scala 123:42]
      _T_114[1] <= _T_111 @[Cache.scala 123:42]
      _T_114[2] <= _T_112 @[Cache.scala 123:42]
      _T_114[3] <= _T_113 @[Cache.scala 123:42]
      node _T_115 = bits(wmask, 11, 8) @[Cache.scala 124:37]
      node _T_116 = bits(_T_115, 0, 0) @[Cache.scala 124:71]
      node _T_117 = bits(_T_115, 1, 1) @[Cache.scala 124:71]
      node _T_118 = bits(_T_115, 2, 2) @[Cache.scala 124:71]
      node _T_119 = bits(_T_115, 3, 3) @[Cache.scala 124:71]
      write mport _T_120 = dataMem_2[idx_reg], clock
      when _T_116 :
        _T_120[0] <= _T_114[0]
      when _T_117 :
        _T_120[1] <= _T_114[1]
      when _T_118 :
        _T_120[2] <= _T_114[2]
      when _T_119 :
        _T_120[3] <= _T_114[3]
      node _T_121 = bits(wdata, 103, 96) @[Cache.scala 123:53]
      node _T_122 = bits(wdata, 111, 104) @[Cache.scala 123:53]
      node _T_123 = bits(wdata, 119, 112) @[Cache.scala 123:53]
      node _T_124 = bits(wdata, 127, 120) @[Cache.scala 123:53]
      wire _T_125 : UInt<8>[4] @[Cache.scala 123:42]
      _T_125[0] <= _T_121 @[Cache.scala 123:42]
      _T_125[1] <= _T_122 @[Cache.scala 123:42]
      _T_125[2] <= _T_123 @[Cache.scala 123:42]
      _T_125[3] <= _T_124 @[Cache.scala 123:42]
      node _T_126 = bits(wmask, 15, 12) @[Cache.scala 124:37]
      node _T_127 = bits(_T_126, 0, 0) @[Cache.scala 124:71]
      node _T_128 = bits(_T_126, 1, 1) @[Cache.scala 124:71]
      node _T_129 = bits(_T_126, 2, 2) @[Cache.scala 124:71]
      node _T_130 = bits(_T_126, 3, 3) @[Cache.scala 124:71]
      write mport _T_131 = dataMem_3[idx_reg], clock
      when _T_127 :
        _T_131[0] <= _T_125[0]
      when _T_128 :
        _T_131[1] <= _T_125[1]
      when _T_129 :
        _T_131[2] <= _T_125[2]
      when _T_130 :
        _T_131[3] <= _T_125[3]
    node _T_132 = cat(tag_reg, idx_reg) @[Cat.scala 30:58]
    node _T_133 = dshl(_T_132, UInt<3>("h4")) @[Cache.scala 130:33]
    wire _T_134 : { addr : UInt<32>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, region : UInt<4>, id : UInt<5>, user : UInt<1>} @[nasti.scala 178:18]
    _T_134 is invalid @[nasti.scala 178:18]
    _T_134.id <= UInt<1>("h0") @[nasti.scala 179:11]
    _T_134.addr <= _T_133 @[nasti.scala 180:13]
    _T_134.len <= UInt<1>("h1") @[nasti.scala 181:12]
    _T_134.size <= UInt<2>("h3") @[nasti.scala 182:13]
    _T_134.burst <= UInt<1>("h1") @[nasti.scala 183:14]
    _T_134.lock <= UInt<1>("h0") @[nasti.scala 184:13]
    _T_134.cache <= UInt<1>("h0") @[nasti.scala 185:14]
    node _T_135 = cat(UInt<1>("h0"), UInt<1>("h0")) @[Cat.scala 30:58]
    node _T_136 = cat(_T_135, UInt<1>("h0")) @[Cat.scala 30:58]
    _T_134.prot <= _T_136 @[nasti.scala 186:13]
    _T_134.qos <= UInt<1>("h0") @[nasti.scala 187:12]
    _T_134.region <= UInt<1>("h0") @[nasti.scala 188:15]
    _T_134.user <= UInt<1>("h0") @[nasti.scala 189:13]
    io.nasti.ar.bits.user <= _T_134.user @[Cache.scala 129:20]
    io.nasti.ar.bits.id <= _T_134.id @[Cache.scala 129:20]
    io.nasti.ar.bits.region <= _T_134.region @[Cache.scala 129:20]
    io.nasti.ar.bits.qos <= _T_134.qos @[Cache.scala 129:20]
    io.nasti.ar.bits.prot <= _T_134.prot @[Cache.scala 129:20]
    io.nasti.ar.bits.cache <= _T_134.cache @[Cache.scala 129:20]
    io.nasti.ar.bits.lock <= _T_134.lock @[Cache.scala 129:20]
    io.nasti.ar.bits.burst <= _T_134.burst @[Cache.scala 129:20]
    io.nasti.ar.bits.size <= _T_134.size @[Cache.scala 129:20]
    io.nasti.ar.bits.len <= _T_134.len @[Cache.scala 129:20]
    io.nasti.ar.bits.addr <= _T_134.addr @[Cache.scala 129:20]
    io.nasti.ar.valid <= UInt<1>("h0") @[Cache.scala 131:21]
    node _T_137 = eq(state, UInt<3>("h6")) @[Cache.scala 133:29]
    io.nasti.r.ready <= _T_137 @[Cache.scala 133:20]
    node _T_138 = and(io.nasti.r.ready, io.nasti.r.valid) @[Decoupled.scala 40:37]
    when _T_138 : @[Cache.scala 134:27]
      refill_buf[read_count] <= io.nasti.r.bits.data @[Cache.scala 134:52]
    node _T_139 = cat(rmeta.tag, idx_reg) @[Cat.scala 30:58]
    node _T_140 = dshl(_T_139, UInt<3>("h4")) @[Cache.scala 138:35]
    wire _T_141 : { addr : UInt<32>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, region : UInt<4>, id : UInt<5>, user : UInt<1>} @[nasti.scala 158:18]
    _T_141 is invalid @[nasti.scala 158:18]
    _T_141.id <= UInt<1>("h0") @[nasti.scala 159:11]
    _T_141.addr <= _T_140 @[nasti.scala 160:13]
    _T_141.len <= UInt<1>("h1") @[nasti.scala 161:12]
    _T_141.size <= UInt<2>("h3") @[nasti.scala 162:13]
    _T_141.burst <= UInt<1>("h1") @[nasti.scala 163:14]
    _T_141.lock <= UInt<1>("h0") @[nasti.scala 164:13]
    _T_141.cache <= UInt<1>("h0") @[nasti.scala 165:14]
    node _T_142 = cat(UInt<1>("h0"), UInt<1>("h0")) @[Cat.scala 30:58]
    node _T_143 = cat(_T_142, UInt<1>("h0")) @[Cat.scala 30:58]
    _T_141.prot <= _T_143 @[nasti.scala 166:13]
    _T_141.qos <= UInt<1>("h0") @[nasti.scala 167:12]
    _T_141.region <= UInt<1>("h0") @[nasti.scala 168:15]
    _T_141.user <= UInt<1>("h0") @[nasti.scala 169:13]
    io.nasti.aw.bits.user <= _T_141.user @[Cache.scala 137:20]
    io.nasti.aw.bits.id <= _T_141.id @[Cache.scala 137:20]
    io.nasti.aw.bits.region <= _T_141.region @[Cache.scala 137:20]
    io.nasti.aw.bits.qos <= _T_141.qos @[Cache.scala 137:20]
    io.nasti.aw.bits.prot <= _T_141.prot @[Cache.scala 137:20]
    io.nasti.aw.bits.cache <= _T_141.cache @[Cache.scala 137:20]
    io.nasti.aw.bits.lock <= _T_141.lock @[Cache.scala 137:20]
    io.nasti.aw.bits.burst <= _T_141.burst @[Cache.scala 137:20]
    io.nasti.aw.bits.size <= _T_141.size @[Cache.scala 137:20]
    io.nasti.aw.bits.len <= _T_141.len @[Cache.scala 137:20]
    io.nasti.aw.bits.addr <= _T_141.addr @[Cache.scala 137:20]
    io.nasti.aw.valid <= UInt<1>("h0") @[Cache.scala 139:21]
    node _T_144 = bits(read, 63, 0) @[Cache.scala 142:42]
    node _T_145 = bits(read, 127, 64) @[Cache.scala 142:42]
    wire _T_146 : UInt<64>[2] @[Cache.scala 142:32]
    _T_146[0] <= _T_144 @[Cache.scala 142:32]
    _T_146[1] <= _T_145 @[Cache.scala 142:32]
    wire _T_147 : { data : UInt<64>, last : UInt<1>, id : UInt<5>, strb : UInt<8>, user : UInt<1>} @[nasti.scala 198:17]
    _T_147 is invalid @[nasti.scala 198:17]
    node _T_148 = mux(UInt<1>("h1"), UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    _T_147.strb <= _T_148 @[nasti.scala 199:12]
    _T_147.data <= _T_146[write_count] @[nasti.scala 200:12]
    _T_147.last <= write_wrap_out @[nasti.scala 201:12]
    _T_147.id <= UInt<1>("h0") @[nasti.scala 202:12]
    _T_147.user <= UInt<1>("h0") @[nasti.scala 203:12]
    io.nasti.w.bits.user <= _T_147.user @[Cache.scala 141:19]
    io.nasti.w.bits.strb <= _T_147.strb @[Cache.scala 141:19]
    io.nasti.w.bits.id <= _T_147.id @[Cache.scala 141:19]
    io.nasti.w.bits.last <= _T_147.last @[Cache.scala 141:19]
    io.nasti.w.bits.data <= _T_147.data @[Cache.scala 141:19]
    io.nasti.w.valid <= UInt<1>("h0") @[Cache.scala 144:20]
    io.nasti.b.ready <= UInt<1>("h0") @[Cache.scala 146:20]
    node _T_149 = dshr(v, idx_reg) @[Cache.scala 149:19]
    node _T_150 = bits(_T_149, 0, 0) @[Cache.scala 149:19]
    node _T_151 = dshr(d, idx_reg) @[Cache.scala 149:33]
    node _T_152 = bits(_T_151, 0, 0) @[Cache.scala 149:33]
    node is_dirty = and(_T_150, _T_152) @[Cache.scala 149:29]
    node _T_153 = eq(UInt<3>("h0"), state) @[Conditional.scala 37:30]
    when _T_153 : @[Conditional.scala 40:58]
      when io.cpu.req.valid : @[Cache.scala 152:30]
        node _T_154 = orr(io.cpu.req.bits.mask) @[Cache.scala 153:43]
        node _T_155 = mux(_T_154, UInt<3>("h2"), UInt<3>("h1")) @[Cache.scala 153:21]
        state <= _T_155 @[Cache.scala 153:15]
    else :
      node _T_156 = eq(UInt<3>("h1"), state) @[Conditional.scala 37:30]
      when _T_156 : @[Conditional.scala 39:67]
        when hit : @[Cache.scala 157:17]
          when io.cpu.req.valid : @[Cache.scala 158:32]
            node _T_157 = orr(io.cpu.req.bits.mask) @[Cache.scala 159:45]
            node _T_158 = mux(_T_157, UInt<3>("h2"), UInt<3>("h1")) @[Cache.scala 159:23]
            state <= _T_158 @[Cache.scala 159:17]
          else :
            state <= UInt<3>("h0") @[Cache.scala 161:17]
        else :
          io.nasti.aw.valid <= is_dirty @[Cache.scala 164:27]
          node _T_159 = eq(is_dirty, UInt<1>("h0")) @[Cache.scala 165:30]
          io.nasti.ar.valid <= _T_159 @[Cache.scala 165:27]
          node _T_160 = and(io.nasti.aw.ready, io.nasti.aw.valid) @[Decoupled.scala 40:37]
          when _T_160 : @[Cache.scala 166:34]
            state <= UInt<3>("h3") @[Cache.scala 167:17]
          else :
            node _T_161 = and(io.nasti.ar.ready, io.nasti.ar.valid) @[Decoupled.scala 40:37]
            when _T_161 : @[Cache.scala 168:40]
              state <= UInt<3>("h6") @[Cache.scala 169:17]
      else :
        node _T_162 = eq(UInt<3>("h2"), state) @[Conditional.scala 37:30]
        when _T_162 : @[Conditional.scala 39:67]
          node _T_163 = or(hit, is_alloc_reg) @[Cache.scala 174:16]
          node _T_164 = or(_T_163, io.cpu.abort) @[Cache.scala 174:32]
          when _T_164 : @[Cache.scala 174:49]
            state <= UInt<3>("h0") @[Cache.scala 175:15]
          else :
            io.nasti.aw.valid <= is_dirty @[Cache.scala 177:27]
            node _T_165 = eq(is_dirty, UInt<1>("h0")) @[Cache.scala 178:30]
            io.nasti.ar.valid <= _T_165 @[Cache.scala 178:27]
            node _T_166 = and(io.nasti.aw.ready, io.nasti.aw.valid) @[Decoupled.scala 40:37]
            when _T_166 : @[Cache.scala 179:34]
              state <= UInt<3>("h3") @[Cache.scala 180:17]
            else :
              node _T_167 = and(io.nasti.ar.ready, io.nasti.ar.valid) @[Decoupled.scala 40:37]
              when _T_167 : @[Cache.scala 181:40]
                state <= UInt<3>("h6") @[Cache.scala 182:17]
        else :
          node _T_168 = eq(UInt<3>("h3"), state) @[Conditional.scala 37:30]
          when _T_168 : @[Conditional.scala 39:67]
            io.nasti.w.valid <= UInt<1>("h1") @[Cache.scala 187:24]
            when write_wrap_out : @[Cache.scala 188:28]
              state <= UInt<3>("h4") @[Cache.scala 189:15]
          else :
            node _T_169 = eq(UInt<3>("h4"), state) @[Conditional.scala 37:30]
            when _T_169 : @[Conditional.scala 39:67]
              io.nasti.b.ready <= UInt<1>("h1") @[Cache.scala 193:24]
              node _T_170 = and(io.nasti.b.ready, io.nasti.b.valid) @[Decoupled.scala 40:37]
              when _T_170 : @[Cache.scala 194:31]
                state <= UInt<3>("h5") @[Cache.scala 195:15]
            else :
              node _T_171 = eq(UInt<3>("h5"), state) @[Conditional.scala 37:30]
              when _T_171 : @[Conditional.scala 39:67]
                io.nasti.ar.valid <= UInt<1>("h1") @[Cache.scala 199:25]
                node _T_172 = and(io.nasti.ar.ready, io.nasti.ar.valid) @[Decoupled.scala 40:37]
                when _T_172 : @[Cache.scala 200:32]
                  state <= UInt<3>("h6") @[Cache.scala 201:15]
              else :
                node _T_173 = eq(UInt<3>("h6"), state) @[Conditional.scala 37:30]
                when _T_173 : @[Conditional.scala 39:67]
                  when read_wrap_out : @[Cache.scala 205:27]
                    node _T_174 = orr(cpu_mask) @[Cache.scala 206:31]
                    node _T_175 = mux(_T_174, UInt<3>("h2"), UInt<3>("h0")) @[Cache.scala 206:21]
                    state <= _T_175 @[Cache.scala 206:15]

  module MemArbiter :
    input clock : Clock
    input reset : Reset
    output io : { flip icache : { aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, region : UInt<4>, id : UInt<5>, user : UInt<1>}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, last : UInt<1>, id : UInt<5>, strb : UInt<8>, user : UInt<1>}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>, id : UInt<5>, user : UInt<1>}}, ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, region : UInt<4>, id : UInt<5>, user : UInt<1>}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>, data : UInt<64>, last : UInt<1>, id : UInt<5>, user : UInt<1>}}}, flip dcache : { aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, region : UInt<4>, id : UInt<5>, user : UInt<1>}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, last : UInt<1>, id : UInt<5>, strb : UInt<8>, user : UInt<1>}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>, id : UInt<5>, user : UInt<1>}}, ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, region : UInt<4>, id : UInt<5>, user : UInt<1>}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>, data : UInt<64>, last : UInt<1>, id : UInt<5>, user : UInt<1>}}}, nasti : { aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, region : UInt<4>, id : UInt<5>, user : UInt<1>}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, last : UInt<1>, id : UInt<5>, strb : UInt<8>, user : UInt<1>}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>, id : UInt<5>, user : UInt<1>}}, ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, region : UInt<4>, id : UInt<5>, user : UInt<1>}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>, data : UInt<64>, last : UInt<1>, id : UInt<5>, user : UInt<1>}}}}
  
    reg state : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[Tile.scala 21:22]
    io.nasti.aw.bits.user <= io.dcache.aw.bits.user @[Tile.scala 24:20]
    io.nasti.aw.bits.id <= io.dcache.aw.bits.id @[Tile.scala 24:20]
    io.nasti.aw.bits.region <= io.dcache.aw.bits.region @[Tile.scala 24:20]
    io.nasti.aw.bits.qos <= io.dcache.aw.bits.qos @[Tile.scala 24:20]
    io.nasti.aw.bits.prot <= io.dcache.aw.bits.prot @[Tile.scala 24:20]
    io.nasti.aw.bits.cache <= io.dcache.aw.bits.cache @[Tile.scala 24:20]
    io.nasti.aw.bits.lock <= io.dcache.aw.bits.lock @[Tile.scala 24:20]
    io.nasti.aw.bits.burst <= io.dcache.aw.bits.burst @[Tile.scala 24:20]
    io.nasti.aw.bits.size <= io.dcache.aw.bits.size @[Tile.scala 24:20]
    io.nasti.aw.bits.len <= io.dcache.aw.bits.len @[Tile.scala 24:20]
    io.nasti.aw.bits.addr <= io.dcache.aw.bits.addr @[Tile.scala 24:20]
    node _T = eq(state, UInt<3>("h0")) @[Tile.scala 25:52]
    node _T_1 = and(io.dcache.aw.valid, _T) @[Tile.scala 25:43]
    io.nasti.aw.valid <= _T_1 @[Tile.scala 25:21]
    node _T_2 = eq(state, UInt<3>("h0")) @[Tile.scala 26:52]
    node _T_3 = and(io.nasti.aw.ready, _T_2) @[Tile.scala 26:43]
    io.dcache.aw.ready <= _T_3 @[Tile.scala 26:22]
    io.icache.aw.bits.user is invalid @[Tile.scala 27:16]
    io.icache.aw.bits.id is invalid @[Tile.scala 27:16]
    io.icache.aw.bits.region is invalid @[Tile.scala 27:16]
    io.icache.aw.bits.qos is invalid @[Tile.scala 27:16]
    io.icache.aw.bits.prot is invalid @[Tile.scala 27:16]
    io.icache.aw.bits.cache is invalid @[Tile.scala 27:16]
    io.icache.aw.bits.lock is invalid @[Tile.scala 27:16]
    io.icache.aw.bits.burst is invalid @[Tile.scala 27:16]
    io.icache.aw.bits.size is invalid @[Tile.scala 27:16]
    io.icache.aw.bits.len is invalid @[Tile.scala 27:16]
    io.icache.aw.bits.addr is invalid @[Tile.scala 27:16]
    io.icache.aw.valid is invalid @[Tile.scala 27:16]
    io.icache.aw.ready is invalid @[Tile.scala 27:16]
    io.nasti.w.bits.user <= io.dcache.w.bits.user @[Tile.scala 30:20]
    io.nasti.w.bits.strb <= io.dcache.w.bits.strb @[Tile.scala 30:20]
    io.nasti.w.bits.id <= io.dcache.w.bits.id @[Tile.scala 30:20]
    io.nasti.w.bits.last <= io.dcache.w.bits.last @[Tile.scala 30:20]
    io.nasti.w.bits.data <= io.dcache.w.bits.data @[Tile.scala 30:20]
    node _T_4 = eq(state, UInt<3>("h3")) @[Tile.scala 31:50]
    node _T_5 = and(io.dcache.w.valid, _T_4) @[Tile.scala 31:41]
    io.nasti.w.valid <= _T_5 @[Tile.scala 31:20]
    node _T_6 = eq(state, UInt<3>("h3")) @[Tile.scala 32:50]
    node _T_7 = and(io.nasti.w.ready, _T_6) @[Tile.scala 32:41]
    io.dcache.w.ready <= _T_7 @[Tile.scala 32:21]
    io.icache.w.bits.user is invalid @[Tile.scala 33:15]
    io.icache.w.bits.strb is invalid @[Tile.scala 33:15]
    io.icache.w.bits.id is invalid @[Tile.scala 33:15]
    io.icache.w.bits.last is invalid @[Tile.scala 33:15]
    io.icache.w.bits.data is invalid @[Tile.scala 33:15]
    io.icache.w.valid is invalid @[Tile.scala 33:15]
    io.icache.w.ready is invalid @[Tile.scala 33:15]
    io.dcache.b.bits.user <= io.nasti.b.bits.user @[Tile.scala 36:20]
    io.dcache.b.bits.id <= io.nasti.b.bits.id @[Tile.scala 36:20]
    io.dcache.b.bits.resp <= io.nasti.b.bits.resp @[Tile.scala 36:20]
    node _T_8 = eq(state, UInt<3>("h4")) @[Tile.scala 37:50]
    node _T_9 = and(io.nasti.b.valid, _T_8) @[Tile.scala 37:41]
    io.dcache.b.valid <= _T_9 @[Tile.scala 37:21]
    node _T_10 = eq(state, UInt<3>("h4")) @[Tile.scala 38:50]
    node _T_11 = and(io.dcache.b.ready, _T_10) @[Tile.scala 38:41]
    io.nasti.b.ready <= _T_11 @[Tile.scala 38:20]
    io.icache.b.bits.user is invalid @[Tile.scala 39:15]
    io.icache.b.bits.id is invalid @[Tile.scala 39:15]
    io.icache.b.bits.resp is invalid @[Tile.scala 39:15]
    io.icache.b.valid is invalid @[Tile.scala 39:15]
    io.icache.b.ready is invalid @[Tile.scala 39:15]
    node _T_12 = mux(io.dcache.ar.valid, io.dcache.ar.bits.id, io.icache.ar.bits.id) @[Tile.scala 43:8]
    node _T_13 = mux(io.dcache.ar.valid, io.dcache.ar.bits.addr, io.icache.ar.bits.addr) @[Tile.scala 44:8]
    node _T_14 = mux(io.dcache.ar.valid, io.dcache.ar.bits.size, io.icache.ar.bits.size) @[Tile.scala 45:8]
    node _T_15 = mux(io.dcache.ar.valid, io.dcache.ar.bits.len, io.icache.ar.bits.len) @[Tile.scala 46:8]
    wire _T_16 : { addr : UInt<32>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, region : UInt<4>, id : UInt<5>, user : UInt<1>} @[nasti.scala 178:18]
    _T_16 is invalid @[nasti.scala 178:18]
    _T_16.id <= _T_12 @[nasti.scala 179:11]
    _T_16.addr <= _T_13 @[nasti.scala 180:13]
    _T_16.len <= _T_15 @[nasti.scala 181:12]
    _T_16.size <= _T_14 @[nasti.scala 182:13]
    _T_16.burst <= UInt<1>("h1") @[nasti.scala 183:14]
    _T_16.lock <= UInt<1>("h0") @[nasti.scala 184:13]
    _T_16.cache <= UInt<1>("h0") @[nasti.scala 185:14]
    node _T_17 = cat(UInt<1>("h0"), UInt<1>("h0")) @[Cat.scala 30:58]
    node _T_18 = cat(_T_17, UInt<1>("h0")) @[Cat.scala 30:58]
    _T_16.prot <= _T_18 @[nasti.scala 186:13]
    _T_16.qos <= UInt<1>("h0") @[nasti.scala 187:12]
    _T_16.region <= UInt<1>("h0") @[nasti.scala 188:15]
    _T_16.user <= UInt<1>("h0") @[nasti.scala 189:13]
    io.nasti.ar.bits.user <= _T_16.user @[Tile.scala 42:20]
    io.nasti.ar.bits.id <= _T_16.id @[Tile.scala 42:20]
    io.nasti.ar.bits.region <= _T_16.region @[Tile.scala 42:20]
    io.nasti.ar.bits.qos <= _T_16.qos @[Tile.scala 42:20]
    io.nasti.ar.bits.prot <= _T_16.prot @[Tile.scala 42:20]
    io.nasti.ar.bits.cache <= _T_16.cache @[Tile.scala 42:20]
    io.nasti.ar.bits.lock <= _T_16.lock @[Tile.scala 42:20]
    io.nasti.ar.bits.burst <= _T_16.burst @[Tile.scala 42:20]
    io.nasti.ar.bits.size <= _T_16.size @[Tile.scala 42:20]
    io.nasti.ar.bits.len <= _T_16.len @[Tile.scala 42:20]
    io.nasti.ar.bits.addr <= _T_16.addr @[Tile.scala 42:20]
    node _T_19 = or(io.icache.ar.valid, io.dcache.ar.valid) @[Tile.scala 47:44]
    node _T_20 = eq(io.nasti.aw.valid, UInt<1>("h0")) @[Tile.scala 48:5]
    node _T_21 = and(_T_19, _T_20) @[Tile.scala 47:67]
    node _T_22 = eq(state, UInt<3>("h0")) @[Tile.scala 48:33]
    node _T_23 = and(_T_21, _T_22) @[Tile.scala 48:24]
    io.nasti.ar.valid <= _T_23 @[Tile.scala 47:21]
    node _T_24 = eq(io.nasti.aw.valid, UInt<1>("h0")) @[Tile.scala 49:46]
    node _T_25 = and(io.nasti.ar.ready, _T_24) @[Tile.scala 49:43]
    node _T_26 = eq(state, UInt<3>("h0")) @[Tile.scala 49:74]
    node _T_27 = and(_T_25, _T_26) @[Tile.scala 49:65]
    io.dcache.ar.ready <= _T_27 @[Tile.scala 49:22]
    node _T_28 = eq(io.dcache.ar.valid, UInt<1>("h0")) @[Tile.scala 50:47]
    node _T_29 = and(io.dcache.ar.ready, _T_28) @[Tile.scala 50:44]
    io.icache.ar.ready <= _T_29 @[Tile.scala 50:22]
    io.icache.r.bits.user <= io.nasti.r.bits.user @[Tile.scala 53:21]
    io.icache.r.bits.id <= io.nasti.r.bits.id @[Tile.scala 53:21]
    io.icache.r.bits.last <= io.nasti.r.bits.last @[Tile.scala 53:21]
    io.icache.r.bits.data <= io.nasti.r.bits.data @[Tile.scala 53:21]
    io.icache.r.bits.resp <= io.nasti.r.bits.resp @[Tile.scala 53:21]
    io.dcache.r.bits.user <= io.nasti.r.bits.user @[Tile.scala 54:21]
    io.dcache.r.bits.id <= io.nasti.r.bits.id @[Tile.scala 54:21]
    io.dcache.r.bits.last <= io.nasti.r.bits.last @[Tile.scala 54:21]
    io.dcache.r.bits.data <= io.nasti.r.bits.data @[Tile.scala 54:21]
    io.dcache.r.bits.resp <= io.nasti.r.bits.resp @[Tile.scala 54:21]
    node _T_30 = eq(state, UInt<3>("h1")) @[Tile.scala 55:50]
    node _T_31 = and(io.nasti.r.valid, _T_30) @[Tile.scala 55:41]
    io.icache.r.valid <= _T_31 @[Tile.scala 55:21]
    node _T_32 = eq(state, UInt<3>("h2")) @[Tile.scala 56:50]
    node _T_33 = and(io.nasti.r.valid, _T_32) @[Tile.scala 56:41]
    io.dcache.r.valid <= _T_33 @[Tile.scala 56:21]
    node _T_34 = eq(state, UInt<3>("h1")) @[Tile.scala 57:50]
    node _T_35 = and(io.icache.r.ready, _T_34) @[Tile.scala 57:41]
    node _T_36 = eq(state, UInt<3>("h2")) @[Tile.scala 58:50]
    node _T_37 = and(io.dcache.r.ready, _T_36) @[Tile.scala 58:41]
    node _T_38 = or(_T_35, _T_37) @[Tile.scala 57:68]
    io.nasti.r.ready <= _T_38 @[Tile.scala 57:20]
    node _T_39 = eq(UInt<3>("h0"), state) @[Conditional.scala 37:30]
    when _T_39 : @[Conditional.scala 40:58]
      node _T_40 = and(io.dcache.aw.ready, io.dcache.aw.valid) @[Decoupled.scala 40:37]
      when _T_40 : @[Tile.scala 62:33]
        state <= UInt<3>("h3") @[Tile.scala 63:15]
      else :
        node _T_41 = and(io.dcache.ar.ready, io.dcache.ar.valid) @[Decoupled.scala 40:37]
        when _T_41 : @[Tile.scala 64:39]
          state <= UInt<3>("h2") @[Tile.scala 65:15]
        else :
          node _T_42 = and(io.icache.ar.ready, io.icache.ar.valid) @[Decoupled.scala 40:37]
          when _T_42 : @[Tile.scala 66:39]
            state <= UInt<3>("h1") @[Tile.scala 67:15]
    else :
      node _T_43 = eq(UInt<3>("h1"), state) @[Conditional.scala 37:30]
      when _T_43 : @[Conditional.scala 39:67]
        node _T_44 = and(io.nasti.r.ready, io.nasti.r.valid) @[Decoupled.scala 40:37]
        node _T_45 = and(_T_44, io.nasti.r.bits.last) @[Tile.scala 71:30]
        when _T_45 : @[Tile.scala 71:55]
          state <= UInt<3>("h0") @[Tile.scala 72:15]
      else :
        node _T_46 = eq(UInt<3>("h2"), state) @[Conditional.scala 37:30]
        when _T_46 : @[Conditional.scala 39:67]
          node _T_47 = and(io.nasti.r.ready, io.nasti.r.valid) @[Decoupled.scala 40:37]
          node _T_48 = and(_T_47, io.nasti.r.bits.last) @[Tile.scala 76:30]
          when _T_48 : @[Tile.scala 76:55]
            state <= UInt<3>("h0") @[Tile.scala 77:15]
        else :
          node _T_49 = eq(UInt<3>("h3"), state) @[Conditional.scala 37:30]
          when _T_49 : @[Conditional.scala 39:67]
            node _T_50 = and(io.dcache.w.ready, io.dcache.w.valid) @[Decoupled.scala 40:37]
            node _T_51 = and(_T_50, io.dcache.w.bits.last) @[Tile.scala 81:31]
            when _T_51 : @[Tile.scala 81:57]
              state <= UInt<3>("h4") @[Tile.scala 82:15]
          else :
            node _T_52 = eq(UInt<3>("h4"), state) @[Conditional.scala 37:30]
            when _T_52 : @[Conditional.scala 39:67]
              node _T_53 = and(io.nasti.b.ready, io.nasti.b.valid) @[Decoupled.scala 40:37]
              when _T_53 : @[Tile.scala 86:31]
                state <= UInt<3>("h0") @[Tile.scala 87:15]

  module Tile :
    input clock : Clock
    input reset : Reset
    output io : { host : { flip fromhost : { valid : UInt<1>, bits : UInt<32>}, tohost : UInt<32>}, nasti : { aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, region : UInt<4>, id : UInt<5>, user : UInt<1>}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, last : UInt<1>, id : UInt<5>, strb : UInt<8>, user : UInt<1>}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>, id : UInt<5>, user : UInt<1>}}, ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, region : UInt<4>, id : UInt<5>, user : UInt<1>}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>, data : UInt<64>, last : UInt<1>, id : UInt<5>, user : UInt<1>}}}}
  
    inst core of Core @[Tile.scala 107:22]
    core.clock <= clock
    core.reset <= reset
    inst icache of Cache @[Tile.scala 108:22]
    icache.clock <= clock
    icache.reset <= reset
    inst dcache of Cache_1 @[Tile.scala 109:22]
    dcache.clock <= clock
    dcache.reset <= reset
    inst arb of MemArbiter @[Tile.scala 110:22]
    arb.clock <= clock
    arb.reset <= reset
    io.host.tohost <= core.io.host.tohost @[Tile.scala 112:11]
    core.io.host.fromhost.bits <= io.host.fromhost.bits @[Tile.scala 112:11]
    core.io.host.fromhost.valid <= io.host.fromhost.valid @[Tile.scala 112:11]
    core.io.icache.resp.bits.data <= icache.io.cpu.resp.bits.data @[Tile.scala 113:18]
    core.io.icache.resp.valid <= icache.io.cpu.resp.valid @[Tile.scala 113:18]
    icache.io.cpu.req.bits.mask <= core.io.icache.req.bits.mask @[Tile.scala 113:18]
    icache.io.cpu.req.bits.data <= core.io.icache.req.bits.data @[Tile.scala 113:18]
    icache.io.cpu.req.bits.addr <= core.io.icache.req.bits.addr @[Tile.scala 113:18]
    icache.io.cpu.req.valid <= core.io.icache.req.valid @[Tile.scala 113:18]
    icache.io.cpu.abort <= core.io.icache.abort @[Tile.scala 113:18]
    core.io.dcache.resp.bits.data <= dcache.io.cpu.resp.bits.data @[Tile.scala 114:18]
    core.io.dcache.resp.valid <= dcache.io.cpu.resp.valid @[Tile.scala 114:18]
    dcache.io.cpu.req.bits.mask <= core.io.dcache.req.bits.mask @[Tile.scala 114:18]
    dcache.io.cpu.req.bits.data <= core.io.dcache.req.bits.data @[Tile.scala 114:18]
    dcache.io.cpu.req.bits.addr <= core.io.dcache.req.bits.addr @[Tile.scala 114:18]
    dcache.io.cpu.req.valid <= core.io.dcache.req.valid @[Tile.scala 114:18]
    dcache.io.cpu.abort <= core.io.dcache.abort @[Tile.scala 114:18]
    arb.io.icache <- icache.io.nasti @[Tile.scala 115:17]
    arb.io.dcache <- dcache.io.nasti @[Tile.scala 116:17]
    io.nasti <- arb.io.nasti @[Tile.scala 117:12]

  module Queue :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>, id : UInt<5>, user : UInt<1>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>, id : UInt<5>, user : UInt<1>}}, count : UInt<1>}
  
    cmem ram : { resp : UInt<2>, id : UInt<5>, user : UInt<1>} [1] @[Decoupled.scala 218:16]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 221:27]
    node ptr_match = eq(UInt<1>("h0"), UInt<1>("h0")) @[Decoupled.scala 223:33]
    node _T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 224:28]
    node empty = and(ptr_match, _T) @[Decoupled.scala 224:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 225:24]
    node _T_1 = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 40:37]
    wire do_enq : UInt<1>
    do_enq <= _T_1
    node _T_2 = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 40:37]
    wire do_deq : UInt<1>
    do_deq <= _T_2
    when do_enq : @[Decoupled.scala 229:17]
      infer mport _T_3 = ram[UInt<1>("h0")], clock @[Decoupled.scala 230:8]
      _T_3.user <= io.enq.bits.user @[Decoupled.scala 230:24]
      _T_3.id <= io.enq.bits.id @[Decoupled.scala 230:24]
      _T_3.resp <= io.enq.bits.resp @[Decoupled.scala 230:24]
    when do_deq : @[Decoupled.scala 233:17]
      skip
    node _T_4 = neq(do_enq, do_deq) @[Decoupled.scala 236:16]
    when _T_4 : @[Decoupled.scala 236:28]
      maybe_full <= do_enq @[Decoupled.scala 237:16]
    node _T_5 = eq(empty, UInt<1>("h0")) @[Decoupled.scala 240:19]
    io.deq.valid <= _T_5 @[Decoupled.scala 240:16]
    node _T_6 = eq(full, UInt<1>("h0")) @[Decoupled.scala 241:19]
    io.enq.ready <= _T_6 @[Decoupled.scala 241:16]
    infer mport _T_7 = ram[UInt<1>("h0")], clock @[Decoupled.scala 242:21]
    io.deq.bits.user <= _T_7.user @[Decoupled.scala 242:15]
    io.deq.bits.id <= _T_7.id @[Decoupled.scala 242:15]
    io.deq.bits.resp <= _T_7.resp @[Decoupled.scala 242:15]
    when io.deq.ready : @[Decoupled.scala 254:25]
      io.enq.ready <= UInt<1>("h1") @[Decoupled.scala 254:40]
    node _T_8 = sub(UInt<1>("h0"), UInt<1>("h0")) @[Decoupled.scala 257:32]
    node ptr_diff = tail(_T_8, 1) @[Decoupled.scala 257:32]
    node _T_9 = and(maybe_full, ptr_match) @[Decoupled.scala 259:32]
    node _T_10 = mux(_T_9, UInt<1>("h1"), UInt<1>("h0")) @[Decoupled.scala 259:20]
    node _T_11 = or(_T_10, ptr_diff) @[Decoupled.scala 259:62]
    io.count <= _T_11 @[Decoupled.scala 259:14]

  module Queue_1 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>, id : UInt<5>, user : UInt<1>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>, id : UInt<5>, user : UInt<1>}}, count : UInt<1>}
  
    cmem ram : { resp : UInt<2>, id : UInt<5>, user : UInt<1>} [1] @[Decoupled.scala 218:16]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 221:27]
    node ptr_match = eq(UInt<1>("h0"), UInt<1>("h0")) @[Decoupled.scala 223:33]
    node _T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 224:28]
    node empty = and(ptr_match, _T) @[Decoupled.scala 224:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 225:24]
    node _T_1 = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 40:37]
    wire do_enq : UInt<1>
    do_enq <= _T_1
    node _T_2 = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 40:37]
    wire do_deq : UInt<1>
    do_deq <= _T_2
    when do_enq : @[Decoupled.scala 229:17]
      infer mport _T_3 = ram[UInt<1>("h0")], clock @[Decoupled.scala 230:8]
      _T_3.user <= io.enq.bits.user @[Decoupled.scala 230:24]
      _T_3.id <= io.enq.bits.id @[Decoupled.scala 230:24]
      _T_3.resp <= io.enq.bits.resp @[Decoupled.scala 230:24]
    when do_deq : @[Decoupled.scala 233:17]
      skip
    node _T_4 = neq(do_enq, do_deq) @[Decoupled.scala 236:16]
    when _T_4 : @[Decoupled.scala 236:28]
      maybe_full <= do_enq @[Decoupled.scala 237:16]
    node _T_5 = eq(empty, UInt<1>("h0")) @[Decoupled.scala 240:19]
    io.deq.valid <= _T_5 @[Decoupled.scala 240:16]
    node _T_6 = eq(full, UInt<1>("h0")) @[Decoupled.scala 241:19]
    io.enq.ready <= _T_6 @[Decoupled.scala 241:16]
    infer mport _T_7 = ram[UInt<1>("h0")], clock @[Decoupled.scala 242:21]
    io.deq.bits.user <= _T_7.user @[Decoupled.scala 242:15]
    io.deq.bits.id <= _T_7.id @[Decoupled.scala 242:15]
    io.deq.bits.resp <= _T_7.resp @[Decoupled.scala 242:15]
    when io.deq.ready : @[Decoupled.scala 254:25]
      io.enq.ready <= UInt<1>("h1") @[Decoupled.scala 254:40]
    node _T_8 = sub(UInt<1>("h0"), UInt<1>("h0")) @[Decoupled.scala 257:32]
    node ptr_diff = tail(_T_8, 1) @[Decoupled.scala 257:32]
    node _T_9 = and(maybe_full, ptr_match) @[Decoupled.scala 259:32]
    node _T_10 = mux(_T_9, UInt<1>("h1"), UInt<1>("h0")) @[Decoupled.scala 259:20]
    node _T_11 = or(_T_10, ptr_diff) @[Decoupled.scala 259:62]
    io.count <= _T_11 @[Decoupled.scala 259:14]

  module Queue_2 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>, id : UInt<5>, user : UInt<1>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>, id : UInt<5>, user : UInt<1>}}, count : UInt<1>}
  
    cmem ram : { resp : UInt<2>, id : UInt<5>, user : UInt<1>} [1] @[Decoupled.scala 218:16]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 221:27]
    node ptr_match = eq(UInt<1>("h0"), UInt<1>("h0")) @[Decoupled.scala 223:33]
    node _T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 224:28]
    node empty = and(ptr_match, _T) @[Decoupled.scala 224:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 225:24]
    node _T_1 = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 40:37]
    wire do_enq : UInt<1>
    do_enq <= _T_1
    node _T_2 = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 40:37]
    wire do_deq : UInt<1>
    do_deq <= _T_2
    when do_enq : @[Decoupled.scala 229:17]
      infer mport _T_3 = ram[UInt<1>("h0")], clock @[Decoupled.scala 230:8]
      _T_3.user <= io.enq.bits.user @[Decoupled.scala 230:24]
      _T_3.id <= io.enq.bits.id @[Decoupled.scala 230:24]
      _T_3.resp <= io.enq.bits.resp @[Decoupled.scala 230:24]
    when do_deq : @[Decoupled.scala 233:17]
      skip
    node _T_4 = neq(do_enq, do_deq) @[Decoupled.scala 236:16]
    when _T_4 : @[Decoupled.scala 236:28]
      maybe_full <= do_enq @[Decoupled.scala 237:16]
    node _T_5 = eq(empty, UInt<1>("h0")) @[Decoupled.scala 240:19]
    io.deq.valid <= _T_5 @[Decoupled.scala 240:16]
    node _T_6 = eq(full, UInt<1>("h0")) @[Decoupled.scala 241:19]
    io.enq.ready <= _T_6 @[Decoupled.scala 241:16]
    infer mport _T_7 = ram[UInt<1>("h0")], clock @[Decoupled.scala 242:21]
    io.deq.bits.user <= _T_7.user @[Decoupled.scala 242:15]
    io.deq.bits.id <= _T_7.id @[Decoupled.scala 242:15]
    io.deq.bits.resp <= _T_7.resp @[Decoupled.scala 242:15]
    when io.deq.ready : @[Decoupled.scala 254:25]
      io.enq.ready <= UInt<1>("h1") @[Decoupled.scala 254:40]
    node _T_8 = sub(UInt<1>("h0"), UInt<1>("h0")) @[Decoupled.scala 257:32]
    node ptr_diff = tail(_T_8, 1) @[Decoupled.scala 257:32]
    node _T_9 = and(maybe_full, ptr_match) @[Decoupled.scala 259:32]
    node _T_10 = mux(_T_9, UInt<1>("h1"), UInt<1>("h0")) @[Decoupled.scala 259:20]
    node _T_11 = or(_T_10, ptr_diff) @[Decoupled.scala 259:62]
    io.count <= _T_11 @[Decoupled.scala 259:14]

  module Queue_3 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>, id : UInt<5>, user : UInt<1>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>, id : UInt<5>, user : UInt<1>}}, count : UInt<1>}
  
    cmem ram : { resp : UInt<2>, id : UInt<5>, user : UInt<1>} [1] @[Decoupled.scala 218:16]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 221:27]
    node ptr_match = eq(UInt<1>("h0"), UInt<1>("h0")) @[Decoupled.scala 223:33]
    node _T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 224:28]
    node empty = and(ptr_match, _T) @[Decoupled.scala 224:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 225:24]
    node _T_1 = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 40:37]
    wire do_enq : UInt<1>
    do_enq <= _T_1
    node _T_2 = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 40:37]
    wire do_deq : UInt<1>
    do_deq <= _T_2
    when do_enq : @[Decoupled.scala 229:17]
      infer mport _T_3 = ram[UInt<1>("h0")], clock @[Decoupled.scala 230:8]
      _T_3.user <= io.enq.bits.user @[Decoupled.scala 230:24]
      _T_3.id <= io.enq.bits.id @[Decoupled.scala 230:24]
      _T_3.resp <= io.enq.bits.resp @[Decoupled.scala 230:24]
    when do_deq : @[Decoupled.scala 233:17]
      skip
    node _T_4 = neq(do_enq, do_deq) @[Decoupled.scala 236:16]
    when _T_4 : @[Decoupled.scala 236:28]
      maybe_full <= do_enq @[Decoupled.scala 237:16]
    node _T_5 = eq(empty, UInt<1>("h0")) @[Decoupled.scala 240:19]
    io.deq.valid <= _T_5 @[Decoupled.scala 240:16]
    node _T_6 = eq(full, UInt<1>("h0")) @[Decoupled.scala 241:19]
    io.enq.ready <= _T_6 @[Decoupled.scala 241:16]
    infer mport _T_7 = ram[UInt<1>("h0")], clock @[Decoupled.scala 242:21]
    io.deq.bits.user <= _T_7.user @[Decoupled.scala 242:15]
    io.deq.bits.id <= _T_7.id @[Decoupled.scala 242:15]
    io.deq.bits.resp <= _T_7.resp @[Decoupled.scala 242:15]
    when io.deq.ready : @[Decoupled.scala 254:25]
      io.enq.ready <= UInt<1>("h1") @[Decoupled.scala 254:40]
    node _T_8 = sub(UInt<1>("h0"), UInt<1>("h0")) @[Decoupled.scala 257:32]
    node ptr_diff = tail(_T_8, 1) @[Decoupled.scala 257:32]
    node _T_9 = and(maybe_full, ptr_match) @[Decoupled.scala 259:32]
    node _T_10 = mux(_T_9, UInt<1>("h1"), UInt<1>("h0")) @[Decoupled.scala 259:20]
    node _T_11 = or(_T_10, ptr_diff) @[Decoupled.scala 259:62]
    io.count <= _T_11 @[Decoupled.scala 259:14]

  module Queue_4 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>, id : UInt<5>, user : UInt<1>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>, id : UInt<5>, user : UInt<1>}}, count : UInt<1>}
  
    cmem ram : { resp : UInt<2>, id : UInt<5>, user : UInt<1>} [1] @[Decoupled.scala 218:16]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 221:27]
    node ptr_match = eq(UInt<1>("h0"), UInt<1>("h0")) @[Decoupled.scala 223:33]
    node _T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 224:28]
    node empty = and(ptr_match, _T) @[Decoupled.scala 224:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 225:24]
    node _T_1 = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 40:37]
    wire do_enq : UInt<1>
    do_enq <= _T_1
    node _T_2 = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 40:37]
    wire do_deq : UInt<1>
    do_deq <= _T_2
    when do_enq : @[Decoupled.scala 229:17]
      infer mport _T_3 = ram[UInt<1>("h0")], clock @[Decoupled.scala 230:8]
      _T_3.user <= io.enq.bits.user @[Decoupled.scala 230:24]
      _T_3.id <= io.enq.bits.id @[Decoupled.scala 230:24]
      _T_3.resp <= io.enq.bits.resp @[Decoupled.scala 230:24]
    when do_deq : @[Decoupled.scala 233:17]
      skip
    node _T_4 = neq(do_enq, do_deq) @[Decoupled.scala 236:16]
    when _T_4 : @[Decoupled.scala 236:28]
      maybe_full <= do_enq @[Decoupled.scala 237:16]
    node _T_5 = eq(empty, UInt<1>("h0")) @[Decoupled.scala 240:19]
    io.deq.valid <= _T_5 @[Decoupled.scala 240:16]
    node _T_6 = eq(full, UInt<1>("h0")) @[Decoupled.scala 241:19]
    io.enq.ready <= _T_6 @[Decoupled.scala 241:16]
    infer mport _T_7 = ram[UInt<1>("h0")], clock @[Decoupled.scala 242:21]
    io.deq.bits.user <= _T_7.user @[Decoupled.scala 242:15]
    io.deq.bits.id <= _T_7.id @[Decoupled.scala 242:15]
    io.deq.bits.resp <= _T_7.resp @[Decoupled.scala 242:15]
    when io.deq.ready : @[Decoupled.scala 254:25]
      io.enq.ready <= UInt<1>("h1") @[Decoupled.scala 254:40]
    node _T_8 = sub(UInt<1>("h0"), UInt<1>("h0")) @[Decoupled.scala 257:32]
    node ptr_diff = tail(_T_8, 1) @[Decoupled.scala 257:32]
    node _T_9 = and(maybe_full, ptr_match) @[Decoupled.scala 259:32]
    node _T_10 = mux(_T_9, UInt<1>("h1"), UInt<1>("h0")) @[Decoupled.scala 259:20]
    node _T_11 = or(_T_10, ptr_diff) @[Decoupled.scala 259:62]
    io.count <= _T_11 @[Decoupled.scala 259:14]

  module Queue_5 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>, id : UInt<5>, user : UInt<1>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>, id : UInt<5>, user : UInt<1>}}, count : UInt<1>}
  
    cmem ram : { resp : UInt<2>, id : UInt<5>, user : UInt<1>} [1] @[Decoupled.scala 218:16]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 221:27]
    node ptr_match = eq(UInt<1>("h0"), UInt<1>("h0")) @[Decoupled.scala 223:33]
    node _T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 224:28]
    node empty = and(ptr_match, _T) @[Decoupled.scala 224:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 225:24]
    node _T_1 = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 40:37]
    wire do_enq : UInt<1>
    do_enq <= _T_1
    node _T_2 = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 40:37]
    wire do_deq : UInt<1>
    do_deq <= _T_2
    when do_enq : @[Decoupled.scala 229:17]
      infer mport _T_3 = ram[UInt<1>("h0")], clock @[Decoupled.scala 230:8]
      _T_3.user <= io.enq.bits.user @[Decoupled.scala 230:24]
      _T_3.id <= io.enq.bits.id @[Decoupled.scala 230:24]
      _T_3.resp <= io.enq.bits.resp @[Decoupled.scala 230:24]
    when do_deq : @[Decoupled.scala 233:17]
      skip
    node _T_4 = neq(do_enq, do_deq) @[Decoupled.scala 236:16]
    when _T_4 : @[Decoupled.scala 236:28]
      maybe_full <= do_enq @[Decoupled.scala 237:16]
    node _T_5 = eq(empty, UInt<1>("h0")) @[Decoupled.scala 240:19]
    io.deq.valid <= _T_5 @[Decoupled.scala 240:16]
    node _T_6 = eq(full, UInt<1>("h0")) @[Decoupled.scala 241:19]
    io.enq.ready <= _T_6 @[Decoupled.scala 241:16]
    infer mport _T_7 = ram[UInt<1>("h0")], clock @[Decoupled.scala 242:21]
    io.deq.bits.user <= _T_7.user @[Decoupled.scala 242:15]
    io.deq.bits.id <= _T_7.id @[Decoupled.scala 242:15]
    io.deq.bits.resp <= _T_7.resp @[Decoupled.scala 242:15]
    when io.deq.ready : @[Decoupled.scala 254:25]
      io.enq.ready <= UInt<1>("h1") @[Decoupled.scala 254:40]
    node _T_8 = sub(UInt<1>("h0"), UInt<1>("h0")) @[Decoupled.scala 257:32]
    node ptr_diff = tail(_T_8, 1) @[Decoupled.scala 257:32]
    node _T_9 = and(maybe_full, ptr_match) @[Decoupled.scala 259:32]
    node _T_10 = mux(_T_9, UInt<1>("h1"), UInt<1>("h0")) @[Decoupled.scala 259:20]
    node _T_11 = or(_T_10, ptr_diff) @[Decoupled.scala 259:62]
    io.count <= _T_11 @[Decoupled.scala 259:14]

  module Queue_6 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>, id : UInt<5>, user : UInt<1>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>, id : UInt<5>, user : UInt<1>}}, count : UInt<1>}
  
    cmem ram : { resp : UInt<2>, id : UInt<5>, user : UInt<1>} [1] @[Decoupled.scala 218:16]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 221:27]
    node ptr_match = eq(UInt<1>("h0"), UInt<1>("h0")) @[Decoupled.scala 223:33]
    node _T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 224:28]
    node empty = and(ptr_match, _T) @[Decoupled.scala 224:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 225:24]
    node _T_1 = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 40:37]
    wire do_enq : UInt<1>
    do_enq <= _T_1
    node _T_2 = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 40:37]
    wire do_deq : UInt<1>
    do_deq <= _T_2
    when do_enq : @[Decoupled.scala 229:17]
      infer mport _T_3 = ram[UInt<1>("h0")], clock @[Decoupled.scala 230:8]
      _T_3.user <= io.enq.bits.user @[Decoupled.scala 230:24]
      _T_3.id <= io.enq.bits.id @[Decoupled.scala 230:24]
      _T_3.resp <= io.enq.bits.resp @[Decoupled.scala 230:24]
    when do_deq : @[Decoupled.scala 233:17]
      skip
    node _T_4 = neq(do_enq, do_deq) @[Decoupled.scala 236:16]
    when _T_4 : @[Decoupled.scala 236:28]
      maybe_full <= do_enq @[Decoupled.scala 237:16]
    node _T_5 = eq(empty, UInt<1>("h0")) @[Decoupled.scala 240:19]
    io.deq.valid <= _T_5 @[Decoupled.scala 240:16]
    node _T_6 = eq(full, UInt<1>("h0")) @[Decoupled.scala 241:19]
    io.enq.ready <= _T_6 @[Decoupled.scala 241:16]
    infer mport _T_7 = ram[UInt<1>("h0")], clock @[Decoupled.scala 242:21]
    io.deq.bits.user <= _T_7.user @[Decoupled.scala 242:15]
    io.deq.bits.id <= _T_7.id @[Decoupled.scala 242:15]
    io.deq.bits.resp <= _T_7.resp @[Decoupled.scala 242:15]
    when io.deq.ready : @[Decoupled.scala 254:25]
      io.enq.ready <= UInt<1>("h1") @[Decoupled.scala 254:40]
    node _T_8 = sub(UInt<1>("h0"), UInt<1>("h0")) @[Decoupled.scala 257:32]
    node ptr_diff = tail(_T_8, 1) @[Decoupled.scala 257:32]
    node _T_9 = and(maybe_full, ptr_match) @[Decoupled.scala 259:32]
    node _T_10 = mux(_T_9, UInt<1>("h1"), UInt<1>("h0")) @[Decoupled.scala 259:20]
    node _T_11 = or(_T_10, ptr_diff) @[Decoupled.scala 259:62]
    io.count <= _T_11 @[Decoupled.scala 259:14]

  module Queue_7 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>, id : UInt<5>, user : UInt<1>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>, id : UInt<5>, user : UInt<1>}}, count : UInt<1>}
  
    cmem ram : { resp : UInt<2>, id : UInt<5>, user : UInt<1>} [1] @[Decoupled.scala 218:16]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 221:27]
    node ptr_match = eq(UInt<1>("h0"), UInt<1>("h0")) @[Decoupled.scala 223:33]
    node _T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 224:28]
    node empty = and(ptr_match, _T) @[Decoupled.scala 224:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 225:24]
    node _T_1 = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 40:37]
    wire do_enq : UInt<1>
    do_enq <= _T_1
    node _T_2 = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 40:37]
    wire do_deq : UInt<1>
    do_deq <= _T_2
    when do_enq : @[Decoupled.scala 229:17]
      infer mport _T_3 = ram[UInt<1>("h0")], clock @[Decoupled.scala 230:8]
      _T_3.user <= io.enq.bits.user @[Decoupled.scala 230:24]
      _T_3.id <= io.enq.bits.id @[Decoupled.scala 230:24]
      _T_3.resp <= io.enq.bits.resp @[Decoupled.scala 230:24]
    when do_deq : @[Decoupled.scala 233:17]
      skip
    node _T_4 = neq(do_enq, do_deq) @[Decoupled.scala 236:16]
    when _T_4 : @[Decoupled.scala 236:28]
      maybe_full <= do_enq @[Decoupled.scala 237:16]
    node _T_5 = eq(empty, UInt<1>("h0")) @[Decoupled.scala 240:19]
    io.deq.valid <= _T_5 @[Decoupled.scala 240:16]
    node _T_6 = eq(full, UInt<1>("h0")) @[Decoupled.scala 241:19]
    io.enq.ready <= _T_6 @[Decoupled.scala 241:16]
    infer mport _T_7 = ram[UInt<1>("h0")], clock @[Decoupled.scala 242:21]
    io.deq.bits.user <= _T_7.user @[Decoupled.scala 242:15]
    io.deq.bits.id <= _T_7.id @[Decoupled.scala 242:15]
    io.deq.bits.resp <= _T_7.resp @[Decoupled.scala 242:15]
    when io.deq.ready : @[Decoupled.scala 254:25]
      io.enq.ready <= UInt<1>("h1") @[Decoupled.scala 254:40]
    node _T_8 = sub(UInt<1>("h0"), UInt<1>("h0")) @[Decoupled.scala 257:32]
    node ptr_diff = tail(_T_8, 1) @[Decoupled.scala 257:32]
    node _T_9 = and(maybe_full, ptr_match) @[Decoupled.scala 259:32]
    node _T_10 = mux(_T_9, UInt<1>("h1"), UInt<1>("h0")) @[Decoupled.scala 259:20]
    node _T_11 = or(_T_10, ptr_diff) @[Decoupled.scala 259:62]
    io.count <= _T_11 @[Decoupled.scala 259:14]

  module LatencyPipe :
    input clock : Clock
    input reset : Reset
    output io : { gen : { resp : UInt<2>, id : UInt<5>, user : UInt<1>}, flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>, id : UInt<5>, user : UInt<1>}}, out : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>, id : UInt<5>, user : UInt<1>}}}
  
    io.out.bits.user is invalid @[TileTester.scala 155:6]
    io.out.bits.id is invalid @[TileTester.scala 155:6]
    io.out.bits.resp is invalid @[TileTester.scala 155:6]
    io.out.valid is invalid @[TileTester.scala 155:6]
    io.out.ready is invalid @[TileTester.scala 155:6]
    io.in.bits.user is invalid @[TileTester.scala 155:6]
    io.in.bits.id is invalid @[TileTester.scala 155:6]
    io.in.bits.resp is invalid @[TileTester.scala 155:6]
    io.in.valid is invalid @[TileTester.scala 155:6]
    io.in.ready is invalid @[TileTester.scala 155:6]
    io.gen.user is invalid @[TileTester.scala 155:6]
    io.gen.id is invalid @[TileTester.scala 155:6]
    io.gen.resp is invalid @[TileTester.scala 155:6]
    inst Queue of Queue @[Decoupled.scala 296:21]
    Queue.clock <= clock
    Queue.reset <= reset
    Queue.io.enq.valid <= io.in.valid @[Decoupled.scala 297:22]
    Queue.io.enq.bits.user <= io.in.bits.user @[Decoupled.scala 298:21]
    Queue.io.enq.bits.id <= io.in.bits.id @[Decoupled.scala 298:21]
    Queue.io.enq.bits.resp <= io.in.bits.resp @[Decoupled.scala 298:21]
    io.in.ready <= Queue.io.enq.ready @[Decoupled.scala 299:17]
    inst Queue_1 of Queue_1 @[Decoupled.scala 296:21]
    Queue_1.clock <= clock
    Queue_1.reset <= reset
    Queue_1.io.enq.valid <= Queue.io.deq.valid @[Decoupled.scala 297:22]
    Queue_1.io.enq.bits.user <= Queue.io.deq.bits.user @[Decoupled.scala 298:21]
    Queue_1.io.enq.bits.id <= Queue.io.deq.bits.id @[Decoupled.scala 298:21]
    Queue_1.io.enq.bits.resp <= Queue.io.deq.bits.resp @[Decoupled.scala 298:21]
    Queue.io.deq.ready <= Queue_1.io.enq.ready @[Decoupled.scala 299:17]
    inst Queue_2 of Queue_2 @[Decoupled.scala 296:21]
    Queue_2.clock <= clock
    Queue_2.reset <= reset
    Queue_2.io.enq.valid <= Queue_1.io.deq.valid @[Decoupled.scala 297:22]
    Queue_2.io.enq.bits.user <= Queue_1.io.deq.bits.user @[Decoupled.scala 298:21]
    Queue_2.io.enq.bits.id <= Queue_1.io.deq.bits.id @[Decoupled.scala 298:21]
    Queue_2.io.enq.bits.resp <= Queue_1.io.deq.bits.resp @[Decoupled.scala 298:21]
    Queue_1.io.deq.ready <= Queue_2.io.enq.ready @[Decoupled.scala 299:17]
    inst Queue_3 of Queue_3 @[Decoupled.scala 296:21]
    Queue_3.clock <= clock
    Queue_3.reset <= reset
    Queue_3.io.enq.valid <= Queue_2.io.deq.valid @[Decoupled.scala 297:22]
    Queue_3.io.enq.bits.user <= Queue_2.io.deq.bits.user @[Decoupled.scala 298:21]
    Queue_3.io.enq.bits.id <= Queue_2.io.deq.bits.id @[Decoupled.scala 298:21]
    Queue_3.io.enq.bits.resp <= Queue_2.io.deq.bits.resp @[Decoupled.scala 298:21]
    Queue_2.io.deq.ready <= Queue_3.io.enq.ready @[Decoupled.scala 299:17]
    inst Queue_4 of Queue_4 @[Decoupled.scala 296:21]
    Queue_4.clock <= clock
    Queue_4.reset <= reset
    Queue_4.io.enq.valid <= Queue_3.io.deq.valid @[Decoupled.scala 297:22]
    Queue_4.io.enq.bits.user <= Queue_3.io.deq.bits.user @[Decoupled.scala 298:21]
    Queue_4.io.enq.bits.id <= Queue_3.io.deq.bits.id @[Decoupled.scala 298:21]
    Queue_4.io.enq.bits.resp <= Queue_3.io.deq.bits.resp @[Decoupled.scala 298:21]
    Queue_3.io.deq.ready <= Queue_4.io.enq.ready @[Decoupled.scala 299:17]
    inst Queue_5 of Queue_5 @[Decoupled.scala 296:21]
    Queue_5.clock <= clock
    Queue_5.reset <= reset
    Queue_5.io.enq.valid <= Queue_4.io.deq.valid @[Decoupled.scala 297:22]
    Queue_5.io.enq.bits.user <= Queue_4.io.deq.bits.user @[Decoupled.scala 298:21]
    Queue_5.io.enq.bits.id <= Queue_4.io.deq.bits.id @[Decoupled.scala 298:21]
    Queue_5.io.enq.bits.resp <= Queue_4.io.deq.bits.resp @[Decoupled.scala 298:21]
    Queue_4.io.deq.ready <= Queue_5.io.enq.ready @[Decoupled.scala 299:17]
    inst Queue_6 of Queue_6 @[Decoupled.scala 296:21]
    Queue_6.clock <= clock
    Queue_6.reset <= reset
    Queue_6.io.enq.valid <= Queue_5.io.deq.valid @[Decoupled.scala 297:22]
    Queue_6.io.enq.bits.user <= Queue_5.io.deq.bits.user @[Decoupled.scala 298:21]
    Queue_6.io.enq.bits.id <= Queue_5.io.deq.bits.id @[Decoupled.scala 298:21]
    Queue_6.io.enq.bits.resp <= Queue_5.io.deq.bits.resp @[Decoupled.scala 298:21]
    Queue_5.io.deq.ready <= Queue_6.io.enq.ready @[Decoupled.scala 299:17]
    inst Queue_7 of Queue_7 @[Decoupled.scala 296:21]
    Queue_7.clock <= clock
    Queue_7.reset <= reset
    Queue_7.io.enq.valid <= Queue_6.io.deq.valid @[Decoupled.scala 297:22]
    Queue_7.io.enq.bits.user <= Queue_6.io.deq.bits.user @[Decoupled.scala 298:21]
    Queue_7.io.enq.bits.id <= Queue_6.io.deq.bits.id @[Decoupled.scala 298:21]
    Queue_7.io.enq.bits.resp <= Queue_6.io.deq.bits.resp @[Decoupled.scala 298:21]
    Queue_6.io.deq.ready <= Queue_7.io.enq.ready @[Decoupled.scala 299:17]
    io.out.bits <- Queue_7.io.deq.bits @[TileTester.scala 156:10]
    io.out.valid <= Queue_7.io.deq.valid @[TileTester.scala 156:10]
    Queue_7.io.deq.ready <= io.out.ready @[TileTester.scala 156:10]

  module Queue_8 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>, data : UInt<64>, last : UInt<1>, id : UInt<5>, user : UInt<1>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>, data : UInt<64>, last : UInt<1>, id : UInt<5>, user : UInt<1>}}, count : UInt<1>}
  
    cmem ram : { resp : UInt<2>, data : UInt<64>, last : UInt<1>, id : UInt<5>, user : UInt<1>} [1] @[Decoupled.scala 218:16]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 221:27]
    node ptr_match = eq(UInt<1>("h0"), UInt<1>("h0")) @[Decoupled.scala 223:33]
    node _T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 224:28]
    node empty = and(ptr_match, _T) @[Decoupled.scala 224:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 225:24]
    node _T_1 = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 40:37]
    wire do_enq : UInt<1>
    do_enq <= _T_1
    node _T_2 = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 40:37]
    wire do_deq : UInt<1>
    do_deq <= _T_2
    when do_enq : @[Decoupled.scala 229:17]
      infer mport _T_3 = ram[UInt<1>("h0")], clock @[Decoupled.scala 230:8]
      _T_3.user <= io.enq.bits.user @[Decoupled.scala 230:24]
      _T_3.id <= io.enq.bits.id @[Decoupled.scala 230:24]
      _T_3.last <= io.enq.bits.last @[Decoupled.scala 230:24]
      _T_3.data <= io.enq.bits.data @[Decoupled.scala 230:24]
      _T_3.resp <= io.enq.bits.resp @[Decoupled.scala 230:24]
    when do_deq : @[Decoupled.scala 233:17]
      skip
    node _T_4 = neq(do_enq, do_deq) @[Decoupled.scala 236:16]
    when _T_4 : @[Decoupled.scala 236:28]
      maybe_full <= do_enq @[Decoupled.scala 237:16]
    node _T_5 = eq(empty, UInt<1>("h0")) @[Decoupled.scala 240:19]
    io.deq.valid <= _T_5 @[Decoupled.scala 240:16]
    node _T_6 = eq(full, UInt<1>("h0")) @[Decoupled.scala 241:19]
    io.enq.ready <= _T_6 @[Decoupled.scala 241:16]
    infer mport _T_7 = ram[UInt<1>("h0")], clock @[Decoupled.scala 242:21]
    io.deq.bits.user <= _T_7.user @[Decoupled.scala 242:15]
    io.deq.bits.id <= _T_7.id @[Decoupled.scala 242:15]
    io.deq.bits.last <= _T_7.last @[Decoupled.scala 242:15]
    io.deq.bits.data <= _T_7.data @[Decoupled.scala 242:15]
    io.deq.bits.resp <= _T_7.resp @[Decoupled.scala 242:15]
    when io.deq.ready : @[Decoupled.scala 254:25]
      io.enq.ready <= UInt<1>("h1") @[Decoupled.scala 254:40]
    node _T_8 = sub(UInt<1>("h0"), UInt<1>("h0")) @[Decoupled.scala 257:32]
    node ptr_diff = tail(_T_8, 1) @[Decoupled.scala 257:32]
    node _T_9 = and(maybe_full, ptr_match) @[Decoupled.scala 259:32]
    node _T_10 = mux(_T_9, UInt<1>("h1"), UInt<1>("h0")) @[Decoupled.scala 259:20]
    node _T_11 = or(_T_10, ptr_diff) @[Decoupled.scala 259:62]
    io.count <= _T_11 @[Decoupled.scala 259:14]

  module Queue_9 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>, data : UInt<64>, last : UInt<1>, id : UInt<5>, user : UInt<1>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>, data : UInt<64>, last : UInt<1>, id : UInt<5>, user : UInt<1>}}, count : UInt<1>}
  
    cmem ram : { resp : UInt<2>, data : UInt<64>, last : UInt<1>, id : UInt<5>, user : UInt<1>} [1] @[Decoupled.scala 218:16]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 221:27]
    node ptr_match = eq(UInt<1>("h0"), UInt<1>("h0")) @[Decoupled.scala 223:33]
    node _T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 224:28]
    node empty = and(ptr_match, _T) @[Decoupled.scala 224:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 225:24]
    node _T_1 = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 40:37]
    wire do_enq : UInt<1>
    do_enq <= _T_1
    node _T_2 = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 40:37]
    wire do_deq : UInt<1>
    do_deq <= _T_2
    when do_enq : @[Decoupled.scala 229:17]
      infer mport _T_3 = ram[UInt<1>("h0")], clock @[Decoupled.scala 230:8]
      _T_3.user <= io.enq.bits.user @[Decoupled.scala 230:24]
      _T_3.id <= io.enq.bits.id @[Decoupled.scala 230:24]
      _T_3.last <= io.enq.bits.last @[Decoupled.scala 230:24]
      _T_3.data <= io.enq.bits.data @[Decoupled.scala 230:24]
      _T_3.resp <= io.enq.bits.resp @[Decoupled.scala 230:24]
    when do_deq : @[Decoupled.scala 233:17]
      skip
    node _T_4 = neq(do_enq, do_deq) @[Decoupled.scala 236:16]
    when _T_4 : @[Decoupled.scala 236:28]
      maybe_full <= do_enq @[Decoupled.scala 237:16]
    node _T_5 = eq(empty, UInt<1>("h0")) @[Decoupled.scala 240:19]
    io.deq.valid <= _T_5 @[Decoupled.scala 240:16]
    node _T_6 = eq(full, UInt<1>("h0")) @[Decoupled.scala 241:19]
    io.enq.ready <= _T_6 @[Decoupled.scala 241:16]
    infer mport _T_7 = ram[UInt<1>("h0")], clock @[Decoupled.scala 242:21]
    io.deq.bits.user <= _T_7.user @[Decoupled.scala 242:15]
    io.deq.bits.id <= _T_7.id @[Decoupled.scala 242:15]
    io.deq.bits.last <= _T_7.last @[Decoupled.scala 242:15]
    io.deq.bits.data <= _T_7.data @[Decoupled.scala 242:15]
    io.deq.bits.resp <= _T_7.resp @[Decoupled.scala 242:15]
    when io.deq.ready : @[Decoupled.scala 254:25]
      io.enq.ready <= UInt<1>("h1") @[Decoupled.scala 254:40]
    node _T_8 = sub(UInt<1>("h0"), UInt<1>("h0")) @[Decoupled.scala 257:32]
    node ptr_diff = tail(_T_8, 1) @[Decoupled.scala 257:32]
    node _T_9 = and(maybe_full, ptr_match) @[Decoupled.scala 259:32]
    node _T_10 = mux(_T_9, UInt<1>("h1"), UInt<1>("h0")) @[Decoupled.scala 259:20]
    node _T_11 = or(_T_10, ptr_diff) @[Decoupled.scala 259:62]
    io.count <= _T_11 @[Decoupled.scala 259:14]

  module Queue_10 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>, data : UInt<64>, last : UInt<1>, id : UInt<5>, user : UInt<1>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>, data : UInt<64>, last : UInt<1>, id : UInt<5>, user : UInt<1>}}, count : UInt<1>}
  
    cmem ram : { resp : UInt<2>, data : UInt<64>, last : UInt<1>, id : UInt<5>, user : UInt<1>} [1] @[Decoupled.scala 218:16]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 221:27]
    node ptr_match = eq(UInt<1>("h0"), UInt<1>("h0")) @[Decoupled.scala 223:33]
    node _T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 224:28]
    node empty = and(ptr_match, _T) @[Decoupled.scala 224:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 225:24]
    node _T_1 = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 40:37]
    wire do_enq : UInt<1>
    do_enq <= _T_1
    node _T_2 = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 40:37]
    wire do_deq : UInt<1>
    do_deq <= _T_2
    when do_enq : @[Decoupled.scala 229:17]
      infer mport _T_3 = ram[UInt<1>("h0")], clock @[Decoupled.scala 230:8]
      _T_3.user <= io.enq.bits.user @[Decoupled.scala 230:24]
      _T_3.id <= io.enq.bits.id @[Decoupled.scala 230:24]
      _T_3.last <= io.enq.bits.last @[Decoupled.scala 230:24]
      _T_3.data <= io.enq.bits.data @[Decoupled.scala 230:24]
      _T_3.resp <= io.enq.bits.resp @[Decoupled.scala 230:24]
    when do_deq : @[Decoupled.scala 233:17]
      skip
    node _T_4 = neq(do_enq, do_deq) @[Decoupled.scala 236:16]
    when _T_4 : @[Decoupled.scala 236:28]
      maybe_full <= do_enq @[Decoupled.scala 237:16]
    node _T_5 = eq(empty, UInt<1>("h0")) @[Decoupled.scala 240:19]
    io.deq.valid <= _T_5 @[Decoupled.scala 240:16]
    node _T_6 = eq(full, UInt<1>("h0")) @[Decoupled.scala 241:19]
    io.enq.ready <= _T_6 @[Decoupled.scala 241:16]
    infer mport _T_7 = ram[UInt<1>("h0")], clock @[Decoupled.scala 242:21]
    io.deq.bits.user <= _T_7.user @[Decoupled.scala 242:15]
    io.deq.bits.id <= _T_7.id @[Decoupled.scala 242:15]
    io.deq.bits.last <= _T_7.last @[Decoupled.scala 242:15]
    io.deq.bits.data <= _T_7.data @[Decoupled.scala 242:15]
    io.deq.bits.resp <= _T_7.resp @[Decoupled.scala 242:15]
    when io.deq.ready : @[Decoupled.scala 254:25]
      io.enq.ready <= UInt<1>("h1") @[Decoupled.scala 254:40]
    node _T_8 = sub(UInt<1>("h0"), UInt<1>("h0")) @[Decoupled.scala 257:32]
    node ptr_diff = tail(_T_8, 1) @[Decoupled.scala 257:32]
    node _T_9 = and(maybe_full, ptr_match) @[Decoupled.scala 259:32]
    node _T_10 = mux(_T_9, UInt<1>("h1"), UInt<1>("h0")) @[Decoupled.scala 259:20]
    node _T_11 = or(_T_10, ptr_diff) @[Decoupled.scala 259:62]
    io.count <= _T_11 @[Decoupled.scala 259:14]

  module Queue_11 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>, data : UInt<64>, last : UInt<1>, id : UInt<5>, user : UInt<1>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>, data : UInt<64>, last : UInt<1>, id : UInt<5>, user : UInt<1>}}, count : UInt<1>}
  
    cmem ram : { resp : UInt<2>, data : UInt<64>, last : UInt<1>, id : UInt<5>, user : UInt<1>} [1] @[Decoupled.scala 218:16]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 221:27]
    node ptr_match = eq(UInt<1>("h0"), UInt<1>("h0")) @[Decoupled.scala 223:33]
    node _T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 224:28]
    node empty = and(ptr_match, _T) @[Decoupled.scala 224:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 225:24]
    node _T_1 = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 40:37]
    wire do_enq : UInt<1>
    do_enq <= _T_1
    node _T_2 = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 40:37]
    wire do_deq : UInt<1>
    do_deq <= _T_2
    when do_enq : @[Decoupled.scala 229:17]
      infer mport _T_3 = ram[UInt<1>("h0")], clock @[Decoupled.scala 230:8]
      _T_3.user <= io.enq.bits.user @[Decoupled.scala 230:24]
      _T_3.id <= io.enq.bits.id @[Decoupled.scala 230:24]
      _T_3.last <= io.enq.bits.last @[Decoupled.scala 230:24]
      _T_3.data <= io.enq.bits.data @[Decoupled.scala 230:24]
      _T_3.resp <= io.enq.bits.resp @[Decoupled.scala 230:24]
    when do_deq : @[Decoupled.scala 233:17]
      skip
    node _T_4 = neq(do_enq, do_deq) @[Decoupled.scala 236:16]
    when _T_4 : @[Decoupled.scala 236:28]
      maybe_full <= do_enq @[Decoupled.scala 237:16]
    node _T_5 = eq(empty, UInt<1>("h0")) @[Decoupled.scala 240:19]
    io.deq.valid <= _T_5 @[Decoupled.scala 240:16]
    node _T_6 = eq(full, UInt<1>("h0")) @[Decoupled.scala 241:19]
    io.enq.ready <= _T_6 @[Decoupled.scala 241:16]
    infer mport _T_7 = ram[UInt<1>("h0")], clock @[Decoupled.scala 242:21]
    io.deq.bits.user <= _T_7.user @[Decoupled.scala 242:15]
    io.deq.bits.id <= _T_7.id @[Decoupled.scala 242:15]
    io.deq.bits.last <= _T_7.last @[Decoupled.scala 242:15]
    io.deq.bits.data <= _T_7.data @[Decoupled.scala 242:15]
    io.deq.bits.resp <= _T_7.resp @[Decoupled.scala 242:15]
    when io.deq.ready : @[Decoupled.scala 254:25]
      io.enq.ready <= UInt<1>("h1") @[Decoupled.scala 254:40]
    node _T_8 = sub(UInt<1>("h0"), UInt<1>("h0")) @[Decoupled.scala 257:32]
    node ptr_diff = tail(_T_8, 1) @[Decoupled.scala 257:32]
    node _T_9 = and(maybe_full, ptr_match) @[Decoupled.scala 259:32]
    node _T_10 = mux(_T_9, UInt<1>("h1"), UInt<1>("h0")) @[Decoupled.scala 259:20]
    node _T_11 = or(_T_10, ptr_diff) @[Decoupled.scala 259:62]
    io.count <= _T_11 @[Decoupled.scala 259:14]

  module Queue_12 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>, data : UInt<64>, last : UInt<1>, id : UInt<5>, user : UInt<1>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>, data : UInt<64>, last : UInt<1>, id : UInt<5>, user : UInt<1>}}, count : UInt<1>}
  
    cmem ram : { resp : UInt<2>, data : UInt<64>, last : UInt<1>, id : UInt<5>, user : UInt<1>} [1] @[Decoupled.scala 218:16]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 221:27]
    node ptr_match = eq(UInt<1>("h0"), UInt<1>("h0")) @[Decoupled.scala 223:33]
    node _T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 224:28]
    node empty = and(ptr_match, _T) @[Decoupled.scala 224:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 225:24]
    node _T_1 = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 40:37]
    wire do_enq : UInt<1>
    do_enq <= _T_1
    node _T_2 = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 40:37]
    wire do_deq : UInt<1>
    do_deq <= _T_2
    when do_enq : @[Decoupled.scala 229:17]
      infer mport _T_3 = ram[UInt<1>("h0")], clock @[Decoupled.scala 230:8]
      _T_3.user <= io.enq.bits.user @[Decoupled.scala 230:24]
      _T_3.id <= io.enq.bits.id @[Decoupled.scala 230:24]
      _T_3.last <= io.enq.bits.last @[Decoupled.scala 230:24]
      _T_3.data <= io.enq.bits.data @[Decoupled.scala 230:24]
      _T_3.resp <= io.enq.bits.resp @[Decoupled.scala 230:24]
    when do_deq : @[Decoupled.scala 233:17]
      skip
    node _T_4 = neq(do_enq, do_deq) @[Decoupled.scala 236:16]
    when _T_4 : @[Decoupled.scala 236:28]
      maybe_full <= do_enq @[Decoupled.scala 237:16]
    node _T_5 = eq(empty, UInt<1>("h0")) @[Decoupled.scala 240:19]
    io.deq.valid <= _T_5 @[Decoupled.scala 240:16]
    node _T_6 = eq(full, UInt<1>("h0")) @[Decoupled.scala 241:19]
    io.enq.ready <= _T_6 @[Decoupled.scala 241:16]
    infer mport _T_7 = ram[UInt<1>("h0")], clock @[Decoupled.scala 242:21]
    io.deq.bits.user <= _T_7.user @[Decoupled.scala 242:15]
    io.deq.bits.id <= _T_7.id @[Decoupled.scala 242:15]
    io.deq.bits.last <= _T_7.last @[Decoupled.scala 242:15]
    io.deq.bits.data <= _T_7.data @[Decoupled.scala 242:15]
    io.deq.bits.resp <= _T_7.resp @[Decoupled.scala 242:15]
    when io.deq.ready : @[Decoupled.scala 254:25]
      io.enq.ready <= UInt<1>("h1") @[Decoupled.scala 254:40]
    node _T_8 = sub(UInt<1>("h0"), UInt<1>("h0")) @[Decoupled.scala 257:32]
    node ptr_diff = tail(_T_8, 1) @[Decoupled.scala 257:32]
    node _T_9 = and(maybe_full, ptr_match) @[Decoupled.scala 259:32]
    node _T_10 = mux(_T_9, UInt<1>("h1"), UInt<1>("h0")) @[Decoupled.scala 259:20]
    node _T_11 = or(_T_10, ptr_diff) @[Decoupled.scala 259:62]
    io.count <= _T_11 @[Decoupled.scala 259:14]

  module Queue_13 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>, data : UInt<64>, last : UInt<1>, id : UInt<5>, user : UInt<1>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>, data : UInt<64>, last : UInt<1>, id : UInt<5>, user : UInt<1>}}, count : UInt<1>}
  
    cmem ram : { resp : UInt<2>, data : UInt<64>, last : UInt<1>, id : UInt<5>, user : UInt<1>} [1] @[Decoupled.scala 218:16]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 221:27]
    node ptr_match = eq(UInt<1>("h0"), UInt<1>("h0")) @[Decoupled.scala 223:33]
    node _T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 224:28]
    node empty = and(ptr_match, _T) @[Decoupled.scala 224:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 225:24]
    node _T_1 = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 40:37]
    wire do_enq : UInt<1>
    do_enq <= _T_1
    node _T_2 = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 40:37]
    wire do_deq : UInt<1>
    do_deq <= _T_2
    when do_enq : @[Decoupled.scala 229:17]
      infer mport _T_3 = ram[UInt<1>("h0")], clock @[Decoupled.scala 230:8]
      _T_3.user <= io.enq.bits.user @[Decoupled.scala 230:24]
      _T_3.id <= io.enq.bits.id @[Decoupled.scala 230:24]
      _T_3.last <= io.enq.bits.last @[Decoupled.scala 230:24]
      _T_3.data <= io.enq.bits.data @[Decoupled.scala 230:24]
      _T_3.resp <= io.enq.bits.resp @[Decoupled.scala 230:24]
    when do_deq : @[Decoupled.scala 233:17]
      skip
    node _T_4 = neq(do_enq, do_deq) @[Decoupled.scala 236:16]
    when _T_4 : @[Decoupled.scala 236:28]
      maybe_full <= do_enq @[Decoupled.scala 237:16]
    node _T_5 = eq(empty, UInt<1>("h0")) @[Decoupled.scala 240:19]
    io.deq.valid <= _T_5 @[Decoupled.scala 240:16]
    node _T_6 = eq(full, UInt<1>("h0")) @[Decoupled.scala 241:19]
    io.enq.ready <= _T_6 @[Decoupled.scala 241:16]
    infer mport _T_7 = ram[UInt<1>("h0")], clock @[Decoupled.scala 242:21]
    io.deq.bits.user <= _T_7.user @[Decoupled.scala 242:15]
    io.deq.bits.id <= _T_7.id @[Decoupled.scala 242:15]
    io.deq.bits.last <= _T_7.last @[Decoupled.scala 242:15]
    io.deq.bits.data <= _T_7.data @[Decoupled.scala 242:15]
    io.deq.bits.resp <= _T_7.resp @[Decoupled.scala 242:15]
    when io.deq.ready : @[Decoupled.scala 254:25]
      io.enq.ready <= UInt<1>("h1") @[Decoupled.scala 254:40]
    node _T_8 = sub(UInt<1>("h0"), UInt<1>("h0")) @[Decoupled.scala 257:32]
    node ptr_diff = tail(_T_8, 1) @[Decoupled.scala 257:32]
    node _T_9 = and(maybe_full, ptr_match) @[Decoupled.scala 259:32]
    node _T_10 = mux(_T_9, UInt<1>("h1"), UInt<1>("h0")) @[Decoupled.scala 259:20]
    node _T_11 = or(_T_10, ptr_diff) @[Decoupled.scala 259:62]
    io.count <= _T_11 @[Decoupled.scala 259:14]

  module Queue_14 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>, data : UInt<64>, last : UInt<1>, id : UInt<5>, user : UInt<1>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>, data : UInt<64>, last : UInt<1>, id : UInt<5>, user : UInt<1>}}, count : UInt<1>}
  
    cmem ram : { resp : UInt<2>, data : UInt<64>, last : UInt<1>, id : UInt<5>, user : UInt<1>} [1] @[Decoupled.scala 218:16]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 221:27]
    node ptr_match = eq(UInt<1>("h0"), UInt<1>("h0")) @[Decoupled.scala 223:33]
    node _T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 224:28]
    node empty = and(ptr_match, _T) @[Decoupled.scala 224:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 225:24]
    node _T_1 = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 40:37]
    wire do_enq : UInt<1>
    do_enq <= _T_1
    node _T_2 = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 40:37]
    wire do_deq : UInt<1>
    do_deq <= _T_2
    when do_enq : @[Decoupled.scala 229:17]
      infer mport _T_3 = ram[UInt<1>("h0")], clock @[Decoupled.scala 230:8]
      _T_3.user <= io.enq.bits.user @[Decoupled.scala 230:24]
      _T_3.id <= io.enq.bits.id @[Decoupled.scala 230:24]
      _T_3.last <= io.enq.bits.last @[Decoupled.scala 230:24]
      _T_3.data <= io.enq.bits.data @[Decoupled.scala 230:24]
      _T_3.resp <= io.enq.bits.resp @[Decoupled.scala 230:24]
    when do_deq : @[Decoupled.scala 233:17]
      skip
    node _T_4 = neq(do_enq, do_deq) @[Decoupled.scala 236:16]
    when _T_4 : @[Decoupled.scala 236:28]
      maybe_full <= do_enq @[Decoupled.scala 237:16]
    node _T_5 = eq(empty, UInt<1>("h0")) @[Decoupled.scala 240:19]
    io.deq.valid <= _T_5 @[Decoupled.scala 240:16]
    node _T_6 = eq(full, UInt<1>("h0")) @[Decoupled.scala 241:19]
    io.enq.ready <= _T_6 @[Decoupled.scala 241:16]
    infer mport _T_7 = ram[UInt<1>("h0")], clock @[Decoupled.scala 242:21]
    io.deq.bits.user <= _T_7.user @[Decoupled.scala 242:15]
    io.deq.bits.id <= _T_7.id @[Decoupled.scala 242:15]
    io.deq.bits.last <= _T_7.last @[Decoupled.scala 242:15]
    io.deq.bits.data <= _T_7.data @[Decoupled.scala 242:15]
    io.deq.bits.resp <= _T_7.resp @[Decoupled.scala 242:15]
    when io.deq.ready : @[Decoupled.scala 254:25]
      io.enq.ready <= UInt<1>("h1") @[Decoupled.scala 254:40]
    node _T_8 = sub(UInt<1>("h0"), UInt<1>("h0")) @[Decoupled.scala 257:32]
    node ptr_diff = tail(_T_8, 1) @[Decoupled.scala 257:32]
    node _T_9 = and(maybe_full, ptr_match) @[Decoupled.scala 259:32]
    node _T_10 = mux(_T_9, UInt<1>("h1"), UInt<1>("h0")) @[Decoupled.scala 259:20]
    node _T_11 = or(_T_10, ptr_diff) @[Decoupled.scala 259:62]
    io.count <= _T_11 @[Decoupled.scala 259:14]

  module Queue_15 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>, data : UInt<64>, last : UInt<1>, id : UInt<5>, user : UInt<1>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>, data : UInt<64>, last : UInt<1>, id : UInt<5>, user : UInt<1>}}, count : UInt<1>}
  
    cmem ram : { resp : UInt<2>, data : UInt<64>, last : UInt<1>, id : UInt<5>, user : UInt<1>} [1] @[Decoupled.scala 218:16]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 221:27]
    node ptr_match = eq(UInt<1>("h0"), UInt<1>("h0")) @[Decoupled.scala 223:33]
    node _T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 224:28]
    node empty = and(ptr_match, _T) @[Decoupled.scala 224:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 225:24]
    node _T_1 = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 40:37]
    wire do_enq : UInt<1>
    do_enq <= _T_1
    node _T_2 = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 40:37]
    wire do_deq : UInt<1>
    do_deq <= _T_2
    when do_enq : @[Decoupled.scala 229:17]
      infer mport _T_3 = ram[UInt<1>("h0")], clock @[Decoupled.scala 230:8]
      _T_3.user <= io.enq.bits.user @[Decoupled.scala 230:24]
      _T_3.id <= io.enq.bits.id @[Decoupled.scala 230:24]
      _T_3.last <= io.enq.bits.last @[Decoupled.scala 230:24]
      _T_3.data <= io.enq.bits.data @[Decoupled.scala 230:24]
      _T_3.resp <= io.enq.bits.resp @[Decoupled.scala 230:24]
    when do_deq : @[Decoupled.scala 233:17]
      skip
    node _T_4 = neq(do_enq, do_deq) @[Decoupled.scala 236:16]
    when _T_4 : @[Decoupled.scala 236:28]
      maybe_full <= do_enq @[Decoupled.scala 237:16]
    node _T_5 = eq(empty, UInt<1>("h0")) @[Decoupled.scala 240:19]
    io.deq.valid <= _T_5 @[Decoupled.scala 240:16]
    node _T_6 = eq(full, UInt<1>("h0")) @[Decoupled.scala 241:19]
    io.enq.ready <= _T_6 @[Decoupled.scala 241:16]
    infer mport _T_7 = ram[UInt<1>("h0")], clock @[Decoupled.scala 242:21]
    io.deq.bits.user <= _T_7.user @[Decoupled.scala 242:15]
    io.deq.bits.id <= _T_7.id @[Decoupled.scala 242:15]
    io.deq.bits.last <= _T_7.last @[Decoupled.scala 242:15]
    io.deq.bits.data <= _T_7.data @[Decoupled.scala 242:15]
    io.deq.bits.resp <= _T_7.resp @[Decoupled.scala 242:15]
    when io.deq.ready : @[Decoupled.scala 254:25]
      io.enq.ready <= UInt<1>("h1") @[Decoupled.scala 254:40]
    node _T_8 = sub(UInt<1>("h0"), UInt<1>("h0")) @[Decoupled.scala 257:32]
    node ptr_diff = tail(_T_8, 1) @[Decoupled.scala 257:32]
    node _T_9 = and(maybe_full, ptr_match) @[Decoupled.scala 259:32]
    node _T_10 = mux(_T_9, UInt<1>("h1"), UInt<1>("h0")) @[Decoupled.scala 259:20]
    node _T_11 = or(_T_10, ptr_diff) @[Decoupled.scala 259:62]
    io.count <= _T_11 @[Decoupled.scala 259:14]

  module LatencyPipe_1 :
    input clock : Clock
    input reset : Reset
    output io : { gen : { resp : UInt<2>, data : UInt<64>, last : UInt<1>, id : UInt<5>, user : UInt<1>}, flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>, data : UInt<64>, last : UInt<1>, id : UInt<5>, user : UInt<1>}}, out : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>, data : UInt<64>, last : UInt<1>, id : UInt<5>, user : UInt<1>}}}
  
    io.out.bits.user is invalid @[TileTester.scala 155:6]
    io.out.bits.id is invalid @[TileTester.scala 155:6]
    io.out.bits.last is invalid @[TileTester.scala 155:6]
    io.out.bits.data is invalid @[TileTester.scala 155:6]
    io.out.bits.resp is invalid @[TileTester.scala 155:6]
    io.out.valid is invalid @[TileTester.scala 155:6]
    io.out.ready is invalid @[TileTester.scala 155:6]
    io.in.bits.user is invalid @[TileTester.scala 155:6]
    io.in.bits.id is invalid @[TileTester.scala 155:6]
    io.in.bits.last is invalid @[TileTester.scala 155:6]
    io.in.bits.data is invalid @[TileTester.scala 155:6]
    io.in.bits.resp is invalid @[TileTester.scala 155:6]
    io.in.valid is invalid @[TileTester.scala 155:6]
    io.in.ready is invalid @[TileTester.scala 155:6]
    io.gen.user is invalid @[TileTester.scala 155:6]
    io.gen.id is invalid @[TileTester.scala 155:6]
    io.gen.last is invalid @[TileTester.scala 155:6]
    io.gen.data is invalid @[TileTester.scala 155:6]
    io.gen.resp is invalid @[TileTester.scala 155:6]
    inst Queue of Queue_8 @[Decoupled.scala 296:21]
    Queue.clock <= clock
    Queue.reset <= reset
    Queue.io.enq.valid <= io.in.valid @[Decoupled.scala 297:22]
    Queue.io.enq.bits.user <= io.in.bits.user @[Decoupled.scala 298:21]
    Queue.io.enq.bits.id <= io.in.bits.id @[Decoupled.scala 298:21]
    Queue.io.enq.bits.last <= io.in.bits.last @[Decoupled.scala 298:21]
    Queue.io.enq.bits.data <= io.in.bits.data @[Decoupled.scala 298:21]
    Queue.io.enq.bits.resp <= io.in.bits.resp @[Decoupled.scala 298:21]
    io.in.ready <= Queue.io.enq.ready @[Decoupled.scala 299:17]
    inst Queue_1 of Queue_9 @[Decoupled.scala 296:21]
    Queue_1.clock <= clock
    Queue_1.reset <= reset
    Queue_1.io.enq.valid <= Queue.io.deq.valid @[Decoupled.scala 297:22]
    Queue_1.io.enq.bits.user <= Queue.io.deq.bits.user @[Decoupled.scala 298:21]
    Queue_1.io.enq.bits.id <= Queue.io.deq.bits.id @[Decoupled.scala 298:21]
    Queue_1.io.enq.bits.last <= Queue.io.deq.bits.last @[Decoupled.scala 298:21]
    Queue_1.io.enq.bits.data <= Queue.io.deq.bits.data @[Decoupled.scala 298:21]
    Queue_1.io.enq.bits.resp <= Queue.io.deq.bits.resp @[Decoupled.scala 298:21]
    Queue.io.deq.ready <= Queue_1.io.enq.ready @[Decoupled.scala 299:17]
    inst Queue_2 of Queue_10 @[Decoupled.scala 296:21]
    Queue_2.clock <= clock
    Queue_2.reset <= reset
    Queue_2.io.enq.valid <= Queue_1.io.deq.valid @[Decoupled.scala 297:22]
    Queue_2.io.enq.bits.user <= Queue_1.io.deq.bits.user @[Decoupled.scala 298:21]
    Queue_2.io.enq.bits.id <= Queue_1.io.deq.bits.id @[Decoupled.scala 298:21]
    Queue_2.io.enq.bits.last <= Queue_1.io.deq.bits.last @[Decoupled.scala 298:21]
    Queue_2.io.enq.bits.data <= Queue_1.io.deq.bits.data @[Decoupled.scala 298:21]
    Queue_2.io.enq.bits.resp <= Queue_1.io.deq.bits.resp @[Decoupled.scala 298:21]
    Queue_1.io.deq.ready <= Queue_2.io.enq.ready @[Decoupled.scala 299:17]
    inst Queue_3 of Queue_11 @[Decoupled.scala 296:21]
    Queue_3.clock <= clock
    Queue_3.reset <= reset
    Queue_3.io.enq.valid <= Queue_2.io.deq.valid @[Decoupled.scala 297:22]
    Queue_3.io.enq.bits.user <= Queue_2.io.deq.bits.user @[Decoupled.scala 298:21]
    Queue_3.io.enq.bits.id <= Queue_2.io.deq.bits.id @[Decoupled.scala 298:21]
    Queue_3.io.enq.bits.last <= Queue_2.io.deq.bits.last @[Decoupled.scala 298:21]
    Queue_3.io.enq.bits.data <= Queue_2.io.deq.bits.data @[Decoupled.scala 298:21]
    Queue_3.io.enq.bits.resp <= Queue_2.io.deq.bits.resp @[Decoupled.scala 298:21]
    Queue_2.io.deq.ready <= Queue_3.io.enq.ready @[Decoupled.scala 299:17]
    inst Queue_4 of Queue_12 @[Decoupled.scala 296:21]
    Queue_4.clock <= clock
    Queue_4.reset <= reset
    Queue_4.io.enq.valid <= Queue_3.io.deq.valid @[Decoupled.scala 297:22]
    Queue_4.io.enq.bits.user <= Queue_3.io.deq.bits.user @[Decoupled.scala 298:21]
    Queue_4.io.enq.bits.id <= Queue_3.io.deq.bits.id @[Decoupled.scala 298:21]
    Queue_4.io.enq.bits.last <= Queue_3.io.deq.bits.last @[Decoupled.scala 298:21]
    Queue_4.io.enq.bits.data <= Queue_3.io.deq.bits.data @[Decoupled.scala 298:21]
    Queue_4.io.enq.bits.resp <= Queue_3.io.deq.bits.resp @[Decoupled.scala 298:21]
    Queue_3.io.deq.ready <= Queue_4.io.enq.ready @[Decoupled.scala 299:17]
    inst Queue_5 of Queue_13 @[Decoupled.scala 296:21]
    Queue_5.clock <= clock
    Queue_5.reset <= reset
    Queue_5.io.enq.valid <= Queue_4.io.deq.valid @[Decoupled.scala 297:22]
    Queue_5.io.enq.bits.user <= Queue_4.io.deq.bits.user @[Decoupled.scala 298:21]
    Queue_5.io.enq.bits.id <= Queue_4.io.deq.bits.id @[Decoupled.scala 298:21]
    Queue_5.io.enq.bits.last <= Queue_4.io.deq.bits.last @[Decoupled.scala 298:21]
    Queue_5.io.enq.bits.data <= Queue_4.io.deq.bits.data @[Decoupled.scala 298:21]
    Queue_5.io.enq.bits.resp <= Queue_4.io.deq.bits.resp @[Decoupled.scala 298:21]
    Queue_4.io.deq.ready <= Queue_5.io.enq.ready @[Decoupled.scala 299:17]
    inst Queue_6 of Queue_14 @[Decoupled.scala 296:21]
    Queue_6.clock <= clock
    Queue_6.reset <= reset
    Queue_6.io.enq.valid <= Queue_5.io.deq.valid @[Decoupled.scala 297:22]
    Queue_6.io.enq.bits.user <= Queue_5.io.deq.bits.user @[Decoupled.scala 298:21]
    Queue_6.io.enq.bits.id <= Queue_5.io.deq.bits.id @[Decoupled.scala 298:21]
    Queue_6.io.enq.bits.last <= Queue_5.io.deq.bits.last @[Decoupled.scala 298:21]
    Queue_6.io.enq.bits.data <= Queue_5.io.deq.bits.data @[Decoupled.scala 298:21]
    Queue_6.io.enq.bits.resp <= Queue_5.io.deq.bits.resp @[Decoupled.scala 298:21]
    Queue_5.io.deq.ready <= Queue_6.io.enq.ready @[Decoupled.scala 299:17]
    inst Queue_7 of Queue_15 @[Decoupled.scala 296:21]
    Queue_7.clock <= clock
    Queue_7.reset <= reset
    Queue_7.io.enq.valid <= Queue_6.io.deq.valid @[Decoupled.scala 297:22]
    Queue_7.io.enq.bits.user <= Queue_6.io.deq.bits.user @[Decoupled.scala 298:21]
    Queue_7.io.enq.bits.id <= Queue_6.io.deq.bits.id @[Decoupled.scala 298:21]
    Queue_7.io.enq.bits.last <= Queue_6.io.deq.bits.last @[Decoupled.scala 298:21]
    Queue_7.io.enq.bits.data <= Queue_6.io.deq.bits.data @[Decoupled.scala 298:21]
    Queue_7.io.enq.bits.resp <= Queue_6.io.deq.bits.resp @[Decoupled.scala 298:21]
    Queue_6.io.deq.ready <= Queue_7.io.enq.ready @[Decoupled.scala 299:17]
    io.out.bits <- Queue_7.io.deq.bits @[TileTester.scala 156:10]
    io.out.valid <= Queue_7.io.deq.valid @[TileTester.scala 156:10]
    Queue_7.io.deq.ready <= io.out.ready @[TileTester.scala 156:10]

  module TileTester :
    input clock : Clock
    input reset : UInt<1>
    output io : { }
  
    inst dut of Tile @[TileTester.scala 32:19]
    dut.clock <= clock
    dut.reset <= reset
    dut.io.host.fromhost.bits <= UInt<1>("h0") @[TileTester.scala 41:29]
    dut.io.host.fromhost.valid <= UInt<1>("h0") @[TileTester.scala 42:30]
    node _T = cat(UInt<64>("h100f30002"), UInt<64>("h0")) @[Cat.scala 30:58]
    node _T_1 = cat(_T, UInt<64>("h10101464c457f")) @[Cat.scala 30:58]
    node _T_2 = cat(UInt<64>("h4c8"), UInt<64>("h3400000100")) @[Cat.scala 30:58]
    node _T_3 = cat(UInt<64>("h100020005"), UInt<64>("h28000100200034")) @[Cat.scala 30:58]
    node _T_4 = cat(_T_3, _T_2) @[Cat.scala 30:58]
    node _T_5 = cat(_T_4, _T_1) @[Cat.scala 30:58]
    node _T_6 = cat(UInt<64>("h2ac00000000"), UInt<64>("h0")) @[Cat.scala 30:58]
    node _T_7 = cat(UInt<64>("h2000"), UInt<64>("h5000002ac")) @[Cat.scala 30:58]
    node _T_8 = cat(_T_7, _T_6) @[Cat.scala 30:58]
    node _T_9 = cat(UInt<64>("h0"), UInt<64>("h0")) @[Cat.scala 30:58]
    node _T_10 = cat(UInt<64>("h0"), UInt<64>("h0")) @[Cat.scala 30:58]
    node _T_11 = cat(_T_10, _T_9) @[Cat.scala 30:58]
    node _T_12 = cat(_T_11, _T_8) @[Cat.scala 30:58]
    node _T_13 = cat(_T_12, _T_5) @[Cat.scala 30:58]
    node _T_14 = cat(UInt<64>("h0"), UInt<64>("h0")) @[Cat.scala 30:58]
    node _T_15 = cat(_T_14, UInt<64>("h0")) @[Cat.scala 30:58]
    node _T_16 = cat(UInt<64>("h0"), UInt<64>("h0")) @[Cat.scala 30:58]
    node _T_17 = cat(UInt<64>("h0"), UInt<64>("h0")) @[Cat.scala 30:58]
    node _T_18 = cat(_T_17, _T_16) @[Cat.scala 30:58]
    node _T_19 = cat(_T_18, _T_15) @[Cat.scala 30:58]
    node _T_20 = cat(UInt<64>("h0"), UInt<64>("h0")) @[Cat.scala 30:58]
    node _T_21 = cat(UInt<64>("h0"), UInt<64>("h0")) @[Cat.scala 30:58]
    node _T_22 = cat(_T_21, _T_20) @[Cat.scala 30:58]
    node _T_23 = cat(UInt<64>("h0"), UInt<64>("h0")) @[Cat.scala 30:58]
    node _T_24 = cat(UInt<64>("h0"), UInt<64>("h0")) @[Cat.scala 30:58]
    node _T_25 = cat(_T_24, _T_23) @[Cat.scala 30:58]
    node _T_26 = cat(_T_25, _T_22) @[Cat.scala 30:58]
    node _T_27 = cat(_T_26, _T_19) @[Cat.scala 30:58]
    node _T_28 = cat(_T_27, _T_13) @[Cat.scala 30:58]
    node _T_29 = cat(UInt<64>("h1a4f0f1300000f17"), UInt<64>("h0")) @[Cat.scala 30:58]
    node _T_30 = cat(_T_29, UInt<64>("h0")) @[Cat.scala 30:58]
    node _T_31 = cat(UInt<64>("hef0f0f1300000f17"), UInt<64>("h7ff0c6334102ff3")) @[Cat.scala 30:58]
    node _T_32 = cat(UInt<64>("h160f126316cf0f13"), UInt<64>("hf17020f1863")) @[Cat.scala 30:58]
    node _T_33 = cat(_T_32, _T_31) @[Cat.scala 30:58]
    node _T_34 = cat(_T_33, _T_30) @[Cat.scala 30:58]
    node _T_35 = cat(UInt<64>("h1300000013"), UInt<64>("h130580006f")) @[Cat.scala 30:58]
    node _T_36 = cat(UInt<64>("hfa0f5ee334202f73"), UInt<64>("h1300000013")) @[Cat.scala 30:58]
    node _T_37 = cat(_T_36, _T_35) @[Cat.scala 30:58]
    node _T_38 = cat(UInt<64>("h1300000013"), UInt<64>("h1330500073")) @[Cat.scala 30:58]
    node _T_39 = cat(UInt<64>("h1300000013"), UInt<64>("h1300000013")) @[Cat.scala 30:58]
    node _T_40 = cat(_T_39, _T_38) @[Cat.scala 30:58]
    node _T_41 = cat(_T_40, _T_37) @[Cat.scala 30:58]
    node _T_42 = cat(_T_41, _T_34) @[Cat.scala 30:58]
    node _T_43 = cat(UInt<64>("h1300000013"), UInt<64>("h1300000013")) @[Cat.scala 30:58]
    node _T_44 = cat(UInt<64>("h780e1073539e6e13"), UInt<64>("h1300000013")) @[Cat.scala 30:58]
    node _T_45 = cat(_T_44, _T_43) @[Cat.scala 30:58]
    node _T_46 = cat(UInt<64>("h1300000013"), UInt<64>("h13ffdff06f")) @[Cat.scala 30:58]
    node _T_47 = cat(UInt<64>("h1300000013"), UInt<64>("h1300000013")) @[Cat.scala 30:58]
    node _T_48 = cat(_T_47, _T_46) @[Cat.scala 30:58]
    node _T_49 = cat(_T_48, _T_45) @[Cat.scala 30:58]
    node _T_50 = cat(UInt<64>("h1300000013"), UInt<64>("h1300000013")) @[Cat.scala 30:58]
    node _T_51 = cat(UInt<64>("he4f0f1300000f17"), UInt<64>("h1300000013")) @[Cat.scala 30:58]
    node _T_52 = cat(_T_51, _T_50) @[Cat.scala 30:58]
    node _T_53 = cat(UInt<64>("hb8f0f1300000f17"), UInt<64>("hfbff0ce334102ff3")) @[Cat.scala 30:58]
    node _T_54 = cat(UInt<64>("h1300000013"), UInt<64>("hfa5ff06f0a0f1863")) @[Cat.scala 30:58]
    node _T_55 = cat(_T_54, _T_53) @[Cat.scala 30:58]
    node _T_56 = cat(_T_55, _T_52) @[Cat.scala 30:58]
    node _T_57 = cat(_T_56, _T_49) @[Cat.scala 30:58]
    node _T_58 = cat(_T_57, _T_42) @[Cat.scala 30:58]
    node _T_59 = cat(_T_58, _T_28) @[Cat.scala 30:58]
    node _T_60 = cat(UInt<64>("h1300000013"), UInt<64>("h1300000013")) @[Cat.scala 30:58]
    node _T_61 = cat(_T_60, UInt<64>("h1300000013")) @[Cat.scala 30:58]
    node _T_62 = cat(UInt<64>("h55863f0002573"), UInt<64>("h51063f1002573")) @[Cat.scala 30:58]
    node _T_63 = cat(UInt<64>("he1308c0006f"), UInt<64>("h100e130ff0000f")) @[Cat.scala 30:58]
    node _T_64 = cat(_T_63, _T_62) @[Cat.scala 30:58]
    node _T_65 = cat(_T_64, _T_61) @[Cat.scala 30:58]
    node _T_66 = cat(UInt<64>("h1012907300028463"), UInt<64>("hde02829300000297")) @[Cat.scala 30:58]
    node _T_67 = cat(UInt<64>("h3005207303000513"), UInt<64>("h3002b0731f800293")) @[Cat.scala 30:58]
    node _T_68 = cat(_T_67, _T_66) @[Cat.scala 30:58]
    node _T_69 = cat(UInt<64>("hf100257334129073"), UInt<64>("h142829300000297")) @[Cat.scala 30:58]
    node _T_70 = cat(UInt<64>("hc0006f00000073"), UInt<64>("h200e1310000073")) @[Cat.scala 30:58]
    node _T_71 = cat(_T_70, _T_69) @[Cat.scala 30:58]
    node _T_72 = cat(_T_71, _T_68) @[Cat.scala 30:58]
    node _T_73 = cat(_T_72, _T_65) @[Cat.scala 30:58]
    node _T_74 = cat(UInt<64>("he00630ff0000f"), UInt<64>("h1c01c6301c0006f")) @[Cat.scala 30:58]
    node _T_75 = cat(UInt<64>("hff0000f02c0006f"), UInt<64>("h1e6e13001e1e13")) @[Cat.scala 30:58]
    node _T_76 = cat(_T_75, _T_74) @[Cat.scala 30:58]
    node _T_77 = cat(UInt<64>("h342022f300b00313"), UInt<64>("h200006f00100e13")) @[Cat.scala 30:58]
    node _T_78 = cat(UInt<64>("h3412907300828293"), UInt<64>("h341022f3fc629ce3")) @[Cat.scala 30:58]
    node _T_79 = cat(_T_78, _T_77) @[Cat.scala 30:58]
    node _T_80 = cat(_T_79, _T_76) @[Cat.scala 30:58]
    node _T_81 = cat(UInt<64>("hffdff06f"), UInt<64>("h7310000073")) @[Cat.scala 30:58]
    node _T_82 = cat(UInt<64>("h0"), UInt<64>("h0")) @[Cat.scala 30:58]
    node _T_83 = cat(_T_82, _T_81) @[Cat.scala 30:58]
    node _T_84 = cat(UInt<64>("h0"), UInt<64>("h0")) @[Cat.scala 30:58]
    node _T_85 = cat(UInt<64>("h0"), UInt<64>("h0")) @[Cat.scala 30:58]
    node _T_86 = cat(_T_85, _T_84) @[Cat.scala 30:58]
    node _T_87 = cat(_T_86, _T_83) @[Cat.scala 30:58]
    node _T_88 = cat(_T_87, _T_80) @[Cat.scala 30:58]
    node _T_89 = cat(_T_88, _T_73) @[Cat.scala 30:58]
    node _T_90 = cat(UInt<64>("h0"), UInt<64>("h0")) @[Cat.scala 30:58]
    node _T_91 = cat(_T_90, UInt<64>("h0")) @[Cat.scala 30:58]
    node _T_92 = cat(UInt<64>("h0"), UInt<64>("h0")) @[Cat.scala 30:58]
    node _T_93 = cat(UInt<64>("h0"), UInt<64>("h0")) @[Cat.scala 30:58]
    node _T_94 = cat(_T_93, _T_92) @[Cat.scala 30:58]
    node _T_95 = cat(_T_94, _T_91) @[Cat.scala 30:58]
    node _T_96 = cat(UInt<64>("h0"), UInt<64>("h0")) @[Cat.scala 30:58]
    node _T_97 = cat(UInt<64>("h0"), UInt<64>("h0")) @[Cat.scala 30:58]
    node _T_98 = cat(_T_97, _T_96) @[Cat.scala 30:58]
    node _T_99 = cat(UInt<64>("h0"), UInt<64>("h0")) @[Cat.scala 30:58]
    node _T_100 = cat(UInt<64>("h0"), UInt<64>("h0")) @[Cat.scala 30:58]
    node _T_101 = cat(_T_100, _T_99) @[Cat.scala 30:58]
    node _T_102 = cat(_T_101, _T_98) @[Cat.scala 30:58]
    node _T_103 = cat(_T_102, _T_95) @[Cat.scala 30:58]
    node _T_104 = cat(UInt<64>("h0"), UInt<64>("h0")) @[Cat.scala 30:58]
    node _T_105 = cat(UInt<64>("h0"), UInt<64>("h0")) @[Cat.scala 30:58]
    node _T_106 = cat(_T_105, _T_104) @[Cat.scala 30:58]
    node _T_107 = cat(UInt<64>("h0"), UInt<64>("h0")) @[Cat.scala 30:58]
    node _T_108 = cat(UInt<64>("h0"), UInt<64>("h0")) @[Cat.scala 30:58]
    node _T_109 = cat(_T_108, _T_107) @[Cat.scala 30:58]
    node _T_110 = cat(_T_109, _T_106) @[Cat.scala 30:58]
    node _T_111 = cat(UInt<64>("h0"), UInt<64>("h0")) @[Cat.scala 30:58]
    node _T_112 = cat(UInt<64>("h0"), UInt<64>("h0")) @[Cat.scala 30:58]
    node _T_113 = cat(_T_112, _T_111) @[Cat.scala 30:58]
    node _T_114 = cat(UInt<64>("h0"), UInt<64>("h0")) @[Cat.scala 30:58]
    node _T_115 = cat(UInt<64>("h0"), UInt<64>("h0")) @[Cat.scala 30:58]
    node _T_116 = cat(_T_115, _T_114) @[Cat.scala 30:58]
    node _T_117 = cat(_T_116, _T_113) @[Cat.scala 30:58]
    node _T_118 = cat(_T_117, _T_110) @[Cat.scala 30:58]
    node _T_119 = cat(_T_118, _T_103) @[Cat.scala 30:58]
    node _T_120 = cat(_T_119, _T_89) @[Cat.scala 30:58]
    node _T_121 = cat(_T_120, _T_59) @[Cat.scala 30:58]
    node _T_122 = cat(UInt<64>("h0"), UInt<64>("h0")) @[Cat.scala 30:58]
    node _T_123 = cat(_T_122, UInt<64>("h0")) @[Cat.scala 30:58]
    node _T_124 = cat(UInt<64>("h0"), UInt<64>("h0")) @[Cat.scala 30:58]
    node _T_125 = cat(UInt<64>("h0"), UInt<64>("h0")) @[Cat.scala 30:58]
    node _T_126 = cat(_T_125, _T_124) @[Cat.scala 30:58]
    node _T_127 = cat(_T_126, _T_123) @[Cat.scala 30:58]
    node _T_128 = cat(UInt<64>("h0"), UInt<64>("h0")) @[Cat.scala 30:58]
    node _T_129 = cat(UInt<64>("h0"), UInt<64>("h0")) @[Cat.scala 30:58]
    node _T_130 = cat(_T_129, _T_128) @[Cat.scala 30:58]
    node _T_131 = cat(UInt<64>("h0"), UInt<64>("h0")) @[Cat.scala 30:58]
    node _T_132 = cat(UInt<64>("h0"), UInt<64>("h0")) @[Cat.scala 30:58]
    node _T_133 = cat(_T_132, _T_131) @[Cat.scala 30:58]
    node _T_134 = cat(_T_133, _T_130) @[Cat.scala 30:58]
    node _T_135 = cat(_T_134, _T_127) @[Cat.scala 30:58]
    node _T_136 = cat(UInt<64>("h0"), UInt<64>("h0")) @[Cat.scala 30:58]
    node _T_137 = cat(_T_136, UInt<64>("h0")) @[Cat.scala 30:58]
    node _T_138 = cat(UInt<64>("h0"), UInt<64>("h0")) @[Cat.scala 30:58]
    node _T_139 = cat(UInt<64>("h0"), UInt<64>("h0")) @[Cat.scala 30:58]
    node _T_140 = cat(_T_139, _T_138) @[Cat.scala 30:58]
    node _T_141 = cat(_T_140, _T_137) @[Cat.scala 30:58]
    node _T_142 = cat(UInt<64>("h0"), UInt<64>("h0")) @[Cat.scala 30:58]
    node _T_143 = cat(UInt<64>("h0"), UInt<64>("h0")) @[Cat.scala 30:58]
    node _T_144 = cat(_T_143, _T_142) @[Cat.scala 30:58]
    node _T_145 = cat(UInt<64>("h0"), UInt<64>("h0")) @[Cat.scala 30:58]
    node _T_146 = cat(UInt<64>("h0"), UInt<64>("h0")) @[Cat.scala 30:58]
    node _T_147 = cat(_T_146, _T_145) @[Cat.scala 30:58]
    node _T_148 = cat(_T_147, _T_144) @[Cat.scala 30:58]
    node _T_149 = cat(_T_148, _T_141) @[Cat.scala 30:58]
    node _T_150 = cat(_T_149, _T_135) @[Cat.scala 30:58]
    node _T_151 = cat(UInt<64>("h0"), UInt<64>("h0")) @[Cat.scala 30:58]
    node _T_152 = cat(_T_151, UInt<64>("h0")) @[Cat.scala 30:58]
    node _T_153 = cat(UInt<64>("h0"), UInt<64>("h0")) @[Cat.scala 30:58]
    node _T_154 = cat(UInt<64>("h0"), UInt<64>("h0")) @[Cat.scala 30:58]
    node _T_155 = cat(_T_154, _T_153) @[Cat.scala 30:58]
    node _T_156 = cat(_T_155, _T_152) @[Cat.scala 30:58]
    node _T_157 = cat(UInt<64>("h0"), UInt<64>("h0")) @[Cat.scala 30:58]
    node _T_158 = cat(UInt<64>("h0"), UInt<64>("h0")) @[Cat.scala 30:58]
    node _T_159 = cat(_T_158, _T_157) @[Cat.scala 30:58]
    node _T_160 = cat(UInt<64>("h0"), UInt<64>("h0")) @[Cat.scala 30:58]
    node _T_161 = cat(UInt<64>("h0"), UInt<64>("h0")) @[Cat.scala 30:58]
    node _T_162 = cat(_T_161, _T_160) @[Cat.scala 30:58]
    node _T_163 = cat(_T_162, _T_159) @[Cat.scala 30:58]
    node _T_164 = cat(_T_163, _T_156) @[Cat.scala 30:58]
    node _T_165 = cat(UInt<64>("h0"), UInt<64>("h0")) @[Cat.scala 30:58]
    node _T_166 = cat(UInt<64>("h0"), UInt<64>("h0")) @[Cat.scala 30:58]
    node _T_167 = cat(_T_166, _T_165) @[Cat.scala 30:58]
    node _T_168 = cat(UInt<64>("h0"), UInt<64>("h0")) @[Cat.scala 30:58]
    node _T_169 = cat(UInt<64>("h0"), UInt<64>("h0")) @[Cat.scala 30:58]
    node _T_170 = cat(_T_169, _T_168) @[Cat.scala 30:58]
    node _T_171 = cat(_T_170, _T_167) @[Cat.scala 30:58]
    node _T_172 = cat(UInt<64>("h0"), UInt<64>("h0")) @[Cat.scala 30:58]
    node _T_173 = cat(UInt<64>("h0"), UInt<64>("h0")) @[Cat.scala 30:58]
    node _T_174 = cat(_T_173, _T_172) @[Cat.scala 30:58]
    node _T_175 = cat(UInt<64>("h0"), UInt<64>("h0")) @[Cat.scala 30:58]
    node _T_176 = cat(UInt<64>("h0"), UInt<64>("h0")) @[Cat.scala 30:58]
    node _T_177 = cat(_T_176, _T_175) @[Cat.scala 30:58]
    node _T_178 = cat(_T_177, _T_174) @[Cat.scala 30:58]
    node _T_179 = cat(_T_178, _T_171) @[Cat.scala 30:58]
    node _T_180 = cat(_T_179, _T_164) @[Cat.scala 30:58]
    node _T_181 = cat(_T_180, _T_150) @[Cat.scala 30:58]
    node _T_182 = cat(UInt<64>("h0"), UInt<64>("h0")) @[Cat.scala 30:58]
    node _T_183 = cat(_T_182, UInt<64>("h0")) @[Cat.scala 30:58]
    node _T_184 = cat(UInt<64>("h0"), UInt<64>("h0")) @[Cat.scala 30:58]
    node _T_185 = cat(UInt<64>("h0"), UInt<64>("h0")) @[Cat.scala 30:58]
    node _T_186 = cat(_T_185, _T_184) @[Cat.scala 30:58]
    node _T_187 = cat(_T_186, _T_183) @[Cat.scala 30:58]
    node _T_188 = cat(UInt<64>("h0"), UInt<64>("h0")) @[Cat.scala 30:58]
    node _T_189 = cat(UInt<64>("h0"), UInt<64>("h0")) @[Cat.scala 30:58]
    node _T_190 = cat(_T_189, _T_188) @[Cat.scala 30:58]
    node _T_191 = cat(UInt<64>("h0"), UInt<64>("h0")) @[Cat.scala 30:58]
    node _T_192 = cat(UInt<64>("h0"), UInt<64>("h0")) @[Cat.scala 30:58]
    node _T_193 = cat(_T_192, _T_191) @[Cat.scala 30:58]
    node _T_194 = cat(_T_193, _T_190) @[Cat.scala 30:58]
    node _T_195 = cat(_T_194, _T_187) @[Cat.scala 30:58]
    node _T_196 = cat(UInt<64>("h0"), UInt<64>("h0")) @[Cat.scala 30:58]
    node _T_197 = cat(UInt<64>("h0"), UInt<64>("h0")) @[Cat.scala 30:58]
    node _T_198 = cat(_T_197, _T_196) @[Cat.scala 30:58]
    node _T_199 = cat(UInt<64>("h0"), UInt<64>("h0")) @[Cat.scala 30:58]
    node _T_200 = cat(UInt<64>("h0"), UInt<64>("h0")) @[Cat.scala 30:58]
    node _T_201 = cat(_T_200, _T_199) @[Cat.scala 30:58]
    node _T_202 = cat(_T_201, _T_198) @[Cat.scala 30:58]
    node _T_203 = cat(UInt<64>("h0"), UInt<64>("h0")) @[Cat.scala 30:58]
    node _T_204 = cat(UInt<64>("h0"), UInt<64>("h0")) @[Cat.scala 30:58]
    node _T_205 = cat(_T_204, _T_203) @[Cat.scala 30:58]
    node _T_206 = cat(UInt<64>("h0"), UInt<64>("h0")) @[Cat.scala 30:58]
    node _T_207 = cat(UInt<64>("h0"), UInt<64>("h0")) @[Cat.scala 30:58]
    node _T_208 = cat(_T_207, _T_206) @[Cat.scala 30:58]
    node _T_209 = cat(_T_208, _T_205) @[Cat.scala 30:58]
    node _T_210 = cat(_T_209, _T_202) @[Cat.scala 30:58]
    node _T_211 = cat(_T_210, _T_195) @[Cat.scala 30:58]
    node _T_212 = cat(UInt<64>("h0"), UInt<64>("h0")) @[Cat.scala 30:58]
    node _T_213 = cat(_T_212, UInt<64>("h0")) @[Cat.scala 30:58]
    node _T_214 = cat(UInt<64>("h0"), UInt<64>("h0")) @[Cat.scala 30:58]
    node _T_215 = cat(UInt<64>("h0"), UInt<64>("h0")) @[Cat.scala 30:58]
    node _T_216 = cat(_T_215, _T_214) @[Cat.scala 30:58]
    node _T_217 = cat(_T_216, _T_213) @[Cat.scala 30:58]
    node _T_218 = cat(UInt<64>("h0"), UInt<64>("h0")) @[Cat.scala 30:58]
    node _T_219 = cat(UInt<64>("h0"), UInt<64>("h0")) @[Cat.scala 30:58]
    node _T_220 = cat(_T_219, _T_218) @[Cat.scala 30:58]
    node _T_221 = cat(UInt<64>("h0"), UInt<64>("h0")) @[Cat.scala 30:58]
    node _T_222 = cat(UInt<64>("h0"), UInt<64>("h0")) @[Cat.scala 30:58]
    node _T_223 = cat(_T_222, _T_221) @[Cat.scala 30:58]
    node _T_224 = cat(_T_223, _T_220) @[Cat.scala 30:58]
    node _T_225 = cat(_T_224, _T_217) @[Cat.scala 30:58]
    node _T_226 = cat(UInt<64>("h0"), UInt<64>("h0")) @[Cat.scala 30:58]
    node _T_227 = cat(UInt<64>("h0"), UInt<64>("h0")) @[Cat.scala 30:58]
    node _T_228 = cat(_T_227, _T_226) @[Cat.scala 30:58]
    node _T_229 = cat(UInt<64>("h0"), UInt<64>("h0")) @[Cat.scala 30:58]
    node _T_230 = cat(UInt<64>("h0"), UInt<64>("h0")) @[Cat.scala 30:58]
    node _T_231 = cat(_T_230, _T_229) @[Cat.scala 30:58]
    node _T_232 = cat(_T_231, _T_228) @[Cat.scala 30:58]
    node _T_233 = cat(UInt<64>("h0"), UInt<64>("h0")) @[Cat.scala 30:58]
    node _T_234 = cat(UInt<64>("h0"), UInt<64>("h0")) @[Cat.scala 30:58]
    node _T_235 = cat(_T_234, _T_233) @[Cat.scala 30:58]
    node _T_236 = cat(UInt<64>("h0"), UInt<64>("h0")) @[Cat.scala 30:58]
    node _T_237 = cat(UInt<64>("h0"), UInt<64>("h0")) @[Cat.scala 30:58]
    node _T_238 = cat(_T_237, _T_236) @[Cat.scala 30:58]
    node _T_239 = cat(_T_238, _T_235) @[Cat.scala 30:58]
    node _T_240 = cat(_T_239, _T_232) @[Cat.scala 30:58]
    node _T_241 = cat(_T_240, _T_225) @[Cat.scala 30:58]
    node _T_242 = cat(_T_241, _T_211) @[Cat.scala 30:58]
    node _T_243 = cat(_T_242, _T_181) @[Cat.scala 30:58]
    node _T_244 = cat(_T_243, _T_121) @[Cat.scala 30:58]
    wire _hex : UInt<15744>[1] @[TileTester.scala 44:21]
    _hex[0] <= _T_244 @[TileTester.scala 44:21]
    cmem _mem : UInt<64> [1048576] @[TileTester.scala 45:17]
    reg state : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[TileTester.scala 47:22]
    reg cycle : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[TileTester.scala 48:22]
    node _T_245 = eq(state, UInt<3>("h0")) @[TileTester.scala 49:36]
    reg cntr : UInt<8>, clock with :
      reset => (reset, UInt<8>("h0")) @[Counter.scala 29:33]
    wire done : UInt<1>
    done <= UInt<1>("h0")
    when _T_245 : @[Counter.scala 67:17]
      node _T_246 = eq(cntr, UInt<8>("hff")) @[Counter.scala 38:24]
      node _T_247 = add(cntr, UInt<1>("h1")) @[Counter.scala 39:22]
      node _T_248 = tail(_T_247, 1) @[Counter.scala 39:22]
      cntr <= _T_248 @[Counter.scala 39:13]
      done <= _T_246 @[Counter.scala 67:24]
    reg id : UInt<5>, clock with :
      reset => (UInt<1>("h0"), id) @[TileTester.scala 51:15]
    reg addr : UInt<32>, clock with :
      reset => (UInt<1>("h0"), addr) @[TileTester.scala 52:17]
    reg len : UInt<8>, clock with :
      reset => (UInt<1>("h0"), len) @[TileTester.scala 53:16]
    reg off : UInt<8>, clock with :
      reset => (UInt<1>("h0"), off) @[TileTester.scala 54:16]
    node _T_249 = bits(dut.io.nasti.w.bits.strb, 0, 0) @[TileTester.scala 56:35]
    node _T_250 = bits(addr, 19, 0) @[TileTester.scala 56:70]
    infer mport _T_251 = _mem[_T_250], clock @[TileTester.scala 56:70]
    node _T_252 = mux(_T_249, dut.io.nasti.w.bits.data, _T_251) @[TileTester.scala 56:10]
    node _T_253 = bits(_T_252, 7, 0) @[TileTester.scala 56:77]
    node _T_254 = dshl(_T_253, UInt<1>("h0")) @[TileTester.scala 56:95]
    node _T_255 = or(UInt<64>("h0"), _T_254) @[TileTester.scala 55:100]
    node _T_256 = bits(dut.io.nasti.w.bits.strb, 1, 1) @[TileTester.scala 56:35]
    node _T_257 = bits(addr, 19, 0) @[TileTester.scala 56:70]
    infer mport _T_258 = _mem[_T_257], clock @[TileTester.scala 56:70]
    node _T_259 = mux(_T_256, dut.io.nasti.w.bits.data, _T_258) @[TileTester.scala 56:10]
    node _T_260 = bits(_T_259, 15, 8) @[TileTester.scala 56:77]
    node _T_261 = dshl(_T_260, UInt<4>("h8")) @[TileTester.scala 56:95]
    node _T_262 = or(_T_255, _T_261) @[TileTester.scala 55:100]
    node _T_263 = bits(dut.io.nasti.w.bits.strb, 2, 2) @[TileTester.scala 56:35]
    node _T_264 = bits(addr, 19, 0) @[TileTester.scala 56:70]
    infer mport _T_265 = _mem[_T_264], clock @[TileTester.scala 56:70]
    node _T_266 = mux(_T_263, dut.io.nasti.w.bits.data, _T_265) @[TileTester.scala 56:10]
    node _T_267 = bits(_T_266, 23, 16) @[TileTester.scala 56:77]
    node _T_268 = dshl(_T_267, UInt<5>("h10")) @[TileTester.scala 56:95]
    node _T_269 = or(_T_262, _T_268) @[TileTester.scala 55:100]
    node _T_270 = bits(dut.io.nasti.w.bits.strb, 3, 3) @[TileTester.scala 56:35]
    node _T_271 = bits(addr, 19, 0) @[TileTester.scala 56:70]
    infer mport _T_272 = _mem[_T_271], clock @[TileTester.scala 56:70]
    node _T_273 = mux(_T_270, dut.io.nasti.w.bits.data, _T_272) @[TileTester.scala 56:10]
    node _T_274 = bits(_T_273, 31, 24) @[TileTester.scala 56:77]
    node _T_275 = dshl(_T_274, UInt<5>("h18")) @[TileTester.scala 56:95]
    node _T_276 = or(_T_269, _T_275) @[TileTester.scala 55:100]
    node _T_277 = bits(dut.io.nasti.w.bits.strb, 4, 4) @[TileTester.scala 56:35]
    node _T_278 = bits(addr, 19, 0) @[TileTester.scala 56:70]
    infer mport _T_279 = _mem[_T_278], clock @[TileTester.scala 56:70]
    node _T_280 = mux(_T_277, dut.io.nasti.w.bits.data, _T_279) @[TileTester.scala 56:10]
    node _T_281 = bits(_T_280, 39, 32) @[TileTester.scala 56:77]
    node _T_282 = dshl(_T_281, UInt<6>("h20")) @[TileTester.scala 56:95]
    node _T_283 = or(_T_276, _T_282) @[TileTester.scala 55:100]
    node _T_284 = bits(dut.io.nasti.w.bits.strb, 5, 5) @[TileTester.scala 56:35]
    node _T_285 = bits(addr, 19, 0) @[TileTester.scala 56:70]
    infer mport _T_286 = _mem[_T_285], clock @[TileTester.scala 56:70]
    node _T_287 = mux(_T_284, dut.io.nasti.w.bits.data, _T_286) @[TileTester.scala 56:10]
    node _T_288 = bits(_T_287, 47, 40) @[TileTester.scala 56:77]
    node _T_289 = dshl(_T_288, UInt<6>("h28")) @[TileTester.scala 56:95]
    node _T_290 = or(_T_283, _T_289) @[TileTester.scala 55:100]
    node _T_291 = bits(dut.io.nasti.w.bits.strb, 6, 6) @[TileTester.scala 56:35]
    node _T_292 = bits(addr, 19, 0) @[TileTester.scala 56:70]
    infer mport _T_293 = _mem[_T_292], clock @[TileTester.scala 56:70]
    node _T_294 = mux(_T_291, dut.io.nasti.w.bits.data, _T_293) @[TileTester.scala 56:10]
    node _T_295 = bits(_T_294, 55, 48) @[TileTester.scala 56:77]
    node _T_296 = dshl(_T_295, UInt<6>("h30")) @[TileTester.scala 56:95]
    node _T_297 = or(_T_290, _T_296) @[TileTester.scala 55:100]
    node _T_298 = bits(dut.io.nasti.w.bits.strb, 7, 7) @[TileTester.scala 56:35]
    node _T_299 = bits(addr, 19, 0) @[TileTester.scala 56:70]
    infer mport _T_300 = _mem[_T_299], clock @[TileTester.scala 56:70]
    node _T_301 = mux(_T_298, dut.io.nasti.w.bits.data, _T_300) @[TileTester.scala 56:10]
    node _T_302 = bits(_T_301, 63, 56) @[TileTester.scala 56:77]
    node _T_303 = dshl(_T_302, UInt<6>("h38")) @[TileTester.scala 56:95]
    node write = or(_T_297, _T_303) @[TileTester.scala 55:100]
    wire bpipe : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>, id : UInt<5>, user : UInt<1>}}
    bpipe.bits.user <= dut.io.nasti.b.bits.user
    bpipe.bits.id <= dut.io.nasti.b.bits.id
    bpipe.bits.resp <= dut.io.nasti.b.bits.resp
    bpipe.valid <= dut.io.nasti.b.valid
    bpipe.ready <= dut.io.nasti.b.ready
    wire rpipe : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>, data : UInt<64>, last : UInt<1>, id : UInt<5>, user : UInt<1>}}
    rpipe.bits.user <= dut.io.nasti.r.bits.user
    rpipe.bits.id <= dut.io.nasti.r.bits.id
    rpipe.bits.last <= dut.io.nasti.r.bits.last
    rpipe.bits.data <= dut.io.nasti.r.bits.data
    rpipe.bits.resp <= dut.io.nasti.r.bits.resp
    rpipe.valid <= dut.io.nasti.r.valid
    rpipe.ready <= dut.io.nasti.r.ready
    node _T_304 = bits(reset, 0, 0) @[TileTester.scala 61:22]
    node _T_305 = eq(state, UInt<3>("h0")) @[TileTester.scala 61:38]
    node _T_306 = or(_T_304, _T_305) @[TileTester.scala 61:29]
    dut.reset <= _T_306 @[TileTester.scala 61:13]
    node _T_307 = eq(state, UInt<3>("h1")) @[TileTester.scala 62:34]
    dut.io.nasti.aw.ready <= _T_307 @[TileTester.scala 62:25]
    node _T_308 = eq(state, UInt<3>("h1")) @[TileTester.scala 63:34]
    dut.io.nasti.ar.ready <= _T_308 @[TileTester.scala 63:25]
    node _T_309 = eq(state, UInt<3>("h2")) @[TileTester.scala 64:34]
    dut.io.nasti.w.ready <= _T_309 @[TileTester.scala 64:25]
    inst LatencyPipe of LatencyPipe @[TileTester.scala 161:22]
    LatencyPipe.clock <= clock
    LatencyPipe.reset <= reset
    LatencyPipe.io.in.bits <- bpipe.bits @[TileTester.scala 162:16]
    LatencyPipe.io.in.valid <= bpipe.valid @[TileTester.scala 162:16]
    bpipe.ready <= LatencyPipe.io.in.ready @[TileTester.scala 162:16]
    dut.io.nasti.b.bits <- LatencyPipe.io.out.bits @[TileTester.scala 65:18]
    dut.io.nasti.b.valid <= LatencyPipe.io.out.valid @[TileTester.scala 65:18]
    LatencyPipe.io.out.ready <= dut.io.nasti.b.ready @[TileTester.scala 65:18]
    inst LatencyPipe_1 of LatencyPipe_1 @[TileTester.scala 161:22]
    LatencyPipe_1.clock <= clock
    LatencyPipe_1.reset <= reset
    LatencyPipe_1.io.in.bits <- rpipe.bits @[TileTester.scala 162:16]
    LatencyPipe_1.io.in.valid <= rpipe.valid @[TileTester.scala 162:16]
    rpipe.ready <= LatencyPipe_1.io.in.ready @[TileTester.scala 162:16]
    dut.io.nasti.r.bits <- LatencyPipe_1.io.out.bits @[TileTester.scala 66:18]
    dut.io.nasti.r.valid <= LatencyPipe_1.io.out.valid @[TileTester.scala 66:18]
    LatencyPipe_1.io.out.ready <= dut.io.nasti.r.ready @[TileTester.scala 66:18]
    wire _T_310 : { resp : UInt<2>, id : UInt<5>, user : UInt<1>} @[nasti.scala 223:17]
    _T_310 is invalid @[nasti.scala 223:17]
    _T_310.id <= id @[nasti.scala 224:10]
    _T_310.resp <= UInt<1>("h0") @[nasti.scala 225:12]
    _T_310.user <= UInt<1>("h0") @[nasti.scala 226:12]
    bpipe.bits.user <= _T_310.user @[TileTester.scala 67:15]
    bpipe.bits.id <= _T_310.id @[TileTester.scala 67:15]
    bpipe.bits.resp <= _T_310.resp @[TileTester.scala 67:15]
    node _T_311 = eq(state, UInt<3>("h3")) @[TileTester.scala 68:24]
    bpipe.valid <= _T_311 @[TileTester.scala 68:15]
    node _T_312 = add(addr, off) @[TileTester.scala 69:53]
    node _T_313 = tail(_T_312, 1) @[TileTester.scala 69:53]
    node _T_314 = bits(_T_313, 19, 0) @[TileTester.scala 69:47]
    infer mport _T_315 = _mem[_T_314], clock @[TileTester.scala 69:47]
    node _T_316 = eq(off, len) @[TileTester.scala 69:65]
    wire _T_317 : { resp : UInt<2>, data : UInt<64>, last : UInt<1>, id : UInt<5>, user : UInt<1>} @[nasti.scala 211:17]
    _T_317 is invalid @[nasti.scala 211:17]
    _T_317.id <= id @[nasti.scala 212:10]
    _T_317.data <= _T_315 @[nasti.scala 213:12]
    _T_317.last <= _T_316 @[nasti.scala 214:12]
    _T_317.resp <= UInt<1>("h0") @[nasti.scala 215:12]
    _T_317.user <= UInt<1>("h0") @[nasti.scala 216:12]
    rpipe.bits.user <= _T_317.user @[TileTester.scala 69:15]
    rpipe.bits.id <= _T_317.id @[TileTester.scala 69:15]
    rpipe.bits.last <= _T_317.last @[TileTester.scala 69:15]
    rpipe.bits.data <= _T_317.data @[TileTester.scala 69:15]
    rpipe.bits.resp <= _T_317.resp @[TileTester.scala 69:15]
    node _T_318 = eq(state, UInt<3>("h4")) @[TileTester.scala 70:24]
    rpipe.valid <= _T_318 @[TileTester.scala 70:15]
    wire isDone : UInt<1>
    isDone <= UInt<1>("h0")
    wire setDone : UInt<1>
    setDone <= UInt<1>("h0")
    node _T_319 = neq(state, UInt<3>("h0")) @[TileTester.scala 75:14]
    when _T_319 : @[TileTester.scala 75:25]
      node _T_320 = add(cycle, UInt<1>("h1")) @[TileTester.scala 76:20]
      node _T_321 = tail(_T_320, 1) @[TileTester.scala 76:20]
      cycle <= _T_321 @[TileTester.scala 76:11]
      node _T_322 = lt(cycle, UInt<14>("h3a98")) @[TileTester.scala 77:18]
      node _T_323 = bits(reset, 0, 0) @[TileTester.scala 77:11]
      node _T_324 = or(_T_322, _T_323) @[TileTester.scala 77:11]
      node _T_325 = eq(_T_324, UInt<1>("h0")) @[TileTester.scala 77:11]
      when _T_325 : @[TileTester.scala 77:11]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at TileTester.scala:77 assert(cycle < maxcycles.U)\n") @[TileTester.scala 77:11]
        stop(clock, UInt<1>("h1"), 1) @[TileTester.scala 77:11]
      node _T_326 = neq(dut.io.host.tohost, UInt<1>("h0")) @[TileTester.scala 78:29]
      when _T_326 : @[TileTester.scala 78:38]
        isDone <= UInt<1>("h1") @[TileTester.scala 79:14]
    setDone <= isDone @[TileTester.scala 83:11]
    when setDone : @[TileTester.scala 84:17]
      node _T_327 = bits(reset, 0, 0) @[TileTester.scala 85:11]
      node _T_328 = eq(_T_327, UInt<1>("h0")) @[TileTester.scala 85:11]
      when _T_328 : @[TileTester.scala 85:11]
        printf(clock, UInt<1>("h1"), "cycles: %d\n", cycle) @[TileTester.scala 85:11]
      node _T_329 = dshr(dut.io.host.tohost, UInt<1>("h1")) @[TileTester.scala 86:32]
      node _T_330 = eq(_T_329, UInt<1>("h0")) @[TileTester.scala 86:40]
      node _T_331 = bits(reset, 0, 0) @[TileTester.scala 86:11]
      node _T_332 = or(_T_330, _T_331) @[TileTester.scala 86:11]
      node _T_333 = eq(_T_332, UInt<1>("h0")) @[TileTester.scala 86:11]
      when _T_333 : @[TileTester.scala 86:11]
        printf(clock, UInt<1>("h1"), "Assertion failed: * tohost: %d *\n\n    at TileTester.scala:86 assert((dut.io.host.tohost >> 1.U) === 0.U,\n", dut.io.host.tohost) @[TileTester.scala 86:11]
        stop(clock, UInt<1>("h1"), 1) @[TileTester.scala 86:11]
      node _T_334 = bits(reset, 0, 0) @[TileTester.scala 88:9]
      node _T_335 = eq(_T_334, UInt<1>("h0")) @[TileTester.scala 88:9]
      when _T_335 : @[TileTester.scala 88:9]
        stop(clock, UInt<1>("h1"), 0) @[TileTester.scala 88:9]
      node _T_336 = bits(reset, 0, 0) @[TileTester.scala 88:17]
      node _T_337 = eq(_T_336, UInt<1>("h0")) @[TileTester.scala 88:17]
      when _T_337 : @[TileTester.scala 88:17]
        stop(clock, UInt<1>("h1"), 0) @[TileTester.scala 88:17]
    wire chunk : UInt<64> @[TileTester.scala 91:19]
    node _T_338 = dshr(cntr, UInt<4>("h8")) @[TileTester.scala 92:23]
    node _T_339 = bits(cntr, 7, 0) @[TileTester.scala 92:47]
    node _T_340 = mul(_T_339, UInt<7>("h40")) @[TileTester.scala 92:54]
    node _T_341 = dshr(_hex[UInt<1>("h0")], _T_340) @[TileTester.scala 92:39]
    chunk <= _T_341 @[TileTester.scala 92:9]
    node _T_342 = eq(UInt<3>("h0"), state) @[Conditional.scala 37:30]
    when _T_342 : @[Conditional.scala 40:58]
      infer mport _T_343 = _mem[cntr], clock @[TileTester.scala 96:11]
      _T_343 <= chunk @[TileTester.scala 96:18]
      when done : @[TileTester.scala 97:18]
        state <= UInt<3>("h1") @[TileTester.scala 97:26]
    else :
      node _T_344 = eq(UInt<3>("h1"), state) @[Conditional.scala 37:30]
      when _T_344 : @[Conditional.scala 39:67]
        when dut.io.nasti.aw.valid : @[TileTester.scala 101:35]
          node _T_345 = dshl(UInt<1>("h1"), dut.io.nasti.aw.bits.size) @[TileTester.scala 102:21]
          node _T_346 = eq(_T_345, UInt<4>("h8")) @[TileTester.scala 102:58]
          node _T_347 = bits(reset, 0, 0) @[TileTester.scala 102:15]
          node _T_348 = or(_T_346, _T_347) @[TileTester.scala 102:15]
          node _T_349 = eq(_T_348, UInt<1>("h0")) @[TileTester.scala 102:15]
          when _T_349 : @[TileTester.scala 102:15]
            printf(clock, UInt<1>("h1"), "Assertion failed\n    at TileTester.scala:102 assert((1.U << dut.io.nasti.aw.bits.size).asUInt === (nastiXDataBits / 8).U)\n") @[TileTester.scala 102:15]
            stop(clock, UInt<1>("h1"), 1) @[TileTester.scala 102:15]
          node _T_350 = div(dut.io.nasti.aw.bits.addr, UInt<4>("h8")) @[TileTester.scala 103:43]
          addr <= _T_350 @[TileTester.scala 103:14]
          id <= dut.io.nasti.aw.bits.id @[TileTester.scala 104:12]
          len <= dut.io.nasti.aw.bits.len @[TileTester.scala 105:13]
          off <= UInt<1>("h0") @[TileTester.scala 106:13]
          state <= UInt<3>("h2") @[TileTester.scala 107:15]
        else :
          when dut.io.nasti.ar.valid : @[TileTester.scala 108:41]
            node _T_351 = dshl(UInt<1>("h1"), dut.io.nasti.ar.bits.size) @[TileTester.scala 109:21]
            node _T_352 = eq(_T_351, UInt<4>("h8")) @[TileTester.scala 109:58]
            node _T_353 = bits(reset, 0, 0) @[TileTester.scala 109:15]
            node _T_354 = or(_T_352, _T_353) @[TileTester.scala 109:15]
            node _T_355 = eq(_T_354, UInt<1>("h0")) @[TileTester.scala 109:15]
            when _T_355 : @[TileTester.scala 109:15]
              printf(clock, UInt<1>("h1"), "Assertion failed\n    at TileTester.scala:109 assert((1.U << dut.io.nasti.ar.bits.size).asUInt === (nastiXDataBits / 8).U)\n") @[TileTester.scala 109:15]
              stop(clock, UInt<1>("h1"), 1) @[TileTester.scala 109:15]
            node _T_356 = div(dut.io.nasti.ar.bits.addr, UInt<4>("h8")) @[TileTester.scala 110:43]
            addr <= _T_356 @[TileTester.scala 110:14]
            id <= dut.io.nasti.aw.bits.id @[TileTester.scala 111:12]
            len <= dut.io.nasti.ar.bits.len @[TileTester.scala 112:13]
            off <= UInt<1>("h0") @[TileTester.scala 113:13]
            state <= UInt<3>("h4") @[TileTester.scala 114:15]
      else :
        node _T_357 = eq(UInt<3>("h2"), state) @[Conditional.scala 37:30]
        when _T_357 : @[Conditional.scala 39:67]
          when dut.io.nasti.w.valid : @[TileTester.scala 118:34]
            node _T_358 = add(addr, off) @[TileTester.scala 119:19]
            node _T_359 = tail(_T_358, 1) @[TileTester.scala 119:19]
            node _T_360 = bits(_T_359, 19, 0) @[TileTester.scala 119:13]
            infer mport _T_361 = _mem[_T_360], clock @[TileTester.scala 119:13]
            _T_361 <= write @[TileTester.scala 119:26]
            node _T_362 = eq(off, len) @[TileTester.scala 121:18]
            when _T_362 : @[TileTester.scala 121:27]
              node _T_363 = bits(reset, 0, 0) @[TileTester.scala 122:17]
              node _T_364 = or(dut.io.nasti.w.bits.last, _T_363) @[TileTester.scala 122:17]
              node _T_365 = eq(_T_364, UInt<1>("h0")) @[TileTester.scala 122:17]
              when _T_365 : @[TileTester.scala 122:17]
                printf(clock, UInt<1>("h1"), "Assertion failed\n    at TileTester.scala:122 assert(dut.io.nasti.w.bits.last)\n") @[TileTester.scala 122:17]
                stop(clock, UInt<1>("h1"), 1) @[TileTester.scala 122:17]
              state <= UInt<3>("h3") @[TileTester.scala 123:17]
            else :
              node _T_366 = add(off, UInt<1>("h1")) @[TileTester.scala 125:22]
              node _T_367 = tail(_T_366, 1) @[TileTester.scala 125:22]
              off <= _T_367 @[TileTester.scala 125:15]
        else :
          node _T_368 = eq(UInt<3>("h3"), state) @[Conditional.scala 37:30]
          when _T_368 : @[Conditional.scala 39:67]
            when bpipe.ready : @[TileTester.scala 130:25]
              state <= UInt<3>("h1") @[TileTester.scala 131:15]
          else :
            node _T_369 = eq(UInt<3>("h4"), state) @[Conditional.scala 37:30]
            when _T_369 : @[Conditional.scala 39:67]
              when rpipe.ready : @[TileTester.scala 135:25]
                node _T_370 = eq(off, len) @[TileTester.scala 136:18]
                when _T_370 : @[TileTester.scala 136:27]
                  state <= UInt<3>("h1") @[TileTester.scala 137:17]
                else :
                  node _T_371 = add(off, UInt<1>("h1")) @[TileTester.scala 139:22]
                  node _T_372 = tail(_T_371, 1) @[TileTester.scala 139:22]
                  off <= _T_372 @[TileTester.scala 139:15]
