#!/usr/bin/env python3

from pathlib import Path
import csv

_script_dir = Path(__file__).parent.resolve()
_build_dir = _script_dir / "build"


# mapping from Makefile name to name in paper figure
benchmark_names = {"riscv_mini": "riscv-mini", "TLRAM": "TLRAM",
"serv": "serv-chisel",  "NeuromorphicProcessor": "NeuroProc"}


def read_cov_log(filename: Path):
    state = "Start"
    output = {}
    # extract coverage statistics pass output
    with open(filename) as f:
        for line in f:
            if state == "Start":
                if "Starting coverage.CoverageStatisticsPass" in line:
                    state = "Collecting"
            elif state == "Collecting":
                if line.startswith("------------------------------------------------"):
                    break
                if ":" in line:
                    parts = line.split(":")
                    key = parts[0].strip()
                    value = parts[1].strip()
                    output[key] = value
    counts = {
        "# Line": int(output["- Line cover points"]),
        "# Toggle": int(output["- Toggle cover points"]),
    }
    return counts

# loads csv generated by hyperfine and extracts the mean for the baseline
def load_csv(filename: Path):
    assert filename.exists()
    with open(filename, newline='') as csvfile:
        row = list(csv.reader(csvfile))[1] # second line is what we are interested in
        return float(row[1])

def table_to_string(rows):
    return "\n".join(" | ".join(r) for r in rows)


def main():
    header = ["Design", "Cycles Executed", "Run Time", "# Line", "# Toggle"]
    rows = [header]
    # load data from hyperfine
    for name, label in benchmark_names.items():
        row = [label]

        cycle_file = _build_dir / f"{name}_cycles.txt"
        with open(cycle_file) as f:
            line = f.read().strip()
            cycles = int(line.split()[0])
        row += [f"{cycles:,}"]
        #print(cycles)

        perf_file = _build_dir / f"{name}_baseline_results.csv"
        assert perf_file.exists()
        baseline_seconds = load_csv(perf_file)
        row += [f"{baseline_seconds:.2f}s"]
        #print(baseline_seconds)

        filename = _build_dir / f"{name}_coverage.txt"
        assert filename.exists()
        cover_points = read_cov_log(filename)
        row += [
            f"{cover_points['# Line']:,}",
            f"{cover_points['# Toggle']:,}"
        ]
        #print(cover_points)

        rows += [row]


    with open(_build_dir / "table2.csv", "w") as f:
        f.write(table_to_string(rows) + "\n")

if __name__ == '__main__':
    main()