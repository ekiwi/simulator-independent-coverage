#!/usr/bin/env python3
import os
import argparse
import pandas as pd

def load_dat(filename: str):
    with open(filename, 'rb') as f:
        data = f.read()
    lines = [l[4:] for l in data.split(b"\n") if l.startswith(b"C '")]
    values = []
    for line in lines:
        dd, count = line.split(b"'")
        ees = {e[0].decode('ascii'): e[1].decode('ascii') for e in (e.split(b"\x02") for e in dd.split(b"\x01"))}
        ees['count'] = int(count.decode('ascii').strip())
        values.append(ees)
    return pd.DataFrame(values)


def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('-i', '--input', help="path to the coverage.dat file generated by verilator", required=True)
    parser.add_argument('CMD', help="command to execute on the coverage data")
    args =  parser.parse_args()
    if not os.path.isfile(args.input):
        raise RuntimeError(f"Wasn't able to find {args.input}")
    if args.CMD not in commands:
        raise RuntimeError(f"Unknown command `{args.CMD}`!\nTry instead: " + " ".join(commands.keys()))
    return args.input, args.CMD

def show(data):
    print(data)

def signals(data):
    """ tries to extract the signals which have been instrumented
    Example:
        ./read_verilator_cov.py -i verilator_examples/TileTester_per_instance_toggle.dat signals
    """
    sigs = [h + "." + o for o, h in zip(data['o'], data['h'])]
    without_bits = sorted(list({s.split('[')[0] for s in sigs}))
    print("\n".join(without_bits))


commands = {
    'show': show,
    'signals': signals,
}

def main():
    filename, cmd = parse_args()
    data = load_dat(filename)
    commands[cmd](data)

if __name__ == '__main__':
    main()